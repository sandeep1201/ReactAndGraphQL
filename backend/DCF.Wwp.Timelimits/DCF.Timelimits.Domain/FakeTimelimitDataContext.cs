// <auto-generated>
// ReSharper disable ConvertPropertyToExpressionBody
// ReSharper disable DoNotCallOverridableMethodsInConstructor
// ReSharper disable InconsistentNaming
// ReSharper disable PartialMethodWithSinglePart
// ReSharper disable PartialTypeWithSinglePart
// ReSharper disable RedundantNameQualifier
// ReSharper disable RedundantOverridenMember
// ReSharper disable UseNameofExpression
// TargetFrameworkVersion = 4.5
#pragma warning disable 1591    //  Ignore "Missing XML Comment" warning

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using System.Data.Entity;
using System.Threading;
using System.Threading.Tasks;

namespace DCF.Core.Domain
{

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.30.0.0")]
    public class FakeTimelimitDataContext : ITimelimitDataContext
    {
        public System.Data.Entity.DbSet<ApprovalReason> ApprovalReasons { get; set; }
        public System.Data.Entity.DbSet<AuxiliaryPayment> AuxiliaryPayments { get; set; }
        public System.Data.Entity.DbSet<ChangeReason> ChangeReasons { get; set; }
        public System.Data.Entity.DbSet<DeleteReason> DeleteReasons { get; set; }
        public System.Data.Entity.DbSet<Participant> Participants { get; set; }
        public System.Data.Entity.DbSet<TimeLimit> TimeLimits { get; set; }

        public FakeTimelimitDataContext()
        {
            ApprovalReasons = new FakeDbSet<ApprovalReason>("Id");
            AuxiliaryPayments = new FakeDbSet<AuxiliaryPayment>("Id");
            ChangeReasons = new FakeDbSet<ChangeReason>("Id");
            DeleteReasons = new FakeDbSet<DeleteReason>("Id");
            Participants = new FakeDbSet<Participant>("Id");
            TimeLimits = new FakeDbSet<TimeLimit>("Id");
        }

        public Int32 SaveChangesCount { get; private set; }
        public Int32 SaveChanges()
        {
            ++SaveChangesCount;
            return 1;
        }

        public System.Threading.Tasks.Task<Int32> SaveChangesAsync()
        {
            ++SaveChangesCount;
            return Task.FromResult(1);
        }

        public System.Threading.Tasks.Task<Int32> SaveChangesAsync(System.Threading.CancellationToken cancellationToken)
        {
            ++SaveChangesCount;
            return Task.FromResult(1);
        }

        protected virtual void Dispose(Boolean disposing)
        {
        }

        public void Dispose()
        {
            Dispose(true);
        }

        public System.Data.Entity.Infrastructure.DbChangeTracker _changeTracker;
        public System.Data.Entity.Infrastructure.DbChangeTracker ChangeTracker { get { return _changeTracker; } }
        public System.Data.Entity.Infrastructure.DbContextConfiguration _configuration;
        public System.Data.Entity.Infrastructure.DbContextConfiguration Configuration { get { return _configuration; } }
        public System.Data.Entity.Database _database;
        public System.Data.Entity.Database Database { get { return _database; } }
        public System.Data.Entity.Infrastructure.DbEntityEntry<TEntity> Entry<TEntity>(TEntity entity) where TEntity : class
        {
            throw new System.NotImplementedException();
        }
        public System.Data.Entity.Infrastructure.DbEntityEntry Entry(Object entity)
        {
            throw new System.NotImplementedException();
        }
        public System.Collections.Generic.IEnumerable<System.Data.Entity.Validation.DbEntityValidationResult> GetValidationErrors()
        {
            throw new System.NotImplementedException();
        }
        public System.Data.Entity.DbSet Set(System.Type entityType)
        {
            throw new System.NotImplementedException();
        }
        public System.Data.Entity.DbSet<TEntity> Set<TEntity>() where TEntity : class
        {
            throw new System.NotImplementedException();
        }
        public override String ToString()
        {
            throw new System.NotImplementedException();
        }


        // Stored Procedures
        public Task<Int32> InsertDb2T0459InW2LimitsAsync(String pinNum, String benefitMm, String historySeqNum, String clockTypeCd, String creTranCd, String fedClockInd, String fedCmpMthNum, String fedMaxMthNum, String historyCd, String otCmpMthNum, String overrideReasonCd, String totCmpMthNum, String totMaxMthNum, String updatedDt, String userId, String wwCmpMthNum, String wwMaxMthNum, String commentTxt, CancellationToken token = new CancellationToken())
        {
            return Task.FromResult(0);
        }


        public System.Collections.Generic.List<AuxiliaryPayment> SpAuxiliaryPayment(String pinNumber)
        {
            return new System.Collections.Generic.List<AuxiliaryPayment>();
        }

        public System.Threading.Tasks.Task<System.Collections.Generic.List<AuxiliaryPayment>> SpAuxiliaryPaymentAsync(String pinNumber, CancellationToken token = new CancellationToken())
        {
            return System.Threading.Tasks.Task.FromResult(SpAuxiliaryPayment(pinNumber));
        }

        public List<TimelimitDataContext.SpClockPlacementSummaryReturnModel> SpClockPlacementSummary(String pinNumber)
        {
            return new System.Collections.Generic.List<TimelimitDataContext.SpClockPlacementSummaryReturnModel>();
        }

        public Task<List<TimelimitDataContext.SpClockPlacementSummaryReturnModel>> SpClockPlacementSummaryAsync(String pinNumber, String schemaName, CancellationToken token = default(CancellationToken))
        {
            return System.Threading.Tasks.Task.FromResult(SpClockPlacementSummary(pinNumber));
        }

        public System.Collections.Generic.List<SpConfidentialCaseReturnModel> SpConfidentialCase(String caseNumber)
        {
            return new System.Collections.Generic.List<SpConfidentialCaseReturnModel>();
        }

        public Task<List<SpConfidentialCaseReturnModel>> SpConfidentialCaseAsync(String caseNumber, CancellationToken token = new CancellationToken())
        {

            return Task.FromResult(this.SpConfidentialCase(caseNumber));
        }


        public System.Collections.Generic.List<SpOtherParticipantReturnModel> SpOtherParticipant(String pinNumber)
        {

            return new System.Collections.Generic.List<SpOtherParticipantReturnModel>();
        }

        public System.Threading.Tasks.Task<System.Collections.Generic.List<SpOtherParticipantReturnModel>> SpOtherParticipantAsync(String pinNumber, CancellationToken token = default(CancellationToken))
        {
            return System.Threading.Tasks.Task.FromResult(SpOtherParticipant(pinNumber));
        }

        public System.Collections.Generic.List<SpTimeLimitParticipantReturnModel> SpTimeLimitParticipant(String pinNumber)
        {
            return new System.Collections.Generic.List<SpTimeLimitParticipantReturnModel>();
        }


        public System.Threading.Tasks.Task<System.Collections.Generic.List<SpTimeLimitParticipantReturnModel>> SpTimeLimitParticipantAsync(String pinNumber, CancellationToken token = default(CancellationToken))
        {
            return System.Threading.Tasks.Task.FromResult(SpTimeLimitParticipant(pinNumber));
        }

        public Task<Int32> UpdateDb2T0459InW2LimitsAsync(String pinNum, String benefitMm, String historySeqNum, String clockTypeCd, String creTranCd, String fedClockInd, String fedCmpMthNum, String fedMaxMthNum, String historyCd, String otCmpMthNum, String overrideReasonCd, String totCmpMthNum, String totMaxMthNum, String updatedDt, String userId, String wwCmpMthNum, String wwMaxMthNum, String commentTxt, CancellationToken token = default(CancellationToken))
        {
            return Task.FromResult(0);
        }

    }
}
// </auto-generated>
