<#
// Copyright (C) Simon Hughes 2012
// v2.30.0
#>
<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ include file="EF6.Utility.CS.ttinclude"#>
<#@ assembly name="System.Configuration" #>
<#@ assembly name="System.Windows.Forms" #>
<#@ import namespace="System.Data" #>
<#@ import namespace="System.Data.SqlClient" #>
<#@ import namespace="System.Data.Common" #>
<#@ import namespace="System.Data.Entity.Infrastructure.Pluralization" #>
<#@ import namespace="System.Diagnostics" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Text.RegularExpressions" #>
<#@ import namespace="System.Configuration" #>
<#@ import namespace="System.Windows.Forms" #>
<#@ import namespace="EnvDTE" #>
<#@ output extension=".cs"#>
<#
        var code = new CodeGenerationTools(this);
        String Namespace = code.VsNamespaceSuggestion() ?? "DebugMode";
        var fileManager = EntityFrameworkTemplateFileManager.Create(this);
#>
<#+

        [Flags]
        public enum CommentsStyle
        {
            None,
            InSummaryBlock,
            AtEndOfField
        };

        // Settings - edit these in the main <name>.tt file *******************************************************************************
        String ConnectionStringName = "";
        Boolean IncludeViews = true;
        Boolean IncludeSynonyms = false;
        Boolean IncludeStoredProcedures = false;
        Boolean IncludeTableValuedFunctions = false;
        Boolean AddUnitTestingDbContext = true;
        String DbContextName = "MyDbContext";
        String _dbContextInterfaceName = null;
        String DbContextInterfaceName {get {return _dbContextInterfaceName ?? ("I" + DbContextName);} set {_dbContextInterfaceName = value;}}
        String DbContextInterfaceBaseClasses = "System.IDisposable";
        String DbContextBaseClass = "DbContext";
        String _defaultConstructorArgument = null;
        String DefaultConstructorArgument {get {return _defaultConstructorArgument ?? String.Format('"' + "Name={0}" + '"',ConnectionStringName);} set {_defaultConstructorArgument = value;}}
        String ConfigurationClassName = "Configuration";
        String CollectionType = "System.Collections.Generic.List";
        static Boolean NullableShortHand = true;
        Boolean UseDataAnnotations = false;
        Boolean UseDataAnnotationsSchema = false;
        Boolean MakeClassesPartial = true;
        Boolean MakeDbContextInterfacePartial = false;
        Boolean GenerateSeparateFiles = false;
        Boolean UseMappingTables = true;
        static Boolean UsePropertyInitializers = false;
        Boolean IsSqlCe = false;
        String FileExtension = ".cs";
        Boolean UsePascalCase = true;
        Boolean UsePrivateSetterForComputedColumns = true;
        CommentsStyle IncludeComments = CommentsStyle.AtEndOfField;
        Boolean IncludeQueryTraceOn9481Flag = false;
        CommentsStyle IncludeExtendedPropertyComments = CommentsStyle.InSummaryBlock;
        Boolean AddWcfDataAttributes = false;
        String ExtraWcfDataContractAttributes = "";
        static Boolean DisableGeographyTypes = false;
        Boolean PrependSchemaName = true;
        String TableSuffix = null;
        Regex SchemaFilterExclude = null;
        Regex SchemaFilterInclude = null;
        Regex TableFilterExclude = null;
        Regex TableFilterInclude = null;
        Regex StoredProcedureFilterExclude = null;
        Regex StoredProcedureFilterInclude = null;
        Func<Table, Boolean> TableFilter;
        Func<StoredProcedure, Boolean> StoredProcedureFilter = null;
        Func<Table, Boolean> ConfigurationFilter;
        static Dictionary<String, String> StoredProcedureReturnTypes = new Dictionary<String, String>();
        Regex ColumnFilterExclude = null;
        static Boolean UseLazyLoading = true;
        String[] ConfigFilenameSearchOrder = null;
        String[] AdditionalNamespaces = null;
        String[] AdditionalContextInterfaceItems = null;
        String[] AdditionalReverseNavigationsDataAnnotations = null;
        String[] AdditionalForeignKeysDataAnnotations = null;
        private String _connectionString = "";
        private String _providerName = "";
        private String _configFilePath = "";
        Func<String, String, Boolean, String> TableRename;
        Func<StoredProcedure, String> StoredProcedureRename;
        static Func<String, StoredProcedure, String> StoredProcedureReturnModelRename;
        Func<Column, Table, Column> UpdateColumn;
        Func<IList<ForeignKey>, Table, Table, Boolean, ForeignKey> ForeignKeyProcessing;
        Func<ForeignKey, ForeignKey> ForeignKeyFilter;
        Func<String, ForeignKey, String, Relationship, Int16, String> ForeignKeyName;
        String MigrationConfigurationFileName = null;
        String MigrationStrategy = "MigrateDatabaseToLatestVersion";
        String ContextKey = null;
        Boolean AutomaticMigrationsEnabled = true;
        Boolean AutomaticMigrationDataLossAllowed = true;
        List<EnumDefinition> EnumsDefinitions = new List<EnumDefinition>();

        public static String CodeGeneratedAttribute = "[System.CodeDom.Compiler.GeneratedCode(\"EF.Reverse.POCO.Generator\", \"2.30.0.0\")]";
        Boolean IncludeCodeGeneratedAttribute = true;

        // Settings to allow selective code generation
        [Flags]
        private enum Elements
        {
            None = 0,
            Poco = 1,
            Context = 2,
            UnitOfWork = 4,
            PocoConfiguration = 8
        };
        Elements ElementsToGenerate = Elements.Poco | Elements.Context | Elements.UnitOfWork | Elements.PocoConfiguration;
        String PocoNamespace, ContextNamespace, UnitOfWorkNamespace, PocoConfigurationNamespace = "";

        // Settings to allow TargetFramework checks
        private static Single _targetFrameworkVersion;
        Func<String,Boolean> IsSupportedFrameworkVersion = (String frameworkVersion) =>
        {
            var nfi = CultureInfo.InvariantCulture.NumberFormat;
            var isSupported = Single.Parse(frameworkVersion, nfi);
            return isSupported <= _targetFrameworkVersion;
        };


        public const String DataDirectory = "|DataDirectory|";

        static readonly List<String> NotNullable = new List<String>
        {
            "string",
            "byte[]",
            "datatable",
            "system.data.datatable",
            "object",
            "microsoft.sqlserver.types.sqlgeography",
            "microsoft.sqlserver.types.sqlgeometry",
            "system.data.entity.spatial.dbgeography",
            "system.data.entity.spatial.dbgeometry",
            "system.data.entity.hierarchy.hierarchyid"
        };

        static readonly List<String> ReservedKeywords = new List<String>
        {
            "abstract", "as", "base", "bool", "break", "byte", "case", "catch", "char",
            "checked", "class", "const", "continue", "decimal", "default", "delegate", "do",
            "double", "else", "enum", "event", "explicit", "extern", "false", "finally", "fixed",
            "float", "for", "foreach", "goto", "if", "implicit", "in", "int", "interface",
            "internal", "is", "lock", "long", "namespace", "new", "null", "object", "operator",
            "out", "override", "params", "private", "protected", "public", "readonly", "ref",
            "return", "sbyte", "sealed", "short", "sizeof", "stackalloc", "static", "string",
            "struct", "switch", "this", "throw", "true", "try", "typeof", "uint", "ulong",
            "unchecked", "unsafe", "ushort", "using", "virtual", "volatile", "void", "while"
        };
        private static readonly Regex RxCleanUp = new Regex(@"[^\w\d\s_-]", RegexOptions.Compiled);

        private static readonly Func<String, String> CleanUp = (str) =>
        {
            // Replace punctuation and symbols in variable names as these are not allowed.
            Int32 len = str.Length;
            if (len == 0)
                return str;
            var sb = new StringBuilder();
            Boolean replacedCharacter = false;
            for(Int32 n = 0; n < len; ++n )
            {
                Char c = str[n];
                if (c != '_' && c != '-' && (Char.IsSymbol(c) || Char.IsPunctuation(c)))
                {
                    Int32 ascii = c;
                    sb.AppendFormat("{0}", ascii);
                    replacedCharacter = true;
                    continue;
                }
                sb.Append(c);
            }
            if (replacedCharacter)
                str = sb.ToString();

            // Remove non alphanumerics
            str = RxCleanUp.Replace(str, "");
            if(Char.IsDigit(str[0]))
                str = "C" + str;

            return str;
        };

        private static readonly Func<String, String> ToDisplayName = (str) =>
        {
            if (String.IsNullOrEmpty(str))
                return String.Empty;

            var sb = new StringBuilder();
            str = Regex.Replace(str, @"[^a-zA-Z0-9]", " "); // Anything that is not a letter or digit, convert to a space
            str = Regex.Replace(str, @"[A-Z]{2,}", " $+ "); // Any word that is upper case

            var hasUpperCased = false;
            var lastChar = '\0';
            foreach (var original in str.Trim())
            {
                var c = original;
                if (lastChar == '\0')
                {
                    c = Char.ToUpperInvariant(original);
                }
                else
                {
                    var isLetter = Char.IsLetter(original);
                    var isDigit = Char.IsDigit(original);
                    var isWhiteSpace = !isLetter && !isDigit;

                    // Is this char is different to last time
                    var isDifferent = false;
                    if (isLetter && !Char.IsLetter(lastChar))
                        isDifferent = true;
                    else if (isDigit && !Char.IsDigit(lastChar))
                        isDifferent = true;
                    else if (Char.IsUpper(original) && !Char.IsUpper(lastChar))
                        isDifferent = true;

                    if (isDifferent || isWhiteSpace)
                        sb.Append(' '); // Add a space

                    if (hasUpperCased && isLetter)
                        c = Char.ToLowerInvariant(original);
                }
                lastChar = original;
                if (!hasUpperCased && Char.IsUpper(c))
                    hasUpperCased = true;
                sb.Append(c);
            }
            str = sb.ToString();
            str = Regex.Replace(str, @"\s+", " ").Trim(); // Multiple white space to one space
            str = Regex.Replace(str, @"\bid\b", "ID"); //  Make ID word uppercase
            return str;
        };

        public String ConnectionString
        {
            get
            {
                return _connectionString;
            }
            set
            {
                _connectionString = value;
            }
        }

        public String ProviderName
        {
            get
            {
                return _providerName;
            }
            set
            {
                _providerName = value;
            }
        }

        public static void ArgumentNotNull<T>(T arg, String name) where T : class
        {
            if (arg == null)
            {
                throw new ArgumentNullException(name);
            }
        }

        private static Boolean IsNullable(Column col)
        {
            return col.IsNullable && !NotNullable.Contains(col.PropertyType.ToLower());
        }

        private String GetConnectionString(ref String connectionStringName, out String providerName, out String configFilePath)
        {
            providerName = null;
            configFilePath = String.Empty;
            String result = "";
            var paths = GetConfigPaths();

            // Find a configuration file with the named connection string
            foreach (var path in paths)
            {
                var configFile = new ExeConfigurationFileMap { ExeConfigFilename = path };
                var config = System.Configuration.ConfigurationManager.OpenMappedExeConfiguration(configFile, ConfigurationUserLevel.None);
                var connSection = config.ConnectionStrings;

                if (String.IsNullOrEmpty(connectionStringName))
                    continue;

                // Get the named connection string
                try
                {
                    result = connSection.ConnectionStrings[connectionStringName].ConnectionString;
                    providerName = connSection.ConnectionStrings[connectionStringName].ProviderName;
                    configFilePath = path;
                    return result;  // found it
                }
                catch
                {
                    result = "There is no connection string name called '" + connectionStringName + "'";
                }
            }
            return result;
        }

        private void InitConnectionString()
        {
            if(!String.IsNullOrEmpty(_connectionString))
                return;

            _connectionString = GetConnectionString(ref ConnectionStringName, out _providerName, out _configFilePath);

            if(!_connectionString.Contains(DataDirectory))
                return;

            // Replace data directory path
            String dataFilePath = GetDataDirectory();
            _connectionString = _connectionString.Replace(DataDirectory, dataFilePath);
        }

        public EnvDTE.DTE GetDTE()
        {
            var serviceProvider = (IServiceProvider)Host;
            if(serviceProvider == null)
                throw new Exception("Host property returned unexpected value (null)");

            var dte = (EnvDTE.DTE)serviceProvider.GetService(typeof(EnvDTE.DTE));
            if(dte == null)
                throw new Exception("Unable to retrieve EnvDTE.DTE");

            return dte;
        }

        public EnvDTE.Solution GetSolution()
        {
            return GetDTE().Solution;
        }

       public IEnumerable<EnvDTE.Project> GetAllProjects()
       {
            foreach(var projectObj in GetSolution().Projects)
            {
                var project = projectObj as EnvDTE.Project;
                if(project == null)
                    continue;
                if(project.Kind == EnvDTE.Constants.vsProjectKindSolutionItems)
                    foreach(var p in RecurseSolutionFolder(project))
                        yield return p;
                else
                    yield return project;
            }
        }

        private IEnumerable<EnvDTE.Project> RecurseSolutionFolder(EnvDTE.Project project)
        {
            if (project.ProjectItems == null)
                yield break;

            foreach (EnvDTE.ProjectItem projectItem in project.ProjectItems)
            {
                var subProject = projectItem.SubProject;
                if (subProject == null)
                    continue;
                if (subProject.Kind == EnvDTE.Constants.vsProjectKindSolutionItems)
                {
                    foreach (var p in RecurseSolutionFolder(subProject))
                        yield return p;
                }
                else
                    yield return subProject;
            }
        }

        public EnvDTE.Project GetCurrentProject()
        {
            var dte = GetDTE();

            // Get the project item
            var projectItem = dte.Solution.FindProjectItem(this.Host.TemplateFile);
            // Get the project
            var currentProject = projectItem.ContainingProject;
            if (currentProject != null)
                return currentProject;

            // this returns SELECTED (active) project(s) - it may be a different project than the T4 template. Looping over dte.Solution works, but why can't we get their FullName (csproj path)?
            var activeSolutionProjects = (Array)dte.ActiveSolutionProjects;
            if(activeSolutionProjects == null)
                throw new Exception("DTE.ActiveSolutionProjects returned null");

            if (activeSolutionProjects.Length > 0)
            {
                var dteProject = (EnvDTE.Project) activeSolutionProjects.GetValue(0);
                if (dteProject != null)
                    return dteProject;
            }

            var item = dte.Solution.FindProjectItem(Host.TemplateFile);
            if (item != null && item.ContainingProject != null)
                return item.ContainingProject;

            throw new InvalidOperationException("Error in GetCurrentProject(). Unable to find project.");
        }

        private String GetProjectPath(EnvDTE.Project project)
        {
            var fullProjectName = project.FullName;

            if (String.IsNullOrWhiteSpace(fullProjectName))
                return String.Empty;

            try
            {
                var info = new FileInfo(fullProjectName);
                return info.Directory == null ? String.Empty : info.Directory.FullName;
            }
            catch{
                WriteLine("// Project " + fullProjectName + " excluded.");
                return String.Empty;
            }
        }

        private List<String> GetConfigPaths()
        {
            var paths = new List<String>();

            // Local project first
            EnvDTE.Project project = GetCurrentProject();
            paths.AddRange(GetConfigPathsInProject(project));

            // Then other projects next
            var projects = GetAllProjects();
            foreach (EnvDTE.Project dteProject in projects)
            {
                paths.AddRange(GetConfigPathsInProject(dteProject));
            }

            if (!paths.Any() && ConfigFilenameSearchOrder != null)
            {
                var sln = GetSolution();
                paths.AddRange(
                    ConfigFilenameSearchOrder
                    .Select(sln.FindProjectItem)
                    .Where(item => item != null)
                    .Select(item => item.FileNames[0]));
            }

            return paths;
        }

        private List<String> GetConfigPathsInProject(EnvDTE.Project project)
        {
            var paths = new List<String>();
            if (ConfigFilenameSearchOrder == null || project == null)
                return paths;
            foreach (String filename in ConfigFilenameSearchOrder)
            {
                paths.AddRange(GetConfigPathsInProjectForFile(project, filename));
            }
            return paths;
        }

        private List<String> GetConfigPathsInProjectForFile(EnvDTE.Project project, String filename)
        {
            try
            {
                if (project == null || project.Kind == EnvDTE.Constants.vsProjectKindUnmodeled)
                {
                    // Project is 'unloaded'
                    return new List<String>();
                }

                return (from ProjectItem item in project.ProjectItems
                        where item.Name.Equals(filename, StringComparison.InvariantCultureIgnoreCase)
                        select Path.Combine(GetProjectPath(project), item.Name))
                        .ToList();
            }
            catch (Exception)
            {
                return new List<String>();
            }
        }

        // Search for the database file
        public String GetDataDirectory()
        {
            var factory = TryGetDbProviderFactory();
            if (factory != null)
            {
                var paths = GetConfigPaths();
                paths.Add(GetSolution().FullName);
                using (DbConnection conn = factory.CreateConnection())
                {
                    foreach (var path in paths)
                    {
                        try
                        {
                            var directory = Path.GetDirectoryName(path) + "\\";
                            var connStr = _connectionString.Replace(DataDirectory, directory);
                            conn.ConnectionString = connStr;
                            conn.Open();
                            return directory;   // Successfully opened the database. Return the datapath where we found it
                        }
                        catch (Exception)
                        {
                            // Could not open the database. Eat error, and try next path
                        }
                    }
                }
            }

            // Fall back to default
            var project = GetCurrentProject();
            return Path.GetDirectoryName(project.FileName) + "\\App_Data\\";
        }

        private static String ZapPassword(String connectionString)
        {
            var rx = new Regex("password=[^\";]*", RegexOptions.Singleline | RegexOptions.Multiline | RegexOptions.IgnoreCase);
            return rx.Replace(connectionString, "password=**zapped**;");
        }

        private DbProviderFactory GetDbProviderFactory()
        {
            if (_targetFrameworkVersion < 1.0f)
            {
                var project = GetCurrentProject();
                var targetFrameworkMoniker = project.Properties.Item("TargetFrameworkMoniker").Value.ToString();
                var targetFramework = new System.Runtime.Versioning.FrameworkName(targetFrameworkMoniker).Version;
                _targetFrameworkVersion = targetFramework.Major + (targetFramework.Minor * 0.1f);
            }

            InitConnectionString();

            WriteLine("// ------------------------------------------------------------------------------------------------");
            WriteLine("// This code was generated by EntityFramework Reverse POCO Generator (http://www.reversepoco.com/).");
            WriteLine("// Created by Simon Hughes (https://about.me/simon.hughes).");
            WriteLine("//");
            WriteLine("// Do not make changes directly to this file - edit the template instead.");
            WriteLine("//");
            WriteLine("// The following connection settings were used to generate this file:");
            if (!String.IsNullOrEmpty(ConnectionStringName))
            {
                String solutionPath = Path.GetDirectoryName(GetSolution().FileName) + "\\";
                WriteLine("//     Configuration file:     \"{0}\"", _configFilePath.Replace(solutionPath, String.Empty));
                WriteLine("//     Connection String Name: \"{0}\"", ConnectionStringName);
            }
            WriteLine("//     Connection String:      \"{0}\"", ZapPassword(ConnectionString));
            WriteLine("// ------------------------------------------------------------------------------------------------");

            if (!String.IsNullOrEmpty(ProviderName))
            {
                try
                {
                    return DbProviderFactories.GetFactory(ProviderName);
                }
                catch (Exception x)
                {
                    String error = x.Message.Replace("\r\n", "\n").Replace("\n", " ");
                    Warning(String.Format("Failed to load provider \"{0}\" - {1}", ProviderName, error));
                    WriteLine("");
                    WriteLine("// ------------------------------------------------------------------------------------------------");
                    WriteLine("// Failed to load provider \"{0}\" - {1}", ProviderName, error);
                    WriteLine("// ------------------------------------------------------------------------------------------------");
                    WriteLine("");
                }
            }
            else
            {
                Warning("Failed to find providerName in the connection string");
                WriteLine("");
                WriteLine("// ------------------------------------------------------------------------------------------------");
                WriteLine("//  Failed to find providerName in the connection string");
                WriteLine("// ------------------------------------------------------------------------------------------------");
                WriteLine("");
            }
            return null;
        }

        private DbProviderFactory TryGetDbProviderFactory()
        {
            try
            {
                return DbProviderFactories.GetFactory(ProviderName);
            }
            catch (Exception)
            {
                return null;
            }
        }

        private Boolean IsSqlCeConnection(DbConnection connection)
        {
            if(connection.GetType().Name.ToLower() == "sqlceconnection")
                return true;
            return false;
        }

        private Tables LoadTables(DbProviderFactory factory)
        {
            if(factory == null || !(ElementsToGenerate.HasFlag(Elements.Poco) ||
                                    ElementsToGenerate.HasFlag(Elements.Context) ||
                                    ElementsToGenerate.HasFlag(Elements.UnitOfWork) ||
                                    ElementsToGenerate.HasFlag(Elements.PocoConfiguration)))
                return new Tables();

            try
            {
                using(DbConnection conn = factory.CreateConnection())
                {
                    conn.ConnectionString = ConnectionString;
                    conn.Open();

                    IsSqlCe = IsSqlCeConnection(conn);

                    if(IsSqlCe)
                        PrependSchemaName = false;

                    var reader = new SqlServerSchemaReader(conn, factory, IncludeQueryTraceOn9481Flag) { Outer = this };
                    var tables = reader.ReadSchema(SchemaFilterExclude, SchemaFilterInclude, TableFilterExclude, TableFilterInclude, ColumnFilterExclude, TableFilter, UsePascalCase, PrependSchemaName, IncludeComments, IncludeViews, IncludeExtendedPropertyComments, TableRename, UpdateColumn, UsePrivateSetterForComputedColumns, IncludeSynonyms, UseDataAnnotations, UseDataAnnotationsSchema, IsSqlCe);
                    var fkList = reader.ReadForeignKeys(TableRename, ForeignKeyFilter);
                    reader.IdentifyForeignKeys(fkList, tables);

                    foreach (var t in tables)
                    {
                        if(UseDataAnnotationsSchema)
                            t.SetupDataAnnotations();
                        t.Suffix = TableSuffix;
                    }

                    // Work out if there are any foreign key relationship naming clashes
                    reader.ProcessForeignKeys(fkList, tables, UsePascalCase, PrependSchemaName, CollectionType, true, IncludeComments, ForeignKeyName, UseDataAnnotationsSchema, ForeignKeyProcessing);
                    if(UseMappingTables)
                        tables.IdentifyMappingTables(fkList, UsePascalCase, CollectionType, true, IncludeComments, IsSqlCe, ForeignKeyName);

                    // Now we know our foreign key relationships and have worked out if there are any name clashes,
                    // re-map again with intelligently named relationships.
                    tables.ResetNavigationProperties();

                    reader.ProcessForeignKeys(fkList, tables, UsePascalCase, PrependSchemaName, CollectionType, false, IncludeComments, ForeignKeyName, UseDataAnnotationsSchema, ForeignKeyProcessing);
                    if(UseMappingTables)
                        tables.IdentifyMappingTables(fkList, UsePascalCase, CollectionType, false, IncludeComments, IsSqlCe, ForeignKeyName);

                    conn.Close();
                    return tables;
                }
            }
            catch(Exception x)
            {
                String error = x.Message.Replace("\r\n", "\n").Replace("\n", " ");
                Warning(String.Format("Failed to read database schema - {0}", error));
                WriteLine("");
                WriteLine("// -----------------------------------------------------------------------------------------");
                WriteLine("// Failed to read database schema in LoadTables() - {0}", error);
                WriteLine("// -----------------------------------------------------------------------------------------");
                WriteLine("");
                return new Tables();
            }
        }


        private List<StoredProcedure> LoadStoredProcs(DbProviderFactory factory)
        {
            if(factory == null || !IncludeStoredProcedures)
                return new List<StoredProcedure>();

            try
            {
                using(DbConnection conn = factory.CreateConnection())
                {
                    conn.ConnectionString = ConnectionString;
                    conn.Open();

                    if (IsSqlCe)
                       return new List<StoredProcedure>();

                    var reader = new SqlServerSchemaReader(conn, factory, IncludeQueryTraceOn9481Flag) { Outer = this };
                    var storedProcs = reader.ReadStoredProcs(SchemaFilterExclude, StoredProcedureFilterExclude, UsePascalCase, PrependSchemaName, StoredProcedureRename, IncludeTableValuedFunctions);
                    conn.Close();

                    // Remove unrequired stored procs
                    for(Int32 i = storedProcs.Count - 1; i >= 0; i--)
                    {
                        if(SchemaFilterInclude != null && !SchemaFilterInclude.IsMatch(storedProcs[i].Schema))
                        {
                            storedProcs.RemoveAt(i);
                            continue;
                        }
                        if(StoredProcedureFilterInclude != null && !StoredProcedureFilterInclude.IsMatch(storedProcs[i].Name))
                        {
                            storedProcs.RemoveAt(i);
                            continue;
                        }
                        if(!StoredProcedureFilter(storedProcs[i]))
                        {
                            storedProcs.RemoveAt(i);
                            continue;
                        }
                    }

                    using (var sqlConnection = new SqlConnection(ConnectionString))
                    {
                        foreach (var proc in storedProcs)
                            reader.ReadStoredProcReturnObject(sqlConnection, proc);
                    }

                    // Remove stored procs where the return model type contains spaces and cannot be mapped
                    // Also need to remove any TVF functions with parameters that are non scalar types, such as DataTable
                    var validStoredProcedures = new List<StoredProcedure>();
                    foreach (var sp in storedProcs)
                    {
                        if (!sp.ReturnModels.Any())
                        {
                            validStoredProcedures.Add(sp);
                            continue;
                        }

                        if (sp.ReturnModels.Any(returnColumns => returnColumns.Any(c => c.ColumnName.Contains(" "))))
                            continue;

                        if (sp.IsTVF && sp.Parameters.Any(c => c.PropertyType == "System.Data.DataTable"))
                            continue;

                        validStoredProcedures.Add(sp);
                    }
                    return validStoredProcedures;
                }
            }
            catch(Exception x)
            {
                String error = x.Message.Replace("\r\n", "\n").Replace("\n", " ");
                Warning(String.Format("Failed to read database schema for stored procedures - {0}", error));
                WriteLine("");
                WriteLine("// -----------------------------------------------------------------------------------------");
                WriteLine("// Failed to read database schema for stored procedures - {0}", error);
                WriteLine("// -----------------------------------------------------------------------------------------");
                WriteLine("");
                return new List<StoredProcedure>();
            }
        }

        public enum Relationship
        {
            OneToOne,
            OneToMany,
            ManyToOne,
            ManyToMany,
            DoNotUse
        }

        // Calculates the relationship between a child table and it's parent table.
        public static Relationship CalcRelationship(Table parentTable, Table childTable, List<Column> childTableCols, List<Column> parentTableCols)
        {
            if (childTableCols.Count() == 1 && parentTableCols.Count() == 1)
                return CalcRelationshipSingle(parentTable, childTable, childTableCols.First(), parentTableCols.First());

            // This relationship has multiple composite keys

            // childTable FK columns are exactly the primary key (they are part of primary key, and no other columns are primary keys) //TODO: we could also check if they are an unique index
            Boolean childTableColumnsAllPrimaryKeys = (childTableCols.Count() == childTableCols.Count(x => x.IsPrimaryKey)) && (childTableCols.Count() == childTable.PrimaryKeys.Count());

            // parentTable columns are exactly the primary key (they are part of primary key, and no other columns are primary keys) //TODO: we could also check if they are an unique index
            Boolean parentTableColumnsAllPrimaryKeys = (parentTableCols.Count() == parentTableCols.Count(x => x.IsPrimaryKey)) && (parentTableCols.Count() == parentTable.PrimaryKeys.Count());

            // childTable FK columns are not only FK but also the whole PK (not only part of PK); parentTable columns are the whole PK (not only part of PK) - so it's 1:1
            if(childTableColumnsAllPrimaryKeys && parentTableColumnsAllPrimaryKeys)
                return Relationship.OneToOne;

            return Relationship.ManyToOne;
        }

        // Calculates the relationship between a child table and it's parent table.
        public static Relationship CalcRelationshipSingle(Table parentTable, Table childTable, Column childTableCol, Column parentTableCol)
        {
            Boolean childTableSinglePrimaryKey = (childTable.PrimaryKeys.Count() == 1);
            Boolean parentTableSinglePrimaryKey = (parentTable.PrimaryKeys.Count() == 1);

            // 1:1
            if(childTableCol.IsPrimaryKey && parentTableCol.IsPrimaryKey && childTableSinglePrimaryKey && parentTableSinglePrimaryKey)
                return Relationship.OneToOne;

            return Relationship.ManyToOne;
        }

        public class EnumDefinition
        {
            public String Schema;
            public String Table;
            public String Column;
            public String EnumType;
        }

        #region Nested type: Column

        public class PropertyAndComments
        {
            public String Definition;
            public String Comments;
        }

        public class Column
        {
            public String Name; // Raw name of the column as obtained from the database
            public String NameHumanCase; // Name adjusted for C# output
            public String DisplayName;  // Name used in the data annotation [Display(Name = "<DisplayName> goes here")]
            public Boolean  OverrideModifier = false; // Adds 'override' to the property declaration

            public Int32 DateTimePrecision;
            public String Default;
            public Int32 MaxLength;
            public Int32 Precision;
            public String SqlPropertyType;
            public String PropertyType;
            public Int32 Scale;
            public Int32 Ordinal;
            public Int32 PrimaryKeyOrdinal;
            public String ExtendedProperty;
            public String SummaryComments;
            public String UniqueIndexName;

            public Boolean IsIdentity;
            public Boolean IsNullable;
            public Boolean IsPrimaryKey;
            public Boolean IsPrimaryKeyViaUniqueIndex;
            public Boolean IsStoreGenerated;
            public Boolean IsRowVersion;
            public Boolean IsConcurrencyToken; //  Manually set via callback
            public Boolean IsFixedLength;
            public Boolean IsUnicode;
            public Boolean IsMaxLength;
            public Boolean Hidden;
            public Boolean IsForeignKey;

            public String Config;
            public List<String> ConfigFk = new List<String>();
            public String Entity;
            public List<PropertyAndComments> EntityFk = new List<PropertyAndComments>();

            public List<String> DataAnnotations;
            public List<Index> Indexes = new List<Index>();

            public Table ParentTable;

            public void ResetNavigationProperties()
            {
                ConfigFk = new List<String>();
                EntityFk = new List<PropertyAndComments>();
            }

            private void SetupEntity(CommentsStyle includeComments, CommentsStyle includeExtendedPropertyComments, Boolean usePrivateSetterForComputedColumns)
            {
                var comments = String.Empty;
                if (includeComments != CommentsStyle.None)
                {
                    comments = Name;
                    if (IsPrimaryKey)
                    {
                        if (IsPrimaryKeyViaUniqueIndex)
                            comments += " (Primary key via unique index " + UniqueIndexName + ")";
                        else
                            comments += " (Primary key)";
                    }

                    if (MaxLength > 0)
                        comments += String.Format(" (length: {0})", MaxLength);
                }

                var inlineComments = includeComments == CommentsStyle.AtEndOfField ? " // " + comments : String.Empty;

                SummaryComments = String.Empty;
                if (includeComments == CommentsStyle.InSummaryBlock && !String.IsNullOrEmpty(comments))
                {
                    SummaryComments = comments;
                }
                if (includeExtendedPropertyComments == CommentsStyle.InSummaryBlock && !String.IsNullOrEmpty(ExtendedProperty))
                {
                    if (String.IsNullOrEmpty(SummaryComments))
                        SummaryComments = ExtendedProperty;
                    else
                        SummaryComments += ". " + ExtendedProperty;
                }

                if (includeExtendedPropertyComments == CommentsStyle.AtEndOfField && !String.IsNullOrEmpty(ExtendedProperty))
                {
                    if (String.IsNullOrEmpty(inlineComments))
                        inlineComments = " // " + ExtendedProperty;
                    else
                        inlineComments += ". " + ExtendedProperty;
                }
                var initialization = UsePropertyInitializers ? ((this.Default == String.Empty)?"" : String.Format(" = {0};", this.Default)) : "";
                Entity = String.Format("public {0}{1} {2} {{ get; {3}set; }}{4}{5}", (OverrideModifier ? "override " : ""), WrapIfNullable(PropertyType, this), NameHumanCase, usePrivateSetterForComputedColumns && IsComputed() ? "private " : String.Empty, initialization, inlineComments);
            }

            private String WrapIfNullable(String propType, Column col)
            {
                if(!IsNullable(col))
                    return propType;
                return String.Format(NullableShortHand ? "{0}?" : "System.Nullable<{0}>",propType);
            }

            private Boolean IsComputed()
            {
                return IsStoreGenerated && !IsIdentity;
            }

            private void SetupConfig(Boolean dataAnnotations, Boolean dataAnnotationsSchema, Boolean isSqlCe)
            {
                DataAnnotations = new List<String>();
                String databaseGeneratedOption = null;
                var schemaReference = dataAnnotations
                    ? String.Empty
                    : "System.ComponentModel.DataAnnotations.Schema.";

                if (IsIdentity)
                {
                    if(dataAnnotationsSchema)
                        DataAnnotations.Add("DatabaseGenerated(DatabaseGeneratedOption.Identity)");
                    else
                        databaseGeneratedOption = String.Format(".HasDatabaseGeneratedOption({0}DatabaseGeneratedOption.Identity)", schemaReference);
                }

                if(IsComputed())
                {
                    if(dataAnnotationsSchema)
                        DataAnnotations.Add("DatabaseGenerated(DatabaseGeneratedOption.Computed)");
                    else
                        databaseGeneratedOption = String.Format(".HasDatabaseGeneratedOption({0}DatabaseGeneratedOption.Computed)", schemaReference);
                }

                if (IsPrimaryKey && !IsIdentity && !IsStoreGenerated)
                {
                    if(dataAnnotationsSchema)
                        DataAnnotations.Add("DatabaseGenerated(DatabaseGeneratedOption.None)");
                    else
                        databaseGeneratedOption = String.Format(".HasDatabaseGeneratedOption({0}DatabaseGeneratedOption.None)", schemaReference);
                }

                var sb = new StringBuilder();

                if(dataAnnotationsSchema || (IsPrimaryKey && dataAnnotations))
                    DataAnnotations.Add(String.Format("Column(@\"{0}\", Order = {1}, TypeName = \"{2}\")", Name, Ordinal, SqlPropertyType));
                else
                    sb.AppendFormat(".HasColumnName(@\"{0}\").HasColumnType(\"{1}\")", Name, SqlPropertyType);

                if (dataAnnotationsSchema && Indexes.Any())
                {
                    foreach (var index in Indexes)
                    {
                        DataAnnotations.Add(String.Format("Index(@\"{0}\", {1}, IsUnique = {2}, IsClustered = {3})",
                            index.IndexName,
                            index.KeyOrdinal,
                            index.IsUnique ? "true" : "false",
                            index.IsClustered ? "true" : "false"));
                    }
                }

                if (IsNullable)
                {
                    sb.Append(".IsOptional()");
                }
                else
                {
                    if(dataAnnotations)
                        DataAnnotations.Add("Required");
                    else
                        sb.Append(".IsRequired()");
                }

                if (IsFixedLength || IsRowVersion)
                {
                    sb.Append(".IsFixedLength()");
                    // DataAnnotations.Add("????");
                }

                if (!IsUnicode)
                {
                    sb.Append(".IsUnicode(false)");
                    // DataAnnotations.Add("????");
                }

                if (!IsMaxLength && MaxLength > 0)
                {
                    var doNotSpecifySize = (isSqlCe && MaxLength > 4000); // Issue #179

                    if (dataAnnotations)
                    {
                        DataAnnotations.Add(doNotSpecifySize ? "MaxLength" : String.Format("MaxLength({0})", MaxLength));

                        if (PropertyType.Equals("string", StringComparison.InvariantCultureIgnoreCase))
                            DataAnnotations.Add(String.Format("StringLength({0})", MaxLength));
                    }
                    else
                    {
                        if (doNotSpecifySize)
                            sb.Append(".HasMaxLength(null)");
                        else
                            sb.AppendFormat(".HasMaxLength({0})", MaxLength);
                    }
                }

                if (IsMaxLength)
                {
                    if (dataAnnotations)
                        DataAnnotations.Add("MaxLength");
                    else
                        sb.Append(".IsMaxLength()");
                }

                if ((Precision > 0 || Scale > 0) && PropertyType == "decimal")
                {
                    sb.AppendFormat(".HasPrecision({0},{1})", Precision, Scale);
                    // DataAnnotations.Add("????");
                }

                if (IsRowVersion)
                {
                    if (dataAnnotations)
                        DataAnnotations.Add("Timestamp");
                    else
                        sb.Append(".IsRowVersion()");
                }

                if (IsConcurrencyToken)
                {
                    sb.Append(".IsConcurrencyToken()");
                    // DataAnnotations.Add("????");
                }

                if(databaseGeneratedOption != null)
                    sb.Append(databaseGeneratedOption);

                var config = sb.ToString();
                if(!String.IsNullOrEmpty(config))
                    Config = String.Format("Property(x => x.{0}){1};", NameHumanCase, config);

                if (!dataAnnotations)
                    return; // Only data annotations below this point

                if (IsPrimaryKey)
                    DataAnnotations.Add("Key");

                if(NameHumanCase.Equals("CreditCard", StringComparison.InvariantCultureIgnoreCase))
                    DataAnnotations.Add("CreditCard");

                if (NameHumanCase.Equals("Email", StringComparison.InvariantCultureIgnoreCase) ||
                    NameHumanCase.Equals("EmailAddress", StringComparison.InvariantCultureIgnoreCase))
                {
                    DataAnnotations.Add("EmailAddress");
                }

                if(NameHumanCase.Equals("Url", StringComparison.InvariantCultureIgnoreCase))
                    DataAnnotations.Add("Url");

                if(NameHumanCase.Equals("Phone", StringComparison.InvariantCultureIgnoreCase) ||
                   NameHumanCase.Equals("PhoneNumber", StringComparison.InvariantCultureIgnoreCase) ||
                   NameHumanCase.Equals("Mobile", StringComparison.InvariantCultureIgnoreCase) ||
                   NameHumanCase.Equals("MobileNumber", StringComparison.InvariantCultureIgnoreCase) ||
                   NameHumanCase.Equals("Telephone", StringComparison.InvariantCultureIgnoreCase) ||
                   NameHumanCase.Equals("TelephoneNumber", StringComparison.InvariantCultureIgnoreCase))
                    DataAnnotations.Add("Phone");

                if(Name.ToLowerInvariant().Contains("password"))
                    DataAnnotations.Add("DataType(DataType.Password)");

                if(Name.Equals("Username", StringComparison.InvariantCultureIgnoreCase))
                    DataAnnotations.Add("DataType(DataType.Text)");

                DataAnnotations.Add(String.Format("Display(Name = \"{0}\")", DisplayName));
            }

            public void SetupEntityAndConfig(CommentsStyle includeComments, CommentsStyle includeExtendedPropertyComments, Boolean usePrivateSetterForComputedColumns, Boolean dataAnnotations, Boolean dataAnnotationsSchema, Boolean isSqlCe)
            {
                SetupEntity(includeComments, includeExtendedPropertyComments, usePrivateSetterForComputedColumns);
                SetupConfig(dataAnnotations, dataAnnotationsSchema, isSqlCe);
            }

            public void CleanUpDefault()
            {
                if (String.IsNullOrWhiteSpace(Default))
                {
                    Default = String.Empty;
                    return;
                }

                // Remove outer brackets
                while (Default.First() == '(' && Default.Last() == ')' && Default.Length > 2)
                {
                    Default = Default.Substring(1, Default.Length - 2);
                }

                // Remove unicode prefix
                if (IsUnicode && Default.StartsWith("N") && !Default.Equals("NULL", StringComparison.InvariantCultureIgnoreCase))
                    Default = Default.Substring(1, Default.Length - 1);

                if(Default.First() == '\'' && Default.Last() == '\'' && Default.Length >= 2)
                    Default = String.Format("\"{0}\"", Default.Substring(1, Default.Length - 2));

                String lower = Default.ToLower();
                String lowerPropertyType = PropertyType.ToLower();

                // Cleanup default
                switch(lowerPropertyType)
                {
                    case "bool":
                        Default = (Default == "0" || lower == "\"false\"" || lower == "false") ? "false" : "true";
                        break;

                    case "string":
                    case "datetime":
                    case "datetime2":
                    case "system.datetime":
                    case "timespan":
                    case "system.timespan":
                    case "datetimeoffset":
                    case "system.datetimeoffset":
                        if(Default.First() != '"')
                            Default = String.Format("\"{0}\"", Default);
                        if(Default.Contains('\\') || Default.Contains('\r') || Default.Contains('\n'))
                            Default = "@" + Default;
                        break;

                    case "long":
                    case "short":
                    case "int":
                    case "double":
                    case "float":
                    case "decimal":
                    case "byte":
                    case "guid":
                    case "system.guid":
                        if(Default.First() == '\"' && Default.Last() == '\"' && Default.Length > 2)
                            Default = Default.Substring(1, Default.Length - 2);
                        break;

                    case "byte[]":
                    case "system.data.entity.spatial.dbgeography":
                    case "system.data.entity.spatial.dbgeometry":
                        Default = String.Empty;
                        break;
                }

                // Ignore defaults we cannot interpret (we would need SQL to C# compiler)
                if (lower.StartsWith("create default"))
                {
                    Default = String.Empty;
                    return;
                }

                if(String.IsNullOrWhiteSpace(Default))
                {
                    Default = String.Empty;
                    return;
                }

                // Validate default
                switch(lowerPropertyType)
                {
                    case "long":
                        Int64 l;
                        if(!Int64.TryParse(Default, out l))
                            Default = String.Empty;
                        break;

                    case "short":
                        Int16 s;
                        if(!Int16.TryParse(Default, out s))
                            Default = String.Empty;
                        break;

                    case "int":
                        Int32 i;
                        if(!Int32.TryParse(Default, out i))
                            Default = String.Empty;
                        break;

                    case "datetime":
                    case "datetime2":
                    case "system.datetime":
                        DateTime dt;
                        if(!DateTime.TryParse(Default, out dt))
                            Default = (lower.Contains("getdate()") || lower.Contains("sysdatetime")) ? "System.DateTime.Now" : (lower.Contains("getutcdate()") || lower.Contains("sysutcdatetime")) ? "System.DateTime.UtcNow" : String.Empty;
                        else
                            Default = String.Format("System.DateTime.Parse({0})", Default);
                        break;

                    case "datetimeoffset":
                    case "system.datetimeoffset":
                        DateTimeOffset dto;
                        if(!DateTimeOffset.TryParse(Default, out dto))
                            Default = lower.Contains("sysdatetimeoffset") ? "System.DateTimeOffset.Now" : lower.Contains("sysutcdatetime") ? "System.DateTimeOffset.UtcNow" : String.Empty;
                        else
                            Default = String.Format("System.DateTimeOffset.Parse({0})", Default);
                        break;

                    case "timespan":
                    case "system.timespan":
                        TimeSpan ts;
                        if(!TimeSpan.TryParse(Default, out ts))
                            Default = String.Empty;
                        else
                            Default = String.Format("System.TimeSpan.Parse({0})", Default);
                        break;

                    case "double":
                        Double d;
                        if(!Double.TryParse(Default, out d))
                            Default = String.Empty;
                        break;

                    case "float":
                        Single f;
                        if(!Single.TryParse(Default, out f))
                            Default = String.Empty;
                        break;

                    case "decimal":
                        Decimal dec;
                        if (!Decimal.TryParse(Default, out dec))
                            Default = String.Empty;
                        else
                            Default += "m";
                        break;

                    case "byte":
                        Byte b;
                        if(!Byte.TryParse(Default, out b))
                            Default = String.Empty;
                        break;

                    case "bool":
                        Boolean x;
                        if(!Boolean.TryParse(Default, out x))
                            Default = String.Empty;
                        break;

                    case "string":
                        if (lower.Contains("newid()") || lower.Contains("newsequentialid()"))
                            Default = "System.Guid.NewGuid().ToString()";
                        if(lower.StartsWith("space("))
                            Default = "\"\"";
                        if(lower == "null")
                            Default = String.Empty;
                        break;

                    case "guid":
                    case "system.guid":
                        if (lower.Contains("newid()") || lower.Contains("newsequentialid()"))
                            Default = "System.Guid.NewGuid()";
                        else if (lower.Contains("null"))
                            Default = "null";
                        else
                            Default = String.Format("System.Guid.Parse(\"{0}\")", Default);
                        break;
                }
            }
        }

        #endregion

        #region Nested type: Stored Procedure

        public class StoredProcedure
        {
            public String Schema;
            public String Name;
            public String NameHumanCase;
            public List<StoredProcedureParameter> Parameters;
            public List<List<DataColumn>> ReturnModels;    // A list of return models, containing a list of return columns
            public Boolean IsTVF;

            public StoredProcedure()
            {
                Parameters = new List<StoredProcedureParameter>();
                ReturnModels = new List<List<DataColumn>>();
            }

            public static Boolean IsNullable(DataColumn col)
            {
                return col.AllowDBNull && !NotNullable.Contains(col.DataType.Name.ToLower());
            }

            public static String WrapTypeIfNullable(String propertyType, DataColumn col) {
                if(!IsNullable(col))
                    return propertyType;
                return String.Format(NullableShortHand ? "{0}?" : "System.Nullable<{0}>",propertyType);
            }

        }

        public enum StoredProcedureParameterMode
        {
            In,
            InOut,
            Out
        };

        public class StoredProcedureParameter
        {
            public Int32 Ordinal;
            public StoredProcedureParameterMode Mode;
            public String Name;
            public String NameHumanCase;
            public String SqlDbType;
            public String PropertyType;
            public String UserDefinedTypeName;
            public Int32 DateTimePrecision;
            public Int32 MaxLength;
            public Int32 Precision;
            public Int32 Scale;
        }

        #endregion

        #region Nested type: Inflector

        /// <summary>
        /// Summary for the Inflector class
        /// </summary>
        public static class Inflector
        {
            public static IPluralizationService PluralizationService = null;

            /// <summary>
            /// Makes the plural.
            /// </summary>
            /// <param name="word">The word.</param>
            /// <returns></returns>
            public static String MakePlural(String word)
            {
                try
                {
                    if (String.IsNullOrEmpty(word))
                        return String.Empty;
                    if(PluralizationService == null)
                        return word;

                    if (word.Contains('_')) return MakePluralHelper(word, '_');
                    if (word.Contains(' ')) return MakePluralHelper(word, ' ');
                    if (word.Contains('-')) return MakePluralHelper(word, '-');

                    return PluralizationService.Pluralize(word);
                }
                catch (Exception)
                {
                    return word;
                }
            }

            private static String MakePluralHelper(String word, Char split)
            {
                if (String.IsNullOrEmpty(word))
                    return String.Empty;
                var parts = word.Split(split);
                parts[parts.Length - 1] = PluralizationService.Pluralize(parts[parts.Length - 1]); // Pluralize just the last word
                return String.Join(split.ToString(), parts);
            }

            /// <summary>
            /// Makes the singular.
            /// </summary>
            /// <param name="word">The word.</param>
            /// <returns></returns>
            public static String MakeSingular(String word)
            {
                try
                {
                    if (String.IsNullOrEmpty(word))
                        return String.Empty;

                    if(PluralizationService == null)
                        return word;

                    if (word.Contains('_')) return MakeSingularHelper(word, '_');
                    if (word.Contains(' ')) return MakeSingularHelper(word, ' ');
                    if (word.Contains('-')) return MakeSingularHelper(word, '-');

                    return PluralizationService.Singularize(word);
                }
                catch (Exception)
                {
                    return word;
                }
            }

            private static String MakeSingularHelper(String word, Char split)
            {
                if (String.IsNullOrEmpty(word))
                    return String.Empty;
                var parts = word.Split(split);
                parts[parts.Length - 1] = PluralizationService.Singularize(parts[parts.Length - 1]); // Pluralize just the last word
                return String.Join(split.ToString(), parts);
            }

            /// <summary>
            /// Converts the string to title case.
            /// </summary>
            /// <param name="word">The word.</param>
            /// <returns></returns>
            public static String ToTitleCase(String word)
            {
                if (String.IsNullOrEmpty(word))
                    return String.Empty;

                var s = Regex.Replace(ToHumanCase(AddUnderscores(word)), @"\b([a-z])", match => match.Captures[0].Value.ToUpperInvariant());
                var digit = false;
                var sb = new StringBuilder();
                foreach (var c in s)
                {
                    if (Char.IsDigit(c))
                    {
                        digit = true;
                        sb.Append(c);
                    }
                    else
                    {
                        if (digit && Char.IsLower(c))
                            sb.Append(Char.ToUpperInvariant(c));
                        else
                            sb.Append(c);
                        digit = false;
                    }
                }
                return sb.ToString();
            }

            /// <summary>
            /// Converts the string to human case.
            /// </summary>
            /// <param name="lowercaseAndUnderscoredWord">The lowercase and underscored word.</param>
            /// <returns></returns>
            public static String ToHumanCase(String lowercaseAndUnderscoredWord)
            {
                if (String.IsNullOrEmpty(lowercaseAndUnderscoredWord))
                    return String.Empty;
                return MakeInitialCaps(Regex.Replace(lowercaseAndUnderscoredWord, @"_", " "));
            }


            /// <summary>
            /// Adds the underscores.
            /// </summary>
            /// <param name="pascalCasedWord">The pascal cased word.</param>
            /// <returns></returns>
            public static String AddUnderscores(String pascalCasedWord)
            {
                if (String.IsNullOrEmpty(pascalCasedWord))
                    return String.Empty;
                return Regex.Replace(Regex.Replace(Regex.Replace(pascalCasedWord, @"([A-Z]+)([A-Z][a-z])", "$1_$2"), @"([a-z\d])([A-Z])", "$1_$2"), @"[-\s]", "_").ToLowerInvariant();
            }

            /// <summary>
            /// Makes the initial caps.
            /// </summary>
            /// <param name="word">The word.</param>
            /// <returns></returns>
            public static String MakeInitialCaps(String word)
            {
                if (String.IsNullOrEmpty(word))
                    return String.Empty;
                return String.Concat(word.Substring(0, 1).ToUpperInvariant(), word.Substring(1).ToLowerInvariant());
            }

            /// <summary>
            /// Makes the initial character lowercase.
            /// </summary>
            /// <param name="word">The word.</param>
            /// <returns></returns>
            public static String MakeInitialLower(String word)
            {
                if (String.IsNullOrEmpty(word))
                    return String.Empty;
                return String.Concat(word.Substring(0, 1).ToLowerInvariant(), word.Substring(1));
            }

            public static String MakeLowerIfAllCaps(String word)
            {
                if (String.IsNullOrEmpty(word))
                    return String.Empty;
                return IsAllCaps(word) ? word.ToLowerInvariant() : word;
            }

            public static Boolean IsAllCaps(String word)
            {
                if (String.IsNullOrEmpty(word))
                    return false;
                return word.All(Char.IsUpper);
            }
        }

        #endregion

        #region Nested type: SchemaReader

        private abstract class SchemaReader
        {
            protected readonly DbCommand Cmd;

            protected SchemaReader(DbConnection connection, DbProviderFactory factory)
            {
                Cmd = factory.CreateCommand();
                if(Cmd != null)
                    Cmd.Connection = connection;
            }

            public GeneratedTextTransformation Outer;
            public abstract Tables ReadSchema(Regex schemaFilterExclude, Regex schemaFilterInclude, Regex tableFilterExclude, Regex tableFilterInclude, Regex columnFilterExclude, Func<Table, Boolean> tableFilter, Boolean usePascalCase, Boolean prependSchemaName, CommentsStyle includeComments, Boolean includeViews, CommentsStyle includeExtendedPropertyComments, Func<String, String, Boolean, String> tableRename, Func<Column, Table, Column> updateColumn, Boolean usePrivateSetterForComputedColumns, Boolean includeSynonyms, Boolean dataAnnotations, Boolean dataAnnotationsSchema, Boolean isSqlCe);
            public abstract List<StoredProcedure> ReadStoredProcs(Regex SchemaFilterExclude, Regex storedProcedureFilterExclude, Boolean usePascalCase, Boolean prependSchemaName , Func<StoredProcedure, String> StoredProcedureRename, Boolean includeTableValuedFunctions);
            public abstract List<ForeignKey> ReadForeignKeys(Func<String, String, Boolean, String> tableRename, Func<ForeignKey, ForeignKey> foreignKeyFilter);
            public abstract void ProcessForeignKeys(List<ForeignKey> fkList, Tables tables, Boolean usePascalCase, Boolean prependSchemaName, String collectionType, Boolean checkForFkNameClashes, CommentsStyle includeComments, Func<String, ForeignKey, String, Relationship, Int16, String> ForeignKeyName, Boolean dataAnnotationsSchema, Func<IList<ForeignKey>, Table, Table, Boolean, ForeignKey> foreignKeyProcessing);
            public abstract void IdentifyForeignKeys(List<ForeignKey> fkList, Tables tables);
            public abstract void ReadIndexes(Tables tables);
            public abstract void ReadExtendedProperties(Tables tables);

            protected void WriteLine(String o)
            {
                Outer.WriteLine(o);
            }

            protected Boolean IsFilterExcluded(Regex filterExclude, Regex filterInclude, String name)
            {
                if(filterExclude != null && filterExclude.IsMatch(name))
                    return true;
                if(filterInclude != null && !filterInclude.IsMatch(name))
                    return true;
                if (name.Contains('.'))    // EF does not allow tables to contain a period character
                    return true;
                return false;
            }
        }

        #endregion

        private class SqlServerSchemaReader : SchemaReader
        {
            private static String SqlDatabaseEdition, SqlDatabaseEngineEdition;

            private const String TableSQL = @"
SELECT  c.TABLE_SCHEMA AS SchemaName,
        c.TABLE_NAME AS TableName,
        t.TABLE_TYPE AS TableType,
        c.ORDINAL_POSITION AS Ordinal,
        c.COLUMN_NAME AS ColumnName,
        CAST(CASE WHEN IS_NULLABLE = 'YES' THEN 1
                  ELSE 0
             END AS BIT) AS IsNullable,
        DATA_TYPE AS TypeName,
        ISNULL(CHARACTER_MAXIMUM_LENGTH, 0) AS [MaxLength],
        CAST(ISNULL(NUMERIC_PRECISION, 0) AS INT) AS [Precision],
        ISNULL(COLUMN_DEFAULT, '') AS [Default],
        CAST(ISNULL(DATETIME_PRECISION, 0) AS INT) AS DateTimePrecision,
        ISNULL(NUMERIC_SCALE, 0) AS Scale,
        CAST(COLUMNPROPERTY(OBJECT_ID(QUOTENAME(c.TABLE_SCHEMA) + '.' + QUOTENAME(c.TABLE_NAME)), c.COLUMN_NAME, 'IsIdentity') AS BIT) AS IsIdentity,
        CAST(CASE WHEN COLUMNPROPERTY(OBJECT_ID(QUOTENAME(c.TABLE_SCHEMA) + '.' + QUOTENAME(c.TABLE_NAME)), c.COLUMN_NAME, 'IsIdentity') = 1 THEN 1
                  WHEN COLUMNPROPERTY(OBJECT_ID(QUOTENAME(c.TABLE_SCHEMA) + '.' + QUOTENAME(c.TABLE_NAME)), c.COLUMN_NAME, 'IsComputed') = 1 THEN 1
                  WHEN DATA_TYPE = 'TIMESTAMP' THEN 1
                  WHEN DATA_TYPE = 'UNIQUEIDENTIFIER' AND LOWER(ISNULL(COLUMN_DEFAULT, '')) LIKE '%newsequentialid%' THEN 1
                  ELSE 0
             END AS BIT) AS IsStoreGenerated,
        CAST(CASE WHEN pk.ORDINAL_POSITION IS NULL THEN 0
                  ELSE 1
             END AS BIT) AS PrimaryKey,
        ISNULL(pk.ORDINAL_POSITION, 0) PrimaryKeyOrdinal,
        CAST(CASE WHEN fk.COLUMN_NAME IS NULL THEN 0
                  ELSE 1
             END AS BIT) AS IsForeignKey
FROM    INFORMATION_SCHEMA.COLUMNS c
        LEFT OUTER JOIN (SELECT u.TABLE_SCHEMA,
                                u.TABLE_NAME,
                                u.COLUMN_NAME,
                                u.ORDINAL_POSITION
                         FROM   INFORMATION_SCHEMA.KEY_COLUMN_USAGE u
                                INNER JOIN INFORMATION_SCHEMA.TABLE_CONSTRAINTS tc
                                    ON u.TABLE_SCHEMA = tc.CONSTRAINT_SCHEMA
                                       AND u.TABLE_NAME = tc.TABLE_NAME
                                       AND u.CONSTRAINT_NAME = tc.CONSTRAINT_NAME
                         WHERE  CONSTRAINT_TYPE = 'PRIMARY KEY') pk
            ON c.TABLE_SCHEMA = pk.TABLE_SCHEMA
               AND c.TABLE_NAME = pk.TABLE_NAME
               AND c.COLUMN_NAME = pk.COLUMN_NAME
        LEFT OUTER JOIN (SELECT DISTINCT
                                u.TABLE_SCHEMA,
                                u.TABLE_NAME,
                                u.COLUMN_NAME
                         FROM   INFORMATION_SCHEMA.KEY_COLUMN_USAGE u
                                INNER JOIN INFORMATION_SCHEMA.TABLE_CONSTRAINTS tc
                                    ON u.TABLE_SCHEMA = tc.CONSTRAINT_SCHEMA
                                       AND u.TABLE_NAME = tc.TABLE_NAME
                                       AND u.CONSTRAINT_NAME = tc.CONSTRAINT_NAME
                         WHERE  CONSTRAINT_TYPE = 'FOREIGN KEY') fk
            ON c.TABLE_SCHEMA = fk.TABLE_SCHEMA
               AND c.TABLE_NAME = fk.TABLE_NAME
               AND c.COLUMN_NAME = fk.COLUMN_NAME
        INNER JOIN INFORMATION_SCHEMA.TABLES t
            ON c.TABLE_SCHEMA = t.TABLE_SCHEMA
               AND c.TABLE_NAME = t.TABLE_NAME
WHERE c.TABLE_NAME NOT IN ('EdmMetadata', '__MigrationHistory')
      AND c.TABLE_NAME NOT LIKE 'sysdiagram%'";

            private const String SynonymTableSQLSetup = @"
SET NOCOUNT ON;
IF OBJECT_ID('tempdb..#SynonymDetails') IS NOT NULL DROP TABLE #SynonymDetails;
IF OBJECT_ID('tempdb..#SynonymTargets') IS NOT NULL DROP TABLE #SynonymTargets;

-- Synonyms
-- Create the #SynonymDetails temp table structure for later use
SELECT TOP (0) sc.name AS SchemaName,
        sn.name AS TableName,
        'SN' AS TableType,
        COLUMNPROPERTY(c.object_id, c.name, 'ordinal') AS Ordinal,
        c.name AS ColumnName,
        c.is_nullable AS IsNullable,
        ISNULL(TYPE_NAME(c.system_type_id), t.name) AS TypeName,
        ISNULL(COLUMNPROPERTY(c.object_id, c.name, 'charmaxlen'), 0) AS [MaxLength],
        CAST(ISNULL(CONVERT(TINYINT, CASE WHEN c.system_type_id IN (48, 52, 56, 59, 60, 62, 106, 108, 122, 127) THEN c.precision
                                     END), 0) AS INT) AS [Precision],
        ISNULL(CONVERT(NVARCHAR(4000), OBJECT_DEFINITION(c.default_object_id)), '') AS [Default],
        CAST(ISNULL(CONVERT(SMALLINT, CASE WHEN c.system_type_id IN (40, 41, 42, 43, 58, 61) THEN ODBCSCALE(c.system_type_id, c.scale)
                                      END), 0) AS INT) AS DateTimePrecision,
        ISNULL(CONVERT(INT, CASE WHEN c.system_type_id IN (40, 41, 42, 43, 58, 61) THEN NULL
                                 ELSE ODBCSCALE(c.system_type_id, c.scale)
                            END), 0) AS Scale,
        CAST(COLUMNPROPERTY(OBJECT_ID(sn.base_object_name), c.name, 'IsIdentity') AS BIT) AS IsIdentity,
        CAST(CASE WHEN COLUMNPROPERTY(OBJECT_ID(QUOTENAME(sc.NAME) + '.' + QUOTENAME(o.NAME)), c.NAME, 'IsIdentity') = 1 THEN 1
                  WHEN COLUMNPROPERTY(OBJECT_ID(QUOTENAME(sc.NAME) + '.' + QUOTENAME(o.NAME)), c.NAME, 'IsComputed') = 1 THEN 1
                  WHEN ISNULL(TYPE_NAME(c.system_type_id), t.NAME) = 'TIMESTAMP' THEN 1
                  WHEN ISNULL(TYPE_NAME(c.system_type_id), t.NAME) = 'UNIQUEIDENTIFIER'
                       AND LOWER(ISNULL(CONVERT(NVARCHAR(4000), OBJECT_DEFINITION(c.default_object_id)), '')) LIKE '%newsequentialid%' THEN 1
                  ELSE 0
             END AS BIT) AS IsStoreGenerated,
        CAST(CASE WHEN pk.ORDINAL_POSITION IS NULL THEN 0
                  ELSE 1
             END AS BIT) AS PrimaryKey,
        ISNULL(pk.ORDINAL_POSITION, 0) PrimaryKeyOrdinal,
        CAST(CASE WHEN fk.COLUMN_NAME IS NULL THEN 0
                  ELSE 1
             END AS BIT) AS IsForeignKey
INTO #SynonymDetails
FROM    sys.synonyms sn
        INNER JOIN sys.columns c
            ON c.[object_id] = OBJECT_ID(sn.base_object_name)
        INNER JOIN sys.schemas sc
            ON sc.[schema_id] = sn.[schema_id]
        LEFT JOIN sys.types t
            ON c.user_type_id = t.user_type_id
        INNER JOIN sys.objects o
            ON c.[object_id] = o.[object_id]
        LEFT OUTER JOIN (
                         SELECT u.TABLE_SCHEMA,
                                u.TABLE_NAME,
                                u.COLUMN_NAME,
                                u.ORDINAL_POSITION
                         FROM   INFORMATION_SCHEMA.KEY_COLUMN_USAGE u
                                INNER JOIN INFORMATION_SCHEMA.TABLE_CONSTRAINTS tc
                                    ON u.TABLE_SCHEMA = tc.CONSTRAINT_SCHEMA
                                       AND u.TABLE_NAME = tc.TABLE_NAME
                                       AND u.CONSTRAINT_NAME = tc.CONSTRAINT_NAME
                         WHERE  CONSTRAINT_TYPE = 'PRIMARY KEY'
                        ) pk
            ON sc.name = pk.TABLE_SCHEMA
               AND sn.name = pk.TABLE_NAME
               AND c.name = pk.COLUMN_NAME
        LEFT OUTER JOIN (
                         SELECT DISTINCT
                                u.TABLE_SCHEMA,
                                u.TABLE_NAME,
                                u.COLUMN_NAME
                         FROM   INFORMATION_SCHEMA.KEY_COLUMN_USAGE u
                                INNER JOIN INFORMATION_SCHEMA.TABLE_CONSTRAINTS tc
                                    ON u.TABLE_SCHEMA = tc.CONSTRAINT_SCHEMA
                                       AND u.TABLE_NAME = tc.TABLE_NAME
                                       AND u.CONSTRAINT_NAME = tc.CONSTRAINT_NAME
                         WHERE  CONSTRAINT_TYPE = 'FOREIGN KEY'
                        ) fk
            ON sc.name = fk.TABLE_SCHEMA
               AND sn.name = fk.TABLE_NAME
               AND c.name = fk.COLUMN_NAME;

DECLARE @synonymDetailsQueryTemplate nvarchar(max) = 'USE [@synonmymDatabaseName];
INSERT INTO #SynonymDetails (SchemaName, TableName, TableType, Ordinal, ColumnName, IsNullable, TypeName, [MaxLength], [Precision],
                             [Default], DateTimePrecision, Scale, IsIdentity, IsStoreGenerated, PrimaryKey, PrimaryKeyOrdinal, IsForeignKey)
SELECT st.SynonymSchemaName AS SchemaName,
        st.SynonymName AS TableName,
        ''SN'' AS TableType,
        COLUMNPROPERTY(c.object_id, c.name, ''ordinal'') AS Ordinal,
        c.name AS ColumnName,
        c.is_nullable AS IsNullable,
        ISNULL(TYPE_NAME(c.system_type_id), t.name) AS TypeName,
        ISNULL(COLUMNPROPERTY(c.object_id, c.name, ''charmaxlen''), 0) AS [MaxLength],
        CAST(ISNULL(CONVERT(TINYINT, CASE WHEN c.system_type_id IN (48, 52, 56, 59, 60, 62, 106, 108, 122, 127) THEN c.precision
                                     END), 0) AS INT) AS [Precision],
        ISNULL(CONVERT(NVARCHAR(4000), OBJECT_DEFINITION(c.default_object_id)), '''') AS [Default],
        CAST(ISNULL(CONVERT(SMALLINT, CASE WHEN c.system_type_id IN (40, 41, 42, 43, 58, 61) THEN ODBCSCALE(c.system_type_id, c.scale)
                                      END), 0) AS INT) AS DateTimePrecision,
        ISNULL(CONVERT(INT, CASE WHEN c.system_type_id IN (40, 41, 42, 43, 58, 61) THEN NULL
                                 ELSE ODBCSCALE(c.system_type_id, c.scale)
                            END), 0) AS Scale,
        CAST(COLUMNPROPERTY(st.base_object_id, c.name, ''IsIdentity'') AS BIT) AS IsIdentity,
        CAST(CASE WHEN COLUMNPROPERTY(st.base_object_id, c.NAME, ''IsIdentity'') = 1 THEN 1
                  WHEN COLUMNPROPERTY(st.base_object_id, c.NAME, ''IsComputed'') = 1 THEN 1
                  WHEN ISNULL(TYPE_NAME(c.system_type_id), t.NAME) = ''TIMESTAMP'' THEN 1
                  WHEN ISNULL(TYPE_NAME(c.system_type_id), t.NAME) = ''UNIQUEIDENTIFIER''
                       AND LOWER(ISNULL(CONVERT(NVARCHAR(4000), OBJECT_DEFINITION(c.default_object_id)), '''')) LIKE ''%newsequentialid%'' THEN 1
                  ELSE 0
             END AS BIT) AS IsStoreGenerated,
        CAST(CASE WHEN pk.ORDINAL_POSITION IS NULL THEN 0
                  ELSE 1
             END AS BIT) AS PrimaryKey,
        ISNULL(pk.ORDINAL_POSITION, 0) PrimaryKeyOrdinal,
        CAST(CASE WHEN fk.COLUMN_NAME IS NULL THEN 0
                  ELSE 1
             END AS BIT) AS IsForeignKey
FROM    #SynonymTargets st
        INNER JOIN sys.columns c
            ON c.[object_id] = st.base_object_id
        LEFT JOIN sys.types t
            ON c.user_type_id = t.user_type_id
        INNER JOIN sys.objects o
            ON c.[object_id] = o.[object_id]
        LEFT OUTER JOIN (
                         SELECT u.TABLE_SCHEMA,
                                u.TABLE_NAME,
                                u.COLUMN_NAME,
                                u.ORDINAL_POSITION
                         FROM   INFORMATION_SCHEMA.KEY_COLUMN_USAGE u
                                INNER JOIN INFORMATION_SCHEMA.TABLE_CONSTRAINTS tc
                                    ON u.TABLE_SCHEMA = tc.CONSTRAINT_SCHEMA
                                       AND u.TABLE_NAME = tc.TABLE_NAME
                                       AND u.CONSTRAINT_NAME = tc.CONSTRAINT_NAME
                         WHERE  CONSTRAINT_TYPE = ''PRIMARY KEY''
                        ) pk
            ON st.SchemaName = pk.TABLE_SCHEMA
               AND st.ObjectName = pk.TABLE_NAME
               AND c.name = pk.COLUMN_NAME
        LEFT OUTER JOIN (
                         SELECT DISTINCT
                                u.TABLE_SCHEMA,
                                u.TABLE_NAME,
                                u.COLUMN_NAME
                         FROM   INFORMATION_SCHEMA.KEY_COLUMN_USAGE u
                                INNER JOIN INFORMATION_SCHEMA.TABLE_CONSTRAINTS tc
                                    ON u.TABLE_SCHEMA = tc.CONSTRAINT_SCHEMA
                                       AND u.TABLE_NAME = tc.TABLE_NAME
                                       AND u.CONSTRAINT_NAME = tc.CONSTRAINT_NAME
                         WHERE  CONSTRAINT_TYPE = ''FOREIGN KEY''
                        ) fk
            ON st.SchemaName = fk.TABLE_SCHEMA
               AND st.ObjectName = fk.TABLE_NAME
               AND c.name = fk.COLUMN_NAME
WHERE st.DatabaseName = @synonmymDatabaseName;
'

-- Pull details about the synonym target from each database being referenced
SELECT sc.name AS SynonymSchemaName, sn.name as SynonymName
    , sn.[object_id]
    , sn.base_object_name
    , OBJECT_ID(sn.base_object_name) as base_object_id
    , PARSENAME(sn.base_object_name, 1) as ObjectName
    , ISNULL(PARSENAME(sn.base_object_name, 2), sc.name) as SchemaName
    , ISNULL(PARSENAME(sn.base_object_name, 3), DB_NAME()) as DatabaseName
    , PARSENAME(sn.base_object_name, 4) as ServerName
INTO #SynonymTargets
FROM sys.synonyms sn
INNER JOIN sys.schemas sc
    ON sc.[schema_id] = sn.[schema_id]
WHERE ISNULL(PARSENAME(sn.base_object_name, 4), @@SERVERNAME) = @@SERVERNAME -- Only populate info from current server

-- Loop through synonyms and populate #SynonymDetails
DECLARE @synonmymDatabaseName sysname = (SELECT TOP (1) DatabaseName FROM #SynonymTargets)
DECLARE @synonmymDetailsSelect nvarchar(max)
WHILE (@synonmymDatabaseName IS NOT NULL)
BEGIN
    SET @synonmymDetailsSelect = REPLACE(@synonymDetailsQueryTemplate, '[@synonmymDatabaseName]', '[' + @synonmymDatabaseName + ']')
    --SELECT @synonmymDetailsSelect
    EXEC sp_executesql @stmt=@synonmymDetailsSelect, @params=N'@synonmymDatabaseName sysname', @synonmymDatabaseName=@synonmymDatabaseName
    DELETE FROM #SynonymTargets WHERE DatabaseName = @synonmymDatabaseName
    SET @synonmymDatabaseName = (SELECT TOP (1) DatabaseName FROM #SynonymTargets)
END
SET NOCOUNT OFF;
";

            private const String SynonymTableSQL = @"
UNION ALL
-- Synonyms
SELECT SchemaName, TableName, TableType, Ordinal, ColumnName, IsNullable, TypeName, [MaxLength], [Precision],
       [Default], DateTimePrecision, Scale, IsIdentity, IsStoreGenerated, PrimaryKey, PrimaryKeyOrdinal, IsForeignKey FROM #SynonymDetails";

            private const String ForeignKeySQL = @"
SELECT  FK.name AS FK_Table,
        FkCol.name AS FK_Column,
        PK.name AS PK_Table,
        PkCol.name AS PK_Column,
        OBJECT_NAME(f.object_id) AS Constraint_Name,
        SCHEMA_NAME(FK.schema_id) AS fkSchema,
        SCHEMA_NAME(PK.schema_id) AS pkSchema,
        PkCol.name AS primarykey,
        k.constraint_column_id AS ORDINAL_POSITION,
        CASE WHEN f.delete_referential_action = 1 THEN 1 ELSE 0 END as CascadeOnDelete
FROM    sys.objects AS PK
        INNER JOIN sys.foreign_keys AS f
            INNER JOIN sys.foreign_key_columns AS k
                ON k.constraint_object_id = f.object_id
            INNER JOIN sys.indexes AS i
                ON f.referenced_object_id = i.object_id
                   AND f.key_index_id = i.index_id
            ON PK.object_id = f.referenced_object_id
        INNER JOIN sys.objects AS FK
            ON f.parent_object_id = FK.object_id
        INNER JOIN sys.columns AS PkCol
            ON f.referenced_object_id = PkCol.object_id
               AND k.referenced_column_id = PkCol.column_id
        INNER JOIN sys.columns AS FkCol
            ON f.parent_object_id = FkCol.object_id
               AND k.parent_column_id = FkCol.column_id
ORDER BY FK_Table, FK_Column";

        private const String ExtendedPropertySQL = @"
SELECT  s.name AS [schema],
        t.name AS [table],
        c.name AS [column],
        value AS [property]
FROM    sys.extended_properties AS ep
        INNER JOIN sys.tables AS t
            ON ep.major_id = t.object_id
        INNER JOIN sys.schemas AS s
            ON s.schema_id = t.schema_id
        INNER JOIN sys.columns AS c
            ON ep.major_id = c.object_id
               AND ep.minor_id = c.column_id
WHERE   class = 1
ORDER BY t.name";

            private const String ExtendedPropertyTableExistsSQLCE = @"
SELECT  1
FROM    INFORMATION_SCHEMA.TABLES
WHERE   TABLE_NAME = '__ExtendedProperties'";

            private const String ExtendedPropertySQLCE = @"
SELECT  '' AS [schema],
        [ObjectName] AS [column],
        [ParentName] AS [table],
        [Value] AS [property]
FROM    [__ExtendedProperties]";

            private const String TableSQLCE = @"
SELECT  '' AS SchemaName,
        c.TABLE_NAME AS TableName,
        'BASE TABLE' AS TableType,
        c.ORDINAL_POSITION AS Ordinal,
        c.COLUMN_NAME AS ColumnName,
        CAST(CASE WHEN c.IS_NULLABLE = N'YES' THEN 1
                  ELSE 0
             END AS BIT) AS IsNullable,
        CASE WHEN c.DATA_TYPE = N'rowversion' THEN 'timestamp'
             ELSE c.DATA_TYPE
        END AS TypeName,
        CASE WHEN c.CHARACTER_MAXIMUM_LENGTH IS NOT NULL THEN c.CHARACTER_MAXIMUM_LENGTH
             ELSE 0
        END AS MaxLength,
        CASE WHEN c.NUMERIC_PRECISION IS NOT NULL THEN c.NUMERIC_PRECISION
             ELSE 0
        END AS Precision,
        c.COLUMN_DEFAULT AS [Default],
        CASE WHEN c.DATA_TYPE = N'datetime' THEN 0
             ELSE 0
        END AS DateTimePrecision,
        CASE WHEN c.DATA_TYPE = N'datetime' THEN 0
             WHEN c.NUMERIC_SCALE IS NOT NULL THEN c.NUMERIC_SCALE
             ELSE 0
        END AS Scale,
        CAST(CASE WHEN c.AUTOINC_INCREMENT > 0 THEN 1
                  ELSE 0
             END AS BIT) AS IsIdentity,
        CAST(CASE WHEN c.DATA_TYPE = N'rowversion' THEN 1
                  ELSE 0
             END AS BIT) AS IsStoreGenerated,
        CAST(CASE WHEN u.TABLE_NAME IS NULL THEN 0
                  ELSE 1
             END AS BIT) AS PrimaryKey,
        0 AS PrimaryKeyOrdinal,
        0 as IsForeignKey
FROM    INFORMATION_SCHEMA.COLUMNS c
        INNER JOIN INFORMATION_SCHEMA.TABLES t
            ON c.TABLE_NAME = t.TABLE_NAME
        LEFT JOIN INFORMATION_SCHEMA.TABLE_CONSTRAINTS AS cons
            ON cons.TABLE_NAME = c.TABLE_NAME
        LEFT JOIN INFORMATION_SCHEMA.KEY_COLUMN_USAGE AS u
            ON cons.CONSTRAINT_NAME = u.CONSTRAINT_NAME
               AND u.TABLE_NAME = c.TABLE_NAME
               AND u.COLUMN_NAME = c.COLUMN_NAME
WHERE   t.TABLE_TYPE <> N'SYSTEM TABLE'
        AND cons.CONSTRAINT_TYPE = 'PRIMARY KEY'
ORDER BY c.TABLE_NAME,
        c.COLUMN_NAME,
        c.ORDINAL_POSITION";

            private const String ForeignKeySQLCE = @"
SELECT DISTINCT
        FK.TABLE_NAME AS FK_Table,
        FK.COLUMN_NAME AS FK_Column,
        PK.TABLE_NAME AS PK_Table,
        PK.COLUMN_NAME AS PK_Column,
        FK.CONSTRAINT_NAME AS Constraint_Name,
        '' AS fkSchema,
        '' AS pkSchema,
        PT.COLUMN_NAME AS primarykey,
        FK.ORDINAL_POSITION,
        CASE WHEN C.DELETE_RULE = 'CASCADE' THEN 1 ELSE 0 END AS CascadeOnDelete
FROM    INFORMATION_SCHEMA.REFERENTIAL_CONSTRAINTS AS C
        INNER JOIN INFORMATION_SCHEMA.KEY_COLUMN_USAGE AS FK
            ON FK.CONSTRAINT_NAME = C.CONSTRAINT_NAME
        INNER JOIN INFORMATION_SCHEMA.KEY_COLUMN_USAGE AS PK
            ON PK.CONSTRAINT_NAME = C.UNIQUE_CONSTRAINT_NAME
               AND PK.ORDINAL_POSITION = FK.ORDINAL_POSITION
        INNER JOIN (
                    SELECT  i1.TABLE_NAME,
                            i2.COLUMN_NAME
                    FROM    INFORMATION_SCHEMA.TABLE_CONSTRAINTS i1
                            INNER JOIN INFORMATION_SCHEMA.KEY_COLUMN_USAGE i2
                                ON i1.CONSTRAINT_NAME = i2.CONSTRAINT_NAME
                    WHERE   i1.CONSTRAINT_TYPE = 'PRIMARY KEY'
                   ) PT
            ON PT.TABLE_NAME = PK.TABLE_NAME
WHERE   PT.COLUMN_NAME = PK.COLUMN_NAME
ORDER BY FK.TABLE_NAME, FK.COLUMN_NAME";

            private const String StoredProcedureSQL = @"
SELECT  R.SPECIFIC_SCHEMA,
        R.SPECIFIC_NAME,
        R.ROUTINE_TYPE,
        P.ORDINAL_POSITION,
        P.PARAMETER_MODE,
        P.PARAMETER_NAME,
        P.DATA_TYPE,
        ISNULL(P.CHARACTER_MAXIMUM_LENGTH, 0) AS CHARACTER_MAXIMUM_LENGTH,
        ISNULL(P.NUMERIC_PRECISION, 0) AS NUMERIC_PRECISION,
        ISNULL(P.NUMERIC_SCALE, 0) AS NUMERIC_SCALE,
        ISNULL(P.DATETIME_PRECISION, 0) AS DATETIME_PRECISION,
        P.USER_DEFINED_TYPE_SCHEMA + '.' + P.USER_DEFINED_TYPE_NAME AS USER_DEFINED_TYPE
FROM    INFORMATION_SCHEMA.ROUTINES R
        LEFT OUTER JOIN INFORMATION_SCHEMA.PARAMETERS P
            ON P.SPECIFIC_SCHEMA = R.SPECIFIC_SCHEMA
               AND P.SPECIFIC_NAME = R.SPECIFIC_NAME
WHERE   R.ROUTINE_TYPE = 'PROCEDURE'
        AND (
             P.IS_RESULT = 'NO'
             OR P.IS_RESULT IS NULL
            )
        AND R.SPECIFIC_SCHEMA + R.SPECIFIC_NAME IN (
            SELECT  SCHEMA_NAME(sp.schema_id) + sp.name
            FROM    sys.all_objects AS sp
                    LEFT OUTER JOIN sys.all_sql_modules AS sm
                        ON sm.object_id = sp.object_id
            WHERE   sp.type = 'P'
                    AND (CAST(CASE WHEN sp.is_ms_shipped = 1 THEN 1
                                   WHEN (
                                         SELECT major_id
                                         FROM   sys.extended_properties
                                         WHERE  major_id = sp.object_id
                                                AND minor_id = 0
                                                AND class = 1
                                                AND name = N'microsoft_database_tools_support'
                                        ) IS NOT NULL THEN 1
                                   ELSE 0
                              END AS BIT) = 0))

UNION ALL
SELECT  R.SPECIFIC_SCHEMA,
        R.SPECIFIC_NAME,
        R.ROUTINE_TYPE,
        P.ORDINAL_POSITION,
        P.PARAMETER_MODE,
        P.PARAMETER_NAME,
        P.DATA_TYPE,
        ISNULL(P.CHARACTER_MAXIMUM_LENGTH, 0) AS CHARACTER_MAXIMUM_LENGTH,
        ISNULL(P.NUMERIC_PRECISION, 0) AS NUMERIC_PRECISION,
        ISNULL(P.NUMERIC_SCALE, 0) AS NUMERIC_SCALE,
        ISNULL(P.DATETIME_PRECISION, 0) AS DATETIME_PRECISION,
        P.USER_DEFINED_TYPE_SCHEMA + '.' + P.USER_DEFINED_TYPE_NAME AS USER_DEFINED_TYPE
FROM    INFORMATION_SCHEMA.ROUTINES R
        LEFT OUTER JOIN INFORMATION_SCHEMA.PARAMETERS P
            ON P.SPECIFIC_SCHEMA = R.SPECIFIC_SCHEMA
               AND P.SPECIFIC_NAME = R.SPECIFIC_NAME
WHERE   R.ROUTINE_TYPE = 'FUNCTION'
        AND R.DATA_TYPE = 'TABLE'
ORDER BY R.SPECIFIC_SCHEMA,
        R.SPECIFIC_NAME,
        P.ORDINAL_POSITION";

            private const String StoredProcedureSQLAzure = @"
SELECT  R.SPECIFIC_SCHEMA,
        R.SPECIFIC_NAME,
        R.ROUTINE_TYPE,
        P.ORDINAL_POSITION,
        P.PARAMETER_MODE,
        P.PARAMETER_NAME,
        P.DATA_TYPE,
        ISNULL(P.CHARACTER_MAXIMUM_LENGTH, 0) AS CHARACTER_MAXIMUM_LENGTH,
        ISNULL(P.NUMERIC_PRECISION, 0) AS NUMERIC_PRECISION,
        ISNULL(P.NUMERIC_SCALE, 0) AS NUMERIC_SCALE,
        ISNULL(P.DATETIME_PRECISION, 0) AS DATETIME_PRECISION,
        P.USER_DEFINED_TYPE_SCHEMA + '.' + P.USER_DEFINED_TYPE_NAME AS USER_DEFINED_TYPE
FROM    INFORMATION_SCHEMA.ROUTINES R
        LEFT OUTER JOIN INFORMATION_SCHEMA.PARAMETERS P
            ON P.SPECIFIC_SCHEMA = R.SPECIFIC_SCHEMA
               AND P.SPECIFIC_NAME = R.SPECIFIC_NAME
WHERE   R.ROUTINE_TYPE = 'PROCEDURE'
        AND (
             P.IS_RESULT = 'NO'
             OR P.IS_RESULT IS NULL
            )
        AND R.SPECIFIC_SCHEMA + R.SPECIFIC_NAME IN (
            SELECT  SCHEMA_NAME(sp.schema_id) + sp.name
            FROM    sys.all_objects AS sp
                    LEFT OUTER JOIN sys.all_sql_modules AS sm
                        ON sm.object_id = sp.object_id
            WHERE   sp.type = 'P'
                    AND sp.is_ms_shipped = 0)
UNION ALL
SELECT  R.SPECIFIC_SCHEMA,
        R.SPECIFIC_NAME,
        R.ROUTINE_TYPE,
        P.ORDINAL_POSITION,
        P.PARAMETER_MODE,
        P.PARAMETER_NAME,
        P.DATA_TYPE,
        ISNULL(P.CHARACTER_MAXIMUM_LENGTH, 0) AS CHARACTER_MAXIMUM_LENGTH,
        ISNULL(P.NUMERIC_PRECISION, 0) AS NUMERIC_PRECISION,
        ISNULL(P.NUMERIC_SCALE, 0) AS NUMERIC_SCALE,
        ISNULL(P.DATETIME_PRECISION, 0) AS DATETIME_PRECISION,
        P.USER_DEFINED_TYPE_SCHEMA + '.' + P.USER_DEFINED_TYPE_NAME AS USER_DEFINED_TYPE
FROM    INFORMATION_SCHEMA.ROUTINES R
        LEFT OUTER JOIN INFORMATION_SCHEMA.PARAMETERS P
            ON P.SPECIFIC_SCHEMA = R.SPECIFIC_SCHEMA
               AND P.SPECIFIC_NAME = R.SPECIFIC_NAME
WHERE   R.ROUTINE_TYPE = 'FUNCTION'
        AND R.DATA_TYPE = 'TABLE'
ORDER BY R.SPECIFIC_SCHEMA,
        R.SPECIFIC_NAME,
        P.ORDINAL_POSITION";

            private const String IndexSQL = @"
SELECT  SCHEMA_NAME(t.schema_id) AS TableSchema,
        t.name AS TableName,
        ind.name AS IndexName,
        ic.key_ordinal AS KeyOrdinal,
        col.name AS ColumnName,
        ind.is_unique AS IsUnique,
        ind.is_primary_key AS IsPrimaryKey,
        ind.is_unique_constraint AS IsUniqueConstraint,
        CASE WHEN ind.[type] = 1 AND ind.is_primary_key = 1 THEN 1 ELSE 0 END AS IsClustered,
        (
         SELECT COUNT(1)
         FROM   sys.index_columns i
         WHERE  i.object_id = ind.object_id
                AND i.index_id = ind.index_id
        ) AS ColumnCount
FROM    sys.tables t
        INNER JOIN sys.indexes ind
            ON ind.object_id = t.object_id
        INNER JOIN sys.index_columns ic
            ON ind.object_id = ic.object_id
               AND ind.index_id = ic.index_id
        INNER JOIN sys.columns col
            ON ic.object_id = col.object_id
               AND ic.column_id = col.column_id
WHERE   t.is_ms_shipped = 0
        AND ind.ignore_dup_key = 0
        AND ic.key_ordinal > 0
        AND t.name NOT LIKE 'sysdiagram%'";

            private Boolean IncludeQueryTraceOn9481Flag;

            public SqlServerSchemaReader(DbConnection connection, DbProviderFactory factory, Boolean includeQueryTraceOn9481Flag)
                : base(connection, factory)
            {
                IncludeQueryTraceOn9481Flag = includeQueryTraceOn9481Flag;
            }

            private String IncludeQueryTraceOn9481()
            {
                if (IncludeQueryTraceOn9481Flag)
                    return @"
OPTION (QUERYTRACEON 9481)";
                return String.Empty;
            }

            private Boolean IsAzure()
            {
                if (String.IsNullOrEmpty(SqlDatabaseEdition))
                {
                    if (Cmd == null)
                        return false;

                    Cmd.CommandText = @"
SELECT  SERVERPROPERTY('Edition') AS Edition,
        CASE SERVERPROPERTY('EngineEdition')
            WHEN 1 THEN 'Personal'
            WHEN 2 THEN 'Standard'
            WHEN 3 THEN 'Enterprise'
            WHEN 4 THEN 'Express'
            WHEN 5 THEN 'Azure'
            ELSE 'Unknown'
        END AS EngineEdition";

                    Cmd.CommandTimeout = 600;

                    using (DbDataReader rdr = Cmd.ExecuteReader())
                    {
                        if (rdr.Read())
                        {
                            SqlDatabaseEdition = rdr["Edition"].ToString();
                            SqlDatabaseEngineEdition = rdr["EngineEdition"].ToString();
                            WriteLine("// Database Edition       : " + SqlDatabaseEdition);
                            WriteLine("// Database Engine Edition: " + SqlDatabaseEngineEdition);
                            WriteLine("");
                        }
                    }
                }

                return SqlDatabaseEngineEdition == "Azure";
            }

            public override Tables ReadSchema(Regex schemaFilterExclude, Regex schemaFilterInclude, Regex tableFilterExclude, Regex tableFilterInclude, Regex columnFilterExclude, Func<Table, Boolean> tableFilter, Boolean usePascalCase, Boolean prependSchemaName, CommentsStyle includeComments, Boolean includeViews, CommentsStyle includeExtendedPropertyComments, Func<String, String, Boolean, String> tableRename, Func<Column, Table, Column> updateColumn, Boolean usePrivateSetterForComputedColumns, Boolean includeSynonyms, Boolean dataAnnotations, Boolean dataAnnotationsSchema, Boolean isSqlCe)
            {
                var result = new Tables();
                if(Cmd == null)
                    return result;

                if(includeSynonyms)
                    Cmd.CommandText = SynonymTableSQLSetup + TableSQL + SynonymTableSQL + IncludeQueryTraceOn9481();
                else
                    Cmd.CommandText = TableSQL + IncludeQueryTraceOn9481();

                if (isSqlCe)
                    Cmd.CommandText = TableSQLCE;
                else
                    Cmd.CommandTimeout = 600;

                using(DbDataReader rdr = Cmd.ExecuteReader())
                {
                    var rxClean = new Regex("^(event|Equals|GetHashCode|GetType|ToString|repo|Save|IsNew|Insert|Update|Delete|Exists|SingleOrDefault|Single|First|FirstOrDefault|Fetch|Page|Query)$");
                    var lastTable = String.Empty;
                    Table table = null;
                    while(rdr.Read())
                    {
                        String schema = rdr["SchemaName"].ToString().Trim();
                        if(IsFilterExcluded(schemaFilterExclude, schemaFilterInclude, schema))
                            continue;

                        String tableName = rdr["TableName"].ToString().Trim();
                        if(IsFilterExcluded(tableFilterExclude, tableFilterInclude, tableName))
                            continue;

                        if(lastTable != tableName || table == null)
                        {
                            // The data from the database is not sorted
                            table = result.Find(x => x.Name == tableName && x.Schema == schema);
                            if(table == null)
                            {
                                table = new Table
                                {
                                    Name = tableName,
                                    Schema = schema,
                                    IsView = String.Compare(rdr["TableType"].ToString().Trim(), "View", StringComparison.OrdinalIgnoreCase) == 0,

                                    // Will be set later
                                    HasForeignKey = false,
                                    HasNullableColumns = false
                                };

                                if (!includeViews && table.IsView)
                                    continue;

                                tableName = tableRename(tableName, schema, table.IsView);
                                if (IsFilterExcluded(tableFilterExclude, null, tableName)) // Retest exclusion filter after table rename
                                    continue;

                                // Handle table names with underscores - singularise just the last word
                                table.ClassName = Inflector.MakeSingular(CleanUp(tableName));
                                var titleCase = (usePascalCase ? Inflector.ToTitleCase(table.ClassName) : table.ClassName).Replace(" ", "").Replace("$", "").Replace(".", "");
                                table.NameHumanCase = titleCase;

                                if((String.Compare(table.Schema, "dbo", StringComparison.OrdinalIgnoreCase) != 0) && prependSchemaName)
                                    table.NameHumanCase = table.Schema + "_" + table.NameHumanCase;

                                // Check for table or C# name clashes
                                if (ReservedKeywords.Contains(table.NameHumanCase) ||
                                    (usePascalCase && result.Find(x => x.NameHumanCase == table.NameHumanCase) != null))
                                {
                                    table.NameHumanCase += "1";
                                }

                                if (!tableFilter(table))
                                    continue;

                                result.Add(table);
                            }
                        }

                        var col = CreateColumn(rdr, rxClean, table, usePascalCase, columnFilterExclude, updateColumn);
                        if(col != null)
                            table.Columns.Add(col);
                    }
                }
                // Check for property name clashes in columns
                foreach(Column c in result.SelectMany(tbl => tbl.Columns.Where(c => tbl.Columns.FindAll(x => x.NameHumanCase == c.NameHumanCase).Count > 1)))
                {
                    Int32 n = 1;
                    var original = c.NameHumanCase;
                    c.NameHumanCase = original + n++;

                    // Check if the above resolved the name clash, if not, use next value
                    while(c.ParentTable.Columns.Count(c2 => c2.NameHumanCase == c.NameHumanCase) > 1)
                        c.NameHumanCase = original + n++;
                }

                if (includeExtendedPropertyComments != CommentsStyle.None)
                    ReadExtendedProperties(result);

                ReadIndexes(result);

                foreach(Table tbl in result)
                {
                    tbl.SetPrimaryKeys();
                    tbl.Columns.ForEach(x => x.SetupEntityAndConfig(includeComments, includeExtendedPropertyComments, usePrivateSetterForComputedColumns, dataAnnotations, dataAnnotationsSchema, isSqlCe));
                }

                return result;
            }

            public override List<ForeignKey> ReadForeignKeys(Func<String, String, Boolean, String> tableRename, Func<ForeignKey, ForeignKey> foreignKeyFilter)
            {
                var fkList = new List<ForeignKey>();
                if(Cmd == null)
                    return fkList;

                Cmd.CommandText = ForeignKeySQL + IncludeQueryTraceOn9481();
                if (Cmd.GetType().Name == "SqlCeCommand")
                    Cmd.CommandText = ForeignKeySQLCE;
                else
                    Cmd.CommandTimeout = 600;

                using(DbDataReader rdr = Cmd.ExecuteReader())
                {
                    while(rdr.Read())
                    {
                        String fkTableName = rdr["FK_Table"].ToString();
                        String fkSchema = rdr["fkSchema"].ToString();
                        String pkTableName = rdr["PK_Table"].ToString();
                        String pkSchema = rdr["pkSchema"].ToString();
                        String fkColumn = rdr["FK_Column"].ToString();
                        String pkColumn = rdr["PK_Column"].ToString();
                        String constraintName = rdr["Constraint_Name"].ToString();
                        Int32 ordinal = (Int32) rdr["ORDINAL_POSITION"];
                        Boolean cascadeOnDelete = ((Int32) rdr["CascadeOnDelete"]) == 1;

                        String fkTableNameFiltered = tableRename(fkTableName, fkSchema, false);
                        String pkTableNameFiltered = tableRename(pkTableName, pkSchema, false);

                        var fk = new ForeignKey(fkTableName, fkSchema, pkTableName, pkSchema, fkColumn, pkColumn,
                            constraintName, fkTableNameFiltered, pkTableNameFiltered, ordinal, cascadeOnDelete);

                        var filteredFk = foreignKeyFilter(fk);
                        if(filteredFk != null)
                            fkList.Add(filteredFk);
                    }
                }

                return fkList;
            }

            // When a table has no primary keys, all the NOT NULL columns are set as being the primary key.
            // This function reads the unique indexes for a table, and correctly sets the columns being used as primary keys.
            public override void ReadIndexes(Tables tables)
            {
                if (Cmd == null)
                    return;

                if (Cmd.GetType().Name == "SqlCeCommand")
                    return;

                Cmd.CommandText = IndexSQL + IncludeQueryTraceOn9481();
                Cmd.CommandTimeout = 600;

                var list = new List<Index>();
                using (DbDataReader rdr = Cmd.ExecuteReader())
                {
                    while (rdr.Read())
                    {
                        var index = new Index();

                        index.Schema             = rdr["TableSchema"].ToString().Trim();
                        index.TableName          = rdr["TableName"].ToString().Trim();
                        index.IndexName          = rdr["IndexName"].ToString().Trim();
                        index.KeyOrdinal         = (Byte) rdr["KeyOrdinal"];
                        index.ColumnName         = rdr["ColumnName"].ToString().Trim();
                        index.ColumnCount        = (Int32) rdr["ColumnCount"];
                        index.IsUnique           = (Boolean) rdr["IsUnique"];
                        index.IsPrimaryKey       = (Boolean) rdr["IsPrimaryKey"];
                        index.IsUniqueConstraint = (Boolean) rdr["IsUniqueConstraint"];
                        index.IsClustered        = ((Int32) rdr["IsClustered"]) == 1;

                        list.Add(index);
                    }
                }

                Table t = null;
                var indexTables = list
                    .Select(x => new { x.Schema, x.TableName })
                    .Distinct();

                foreach (var indexTable in indexTables)
                {
                    // Lookup table
                    if (t == null || t.Name != indexTable.TableName || t.Schema != indexTable.Schema)
                        t = tables.Find(x => x.Name == indexTable.TableName && x.Schema == indexTable.Schema);

                    if (t == null)
                        continue;

                    // Find indexes for table
                    var indexes =
                        list.Where(x => x.Schema == indexTable.Schema && x.TableName == indexTable.TableName)
                            .OrderBy(o => o.ColumnCount)
                            .ThenBy(o => o.KeyOrdinal);

                    // Set index on column
                    foreach (var index in indexes)
                    {
                        var col = t.Columns.Find(x => x.Name == index.ColumnName);
                        if (col != null)
                        {
                            col.Indexes.Add(index);
                            if (!col.IsPrimaryKey && index.IsPrimaryKey)
                                col.IsPrimaryKey = true;
                        }
                    }

                    // Check if table has any primary keys
                    if (t.PrimaryKeys.Any())
                        continue; // Already has a primary key, ignore this unique index / constraint

                    // Find unique indexes for table
                    var uniqueIndexKeys =
                        indexes.Where(x => x.IsUnique || x.IsPrimaryKey || x.IsUniqueConstraint)
                            .OrderBy(o => o.ColumnCount)
                            .ThenBy(o => o.KeyOrdinal);

                    // Process only the first index with the lowest unique column count
                    String indexName = null;
                    foreach (var key in uniqueIndexKeys)
                    {
                        if (indexName == null)
                            indexName = key.IndexName;

                        if (indexName != key.IndexName)
                            break; // First unique index with lowest column count has been processed, exit.

                        var col = t.Columns.Find(x => x.Name == key.ColumnName);
                        if (col != null && !col.IsNullable && !col.Hidden && !col.IsPrimaryKey)
                        {
                            col.IsPrimaryKey = true;
                            col.IsPrimaryKeyViaUniqueIndex = true;
                            col.UniqueIndexName = indexName;
                        }
                    }
                }
            }

            public override void ReadExtendedProperties(Tables tables)
            {
                if(Cmd == null)
                    return;

                if (Cmd.GetType().Name == "SqlCeCommand")
                {
                    Cmd.CommandText = ExtendedPropertyTableExistsSQLCE;
                    var obj = Cmd.ExecuteScalar();
                    if (obj == null)
                        return;

                    Cmd.CommandText = ExtendedPropertySQLCE;
                }
                else
                {
                    if (IsAzure())
                        return;

                    Cmd.CommandText = ExtendedPropertySQL + IncludeQueryTraceOn9481();
                    Cmd.CommandTimeout = 600;
                }

                using(DbDataReader rdr = Cmd.ExecuteReader())
                {
                    Table t = null;
                    while(rdr.Read())
                    {
                        String schema           = rdr["schema"].ToString().Trim();
                        String tableName        = rdr["table"].ToString().Trim();
                        String column           = rdr["column"].ToString().Trim();
                        String extendedProperty = rdr["property"].ToString().Trim();

                        if (extendedProperty == String.Empty)
                            continue;

                        if(t == null || t.Name != tableName || t.Schema != schema)
                            t = tables.Find(x => x.Name == tableName && x.Schema == schema);

                        if (t != null)
                        {
                            var col = t.Columns.Find(x => x.Name == column);
                            if (col != null)
                            {
                                extendedProperty = extendedProperty.Replace("\n", " ").Replace("\r", " ");
                                col.ExtendedProperty = extendedProperty;
                            }
                        }
                    }
                }
            }

            public override List<StoredProcedure> ReadStoredProcs(Regex schemaFilterExclude, Regex storedProcedureFilterExclude, Boolean usePascalCase, Boolean prependSchemaName , Func<StoredProcedure, String> StoredProcedureRename, Boolean includeTableValuedFunctions)
            {
                var result = new List<StoredProcedure>();
                if(Cmd == null)
                    return result;

                if (Cmd.GetType().Name == "SqlCeCommand")
                    return result;

                if (IsAzure())
                    Cmd.CommandText = StoredProcedureSQLAzure + IncludeQueryTraceOn9481();
                else
                    Cmd.CommandText = StoredProcedureSQL + IncludeQueryTraceOn9481();

                Cmd.CommandTimeout = 600;

                using(DbDataReader rdr = Cmd.ExecuteReader())
                {
                    var lastSp = String.Empty;
                    StoredProcedure sp = null;
                    while (rdr.Read())
                    {
                        String spType = rdr["ROUTINE_TYPE"].ToString().Trim().ToUpper();
                        Boolean isTVF = (spType == "FUNCTION");
                        if (isTVF && !includeTableValuedFunctions)
                            continue;

                        String schema = rdr["SPECIFIC_SCHEMA"].ToString().Trim();
                        if(schemaFilterExclude != null && schemaFilterExclude.IsMatch(schema))
                            continue;

                        String spName = rdr["SPECIFIC_NAME"].ToString().Trim();
                        var fullname = schema + "." + spName;
                        if(storedProcedureFilterExclude != null && (storedProcedureFilterExclude.IsMatch(spName) || storedProcedureFilterExclude.IsMatch(fullname)))
                            continue;

                        if (lastSp != fullname || sp == null)
                        {
                            lastSp = fullname;
                            sp = new StoredProcedure
                            {
                                IsTVF = isTVF,
                                Name = spName,
                                NameHumanCase = (usePascalCase ? Inflector.ToTitleCase(spName) : spName).Replace(" ", "").Replace("$", ""),
                                Schema = schema
                            };
                            if((String.Compare(schema, "dbo", StringComparison.OrdinalIgnoreCase) != 0) && prependSchemaName)
                                sp.NameHumanCase = schema + "_" + sp.NameHumanCase;

                            sp.NameHumanCase = StoredProcedureRename(sp);
                            if(storedProcedureFilterExclude != null && (storedProcedureFilterExclude.IsMatch(sp.NameHumanCase) || storedProcedureFilterExclude.IsMatch(schema + "." + sp.NameHumanCase)))
                                continue;

                            result.Add(sp);
                        }

                        if (rdr["DATA_TYPE"] != null && rdr["DATA_TYPE"] != DBNull.Value)
                        {
                            String typename = rdr["DATA_TYPE"].ToString().Trim().ToLower();
                            var scale = (Int32) rdr["NUMERIC_SCALE"];
                            var precision = (Int32) ((Byte) rdr["NUMERIC_PRECISION"]);
                            var parameterMode = rdr["PARAMETER_MODE"].ToString().Trim().ToUpper();

                            var param = new StoredProcedureParameter
                            {
                                Ordinal = (Int32) rdr["ORDINAL_POSITION"],
                                Mode = (parameterMode == "IN") ? StoredProcedureParameterMode.In : StoredProcedureParameterMode.InOut,
                                Name = rdr["PARAMETER_NAME"].ToString().Trim(),
                                SqlDbType = GetSqlDbType(typename, scale, precision),
                                PropertyType = GetPropertyType(typename, scale, precision),
                                DateTimePrecision = (Int16) rdr["DATETIME_PRECISION"],
                                MaxLength = (Int32) rdr["CHARACTER_MAXIMUM_LENGTH"],
                                Precision = precision,
                                Scale = scale,
                                UserDefinedTypeName = rdr["USER_DEFINED_TYPE"].ToString().Trim()
                            };

                            var clean = CleanUp(param.Name.Replace("@", ""));
                            if (!String.IsNullOrEmpty(clean))
                            {
                                param.NameHumanCase = Inflector.MakeInitialLower((usePascalCase ? Inflector.ToTitleCase(clean) : clean).Replace(" ", ""));

                                if (ReservedKeywords.Contains(param.NameHumanCase))
                                    param.NameHumanCase = "@" + param.NameHumanCase;

                                sp.Parameters.Add(param);
                            }
                        }
                    }
                }
                return result;
            }

            public void ReadStoredProcReturnObject(SqlConnection sqlConnection, StoredProcedure proc)
            {
                try
                {
                    const String structured = "Structured";
                    var sb = new StringBuilder();
                    sb.AppendLine();
                    sb.AppendLine("SET FMTONLY OFF; SET FMTONLY ON;");
                    if (proc.IsTVF)
                    {
                        foreach (var param in proc.Parameters.Where(x => x.SqlDbType.Equals(structured, StringComparison.InvariantCultureIgnoreCase)))
                            sb.AppendLine(String.Format("DECLARE {0} {1};", param.Name, param.UserDefinedTypeName));

                        sb.Append(String.Format("SELECT * FROM [{0}].[{1}](", proc.Schema, proc.Name));
                        foreach (var param in proc.Parameters)
                            sb.Append(String.Format("{0}, ", param.SqlDbType.Equals(structured, StringComparison.InvariantCultureIgnoreCase) ? param.Name : "null"));

                        if(proc.Parameters.Count > 0)
                            sb.Length -= 2;

                        sb.AppendLine(");");
                    }
                    else
                    {
                        foreach (var param in proc.Parameters)
                            sb.AppendLine(String.Format("DECLARE {0} {1};", param.Name, param.SqlDbType.Equals(structured, StringComparison.InvariantCultureIgnoreCase) ? param.UserDefinedTypeName : param.SqlDbType));

                        sb.Append(String.Format("exec [{0}].[{1}] ", proc.Schema, proc.Name));
                        foreach (var param in proc.Parameters)
                            sb.Append(String.Format("{0}, ", param.Name));

                        if(proc.Parameters.Count > 0)
                            sb.Length -= 2;

                        sb.AppendLine(";");
                    }
                    sb.AppendLine("SET FMTONLY OFF; SET FMTONLY OFF;");

                    var ds = new DataSet();
                    using (var sqlAdapter = new SqlDataAdapter(sb.ToString(), sqlConnection))
                    {
                        if (sqlConnection.State != ConnectionState.Open)
                            sqlConnection.Open();
                        sqlAdapter.SelectCommand.ExecuteReader(CommandBehavior.SchemaOnly | CommandBehavior.KeyInfo);
                        sqlConnection.Close();
                        sqlAdapter.FillSchema(ds, SchemaType.Source, "MyTable");
                    }

                    // Tidy up parameters
                    foreach (var p in proc.Parameters)
                        p.NameHumanCase = Regex.Replace(p.NameHumanCase, @"[^A-Za-z0-9@\s]*", "");

                    for(var count = 0; count < ds.Tables.Count; count++)
                    {
                        proc.ReturnModels.Add(ds.Tables[count].Columns.Cast<DataColumn>().ToList());
                    }
                }
                catch (Exception)
                {
                    // Stored procedure does not have a return type
                }
            }

            public override void ProcessForeignKeys(List<ForeignKey> fkList, Tables tables, Boolean usePascalCase, Boolean prependSchemaName, String collectionType, Boolean checkForFkNameClashes, CommentsStyle includeComments, Func<String, ForeignKey, String, Relationship, Int16, String> ForeignKeyName, Boolean dataAnnotationsSchema, Func<IList<ForeignKey>, Table, Table, Boolean, ForeignKey> foreignKeyProcessing)
            {
                var constraints = fkList.Select(x => x.FkSchema + "." + x.ConstraintName).Distinct();
                foreach (var constraint in constraints)
                {
                    var foreignKeys = fkList
                        .Where(x => String.Format("{0}.{1}", x.FkSchema, x.ConstraintName).Equals(constraint, StringComparison.InvariantCultureIgnoreCase))
                        .ToList();

                    var foreignKey = foreignKeys.First();
                    Table fkTable = tables.GetTable(foreignKey.FkTableName, foreignKey.FkSchema);
                    if (fkTable == null || fkTable.IsMapping || !fkTable.HasForeignKey)
                        continue;

                    Table pkTable = tables.GetTable(foreignKey.PkTableName, foreignKey.PkSchema);
                    if (pkTable == null || pkTable.IsMapping)
                        continue;

                    var fkCols = foreignKeys.Select(x => new
                        {
                            fkOrdinal = x.Ordinal,
                            col = fkTable.Columns.Find(n => String.Equals(n.Name, x.FkColumn, StringComparison.InvariantCultureIgnoreCase))
                        })
                        .Where(x => x != null && x.col != null)
                        .OrderBy(o => o.fkOrdinal)
                        .ToList();

                    if (!fkCols.Any())
                        continue;

                    var pkCols = foreignKeys.Select(x => pkTable.Columns.Find(n => String.Equals(n.Name, x.PkColumn, StringComparison.InvariantCultureIgnoreCase)))
                                            .Where(x => x != null && x.IsPrimaryKey)
                                            .OrderBy(o => o.Ordinal)
                                            .ToList();

                    if (!pkCols.Any())
                        continue;

                    var fkCol = fkCols.First();
                    var pkCol = pkCols.First();

                    var relationship = CalcRelationship(pkTable, fkTable, fkCols.Select(c => c.col).ToList(), pkCols);
                    if (relationship == Relationship.DoNotUse)
                        continue;

                    foreignKey = foreignKeyProcessing(foreignKeys, fkTable, pkTable, fkCols.Any(x => x.col.IsNullable));

                    String pkTableHumanCaseWithSuffix = foreignKey.PkTableHumanCase(usePascalCase, prependSchemaName, pkTable.Suffix);
                    String pkTableHumanCase = foreignKey.PkTableHumanCase(usePascalCase, prependSchemaName, null);
                    String pkPropName = fkTable.GetUniqueColumnName(pkTableHumanCase, foreignKey, usePascalCase, checkForFkNameClashes, true, ForeignKeyName, Relationship.ManyToOne);
                    Boolean fkMakePropNameSingular = (relationship == Relationship.OneToOne);
                    String fkPropName = pkTable.GetUniqueColumnName(fkTable.NameHumanCase, foreignKey, usePascalCase, checkForFkNameClashes, fkMakePropNameSingular, ForeignKeyName, Relationship.OneToMany);

                    var dataAnnotation = String.Empty;
                    if (dataAnnotationsSchema)
                    {
                        dataAnnotation = String.Format("[ForeignKey(\"{0}\"){1}] ",
                            String.Join(", ", fkCols.Select(x => x.col.NameHumanCase).Distinct().ToArray()),
                            foreignKey.IncludeRequiredAttribute ? ", Required" : String.Empty
                        );
                    }

                    var fkd = new PropertyAndComments();
                    fkd.Definition = String.Format("{0}public {1}{2} {3} {4}{5}", dataAnnotation, Table.GetLazyLoadingMarker(), pkTableHumanCaseWithSuffix, pkPropName, "{ get; set; }", includeComments != CommentsStyle.None ? " // " + foreignKey.ConstraintName : String.Empty);
                    fkd.Comments = String.Format("Parent {0} pointed by [{1}].({2}) ({3})", pkTableHumanCase, fkTable.Name, String.Join(", ", fkCols.Select(x => "[" + x.col.NameHumanCase + "]").Distinct().ToArray()), foreignKey.ConstraintName);
                    fkCol.col.EntityFk.Add(fkd);

                    String manyToManyMapping, mapKey;
                    if(foreignKeys.Count > 1)
                    {
                        manyToManyMapping = String.Format("c => new {{ {0} }}", String.Join(", ", fkCols.Select(x => "c." + x.col.NameHumanCase).Distinct().ToArray()));
                        mapKey = String.Format("{0}", String.Join(",", fkCols.Select(x => "\"" + x.col.Name + "\"").Distinct().ToArray()));
                    } else {
                        manyToManyMapping = String.Format("c => c.{0}", fkCol.col.NameHumanCase);
                        mapKey = String.Format("\"{0}\"", fkCol.col.Name);
                    }

                    if (!dataAnnotationsSchema)
                    {
                        fkCol.col.ConfigFk.Add(String.Format("{0};{1}", GetRelationship(relationship, fkCol.col, pkCol, pkPropName, fkPropName, manyToManyMapping, mapKey, foreignKey.CascadeOnDelete, foreignKey.IncludeReverseNavigation),
                                                                        includeComments != CommentsStyle.None ? " // " + foreignKey.ConstraintName : String.Empty));
                    }

                    if(foreignKey.IncludeReverseNavigation)
                        pkTable.AddReverseNavigation(relationship, pkTableHumanCase, fkTable, fkPropName, String.Format("{0}.{1}", fkTable.Name, foreignKey.ConstraintName), collectionType, includeComments, foreignKeys);
                }
            }

            public override void IdentifyForeignKeys(List<ForeignKey> fkList, Tables tables)
            {
                foreach(var foreignKey in fkList)
                {
                    Table fkTable = tables.GetTable(foreignKey.FkTableName, foreignKey.FkSchema);
                    if(fkTable == null)
                        continue;   // Could be filtered out

                    Table pkTable = tables.GetTable(foreignKey.PkTableName, foreignKey.PkSchema);
                    if(pkTable == null)
                        continue;   // Could be filtered out

                    Column fkCol = fkTable.Columns.Find(n => String.Equals(n.Name, foreignKey.FkColumn, StringComparison.InvariantCultureIgnoreCase));
                    if(fkCol == null)
                        continue;   // Could not find fk column

                    Column pkCol = pkTable.Columns.Find(n => String.Equals(n.Name, foreignKey.PkColumn, StringComparison.InvariantCultureIgnoreCase));
                    if(pkCol == null)
                        continue;   // Could not find pk column

                    fkTable.HasForeignKey = true;
                }
            }

            public static String GetRelationship(Relationship relationship, Column fkCol, Column pkCol, String pkPropName, String fkPropName, String manyToManyMapping, String mapKey, Boolean cascadeOnDelete, Boolean includeReverseNavigation)
            {
                return String.Format("Has{0}(a => a.{1}){2}{3}",
                    GetHasMethod(relationship, fkCol, pkCol),
                    pkPropName,
                    GetWithMethod(relationship, fkCol, fkPropName, manyToManyMapping, mapKey, includeReverseNavigation),
                    cascadeOnDelete ? String.Empty: ".WillCascadeOnDelete(false)");
            }

            // HasOptional
            // HasRequired
            // HasMany
            private static String GetHasMethod(Relationship relationship, Column fkCol, Column pkCol)
            {
                Boolean withMany = false;
                switch (relationship)
                {
                    case Relationship.ManyToOne:
                    case Relationship.ManyToMany:
                        withMany = true;
                        break;
                }

                if (withMany || pkCol.IsPrimaryKey)
                    return fkCol.IsNullable ? "Optional" : "Required";

                return "Many";
            }

            // WithOptional
            // WithRequired
            // WithMany
            // WithRequiredPrincipal
            // WithRequiredDependent
            private static String GetWithMethod(Relationship relationship, Column fkCol, String fkPropName, String manyToManyMapping, String mapKey, Boolean includeReverseNavigation)
            {
                String withParam = includeReverseNavigation ? String.Format("b => b.{0}", fkPropName) : String.Empty;
                switch (relationship)
                {
                    case Relationship.OneToOne:
                        return String.Format(".WithOptional({0})", withParam);

                    case Relationship.OneToMany:
                        return String.Format(".WithRequiredDependent({0})", withParam);

                    case Relationship.ManyToOne:
                        if (!fkCol.Hidden)
                            return String.Format(".WithMany({0}).HasForeignKey({1})", withParam, manyToManyMapping);   // Foreign Key Association
                        return String.Format(".WithMany({0}).Map(c => c.MapKey({1}))", withParam, mapKey);  // Independent Association

                    case Relationship.ManyToMany:
                        return String.Format(".WithMany({0}).HasForeignKey({1})", withParam, manyToManyMapping);

                    default:
                        throw new ArgumentOutOfRangeException("relationship");
                }
            }

            private static Column CreateColumn(IDataRecord rdr, Regex rxClean, Table table, Boolean usePascalCase, Regex columnFilterExclude, Func<Column, Table, Column> updateColumn)
            {
                if(rdr == null)
                    throw new ArgumentNullException("rdr");

                String typename = rdr["TypeName"].ToString().Trim().ToLower();
                var scale = (Int32) rdr["Scale"];
                var precision = (Int32) rdr["Precision"];

                var col = new Column
                {
                    Name = rdr["ColumnName"].ToString().Trim(),
                    SqlPropertyType = typename,
                    PropertyType = GetPropertyType(typename, scale, precision),
                    MaxLength = (Int32)rdr["MaxLength"],
                    Precision = precision,
                    Default = rdr["Default"].ToString().Trim(),
                    DateTimePrecision = (Int32)rdr["DateTimePrecision"],
                    Scale = scale,
                    Ordinal = (Int32)rdr["Ordinal"],
                    IsIdentity = rdr["IsIdentity"].ToString().Trim().ToLower() == "true",
                    IsNullable = rdr["IsNullable"].ToString().Trim().ToLower() == "true",
                    IsStoreGenerated = rdr["IsStoreGenerated"].ToString().Trim().ToLower() == "true",
                    IsPrimaryKey = rdr["PrimaryKey"].ToString().Trim().ToLower() == "true",
                    PrimaryKeyOrdinal = (Int32)rdr["PrimaryKeyOrdinal"],
                    IsForeignKey = rdr["IsForeignKey"].ToString().Trim().ToLower() == "true",
                    ParentTable = table
                };

                if (col.MaxLength == -1 && (col.SqlPropertyType.EndsWith("varchar", StringComparison.InvariantCultureIgnoreCase) || col.SqlPropertyType.EndsWith("varbinary", StringComparison.InvariantCultureIgnoreCase)))
                    col.SqlPropertyType += "(max)";

                if (col.IsPrimaryKey && !col.IsIdentity && col.IsStoreGenerated && typename == "uniqueidentifier")
                {
                    col.IsStoreGenerated = false;
                    col.IsIdentity = true;
                }

                var fullName = String.Format("{0}.{1}.{2}", table.Schema, table.Name, col.Name);
                if(columnFilterExclude != null && !col.IsPrimaryKey && (columnFilterExclude.IsMatch(col.Name) || columnFilterExclude.IsMatch(fullName)))
                    col.Hidden = true;

                col.IsFixedLength = (typename == "char" || typename == "nchar");
                col.IsUnicode = !(typename == "char" || typename == "varchar" || typename == "text");
                col.IsMaxLength = (typename == "ntext");

                col.IsRowVersion = col.IsStoreGenerated && !col.IsNullable && typename == "timestamp";
                if (col.IsRowVersion)
                    col.MaxLength = 8;

                if(typename == "hierarchyid")
                    col.MaxLength = 0;

                col.CleanUpDefault();
                col.NameHumanCase = CleanUp(col.Name);
                col.NameHumanCase = rxClean.Replace(col.NameHumanCase, "_$1");

                if (ReservedKeywords.Contains(col.NameHumanCase))
                    col.NameHumanCase = "@" + col.NameHumanCase;

                col.DisplayName = ToDisplayName(col.Name);

                var titleCase = (usePascalCase ? Inflector.ToTitleCase(col.NameHumanCase) : col.NameHumanCase).Replace(" ", "");
                if (titleCase != String.Empty)
                    col.NameHumanCase = titleCase;

                // Make sure property name doesn't clash with class name
                if(col.NameHumanCase == table.NameHumanCase)
                    col.NameHumanCase = col.NameHumanCase + "_";

                if(Char.IsDigit(col.NameHumanCase[0]))
                    col.NameHumanCase = "_" + col.NameHumanCase;

                table.HasNullableColumns = IsNullable(col);

                col = updateColumn(col, table);

                // If PropertyType is empty, return null. Most likely ignoring a column due to legacy (such as OData not supporting spatial types)
                if(String.IsNullOrEmpty(col.PropertyType))
                    return null;

                return col;
            }

            private static String GetSqlDbType(String sqlType, Int32 scale, Int32 precision)
            {
                String sysType = "VarChar";
                switch(sqlType)
                {
                    case "hierarchyid":
                        sysType = "VarChar";
                        break;

                    case "bigint":
                        sysType = "BigInt";
                        break;

                    case "binary":
                        sysType = "Binary";
                        break;

                    case "bit":
                        sysType = "Bit";
                        break;

                    case "char":
                        sysType = "Char";
                        break;

                    case "datetime":
                        sysType = "DateTime";
                        break;

                    case "decimal":
                        sysType = "Decimal";
                        break;

                    case "float":
                        sysType = "Float";
                        break;

                    case "image":
                        sysType = "Image";
                        break;

                    case "int":
                        sysType = "Int";
                        break;

                    case "money":
                        sysType = "Money";
                        break;

                    case "nchar":
                        sysType = "NChar";
                        break;

                    case "ntext":
                        sysType = "NText";
                        break;

                    case "nvarchar":
                        sysType = "NVarChar";
                        break;

                    case "real":
                        sysType = "Real";
                        break;

                    case "uniqueidentifier":
                        sysType = "UniqueIdentifier";
                        break;

                    case "smalldatetime":
                        sysType = "SmallDateTime";
                        break;

                    case "smallint":
                        sysType = "SmallInt";
                        break;

                    case "smallmoney":
                        sysType = "SmallMoney";
                        break;

                    case "text":
                        sysType = "Text";
                        break;

                    case "timestamp":
                        sysType = "Timestamp";
                        break;

                    case "tinyint":
                        sysType = "TinyInt";
                        break;

                    case "varbinary":
                        sysType = "VarBinary";
                        break;

                    case "varchar":
                        sysType = "VarChar";
                        break;

                    case "variant":
                        sysType = "Variant";
                        break;

                    case "xml":
                        sysType = "Xml";
                        break;

                    case "udt":
                        sysType = "Udt";
                        break;

                    case "table type":
                    case "structured":
                        sysType = "Structured";
                        break;

                    case "date":
                        sysType = "Date";
                        break;

                    case "time":
                        sysType = "Time";
                        break;

                    case "datetime2":
                        sysType = "DateTime2";
                        break;

                    case "datetimeoffset":
                        sysType = "DateTimeOffset";
                        break;
                }
                return sysType;
            }

            private static String GetPropertyType(String sqlType, Int32 scale, Int32 precision)
            {
                String sysType = "string";
                switch(sqlType)
                {
                    case "hierarchyid":
                        sysType = "System.Data.Entity.Hierarchy.HierarchyId";
                        break;
                    case "bigint":
                        sysType = "long";
                        break;
                    case "smallint":
                        sysType = "short";
                        break;
                    case "int":
                        sysType = "int";
                        break;
                    case "uniqueidentifier":
                        sysType = "System.Guid";
                        break;
                    case "smalldatetime":
                    case "datetime":
                    case "datetime2":
                    case "date":
                        sysType = "System.DateTime";
                        break;
                    case "datetimeoffset":
                        sysType = "System.DateTimeOffset";
                        break;
                    case "table type":
                        sysType = "System.Data.DataTable";
                        break;
                    case "time":
                        sysType = "System.TimeSpan";
                        break;
                    case "float":
                        sysType = "double";
                        break;
                    case "real":
                        sysType = "float";
                        break;
                    case "numeric":
                    case "smallmoney":
                    case "decimal":
                    case "money":
                        sysType = "decimal";
                        break;
                    case "tinyint":
                        sysType = "byte";
                        break;
                    case "bit":
                        sysType = "bool";
                        break;
                    case "image":
                    case "binary":
                    case "varbinary":
                    case "varbinary(max)":
                    case "timestamp":
                        sysType = "byte[]";
                        break;
                    case "geography":
                        if (DisableGeographyTypes)
                            sysType = "";
                        else
                            sysType = "System.Data.Entity.Spatial.DbGeography";
                        break;
                    case "geometry":
                        if (DisableGeographyTypes)
                            sysType = "";
                        else
                            sysType = "System.Data.Entity.Spatial.DbGeometry";
                        break;
                }
                return sysType;
            }
        }

        public class ForeignKey
        {
            public String FkTableName { get; private set; }
            public String FkTableNameFiltered { get; private set; }
            public String FkSchema { get; private set; }
            public String PkTableName { get; private set; }
            public String PkTableNameFiltered { get; private set; }
            public String PkSchema { get; private set; }
            public String FkColumn { get; private set; }
            public String PkColumn { get; private set; }
            public String ConstraintName { get; private set; }
            public Int32 Ordinal { get; private set; }
            public Boolean CascadeOnDelete { get; private set; }

            // User settable via ForeignKeyFilter callback
            public Boolean IncludeReverseNavigation { get; set; }
            public Boolean IncludeRequiredAttribute { get; set; }

            public ForeignKey(String fkTableName, String fkSchema, String pkTableName, String pkSchema, String fkColumn, String pkColumn, String constraintName, String fkTableNameFiltered, String pkTableNameFiltered, Int32 ordinal, Boolean cascadeOnDelete)
            {
                ConstraintName = constraintName;
                PkColumn = pkColumn;
                FkColumn = fkColumn;
                PkSchema = pkSchema;
                PkTableName = pkTableName;
                FkSchema = fkSchema;
                FkTableName = fkTableName;
                FkTableNameFiltered = fkTableNameFiltered;
                PkTableNameFiltered = pkTableNameFiltered;
                Ordinal = ordinal;
                CascadeOnDelete = cascadeOnDelete;

                IncludeReverseNavigation = true;
            }

            public String PkTableHumanCase(Boolean usePascalCase, Boolean prependSchemaName, String suffix)
            {
                String singular = Inflector.MakeSingular(PkTableNameFiltered);
                String pkTableHumanCase = (usePascalCase ? Inflector.ToTitleCase(singular) : singular).Replace(" ", "").Replace("$", "");
                if (String.Compare(PkSchema, "dbo", StringComparison.OrdinalIgnoreCase) != 0 && prependSchemaName)
                    pkTableHumanCase = PkSchema + "_" + pkTableHumanCase;
                pkTableHumanCase += suffix;
                return pkTableHumanCase;
            }
        }

        public class Index
        {
            public String Schema;
            public String TableName;
            public String IndexName;
            public Byte KeyOrdinal;
            public String ColumnName;
            public Int32 ColumnCount;
            public Boolean IsUnique;
            public Boolean IsPrimaryKey;
            public Boolean IsUniqueConstraint;
            public Boolean IsClustered;
        }

        public class Table
        {
            public String Name;
            public String NameHumanCase;
            public String Schema;
            public String Type;
            public String ClassName;
            public String Suffix;
            public Boolean IsMapping;
            public Boolean IsView;
            public Boolean HasForeignKey;
            public Boolean HasNullableColumns;
            public Boolean HasPrimaryKey;

            public List<Column> Columns;
            public List<PropertyAndComments> ReverseNavigationProperty;
            public List<String> MappingConfiguration;
            public List<String> ReverseNavigationCtor;
            public List<String> ReverseNavigationUniquePropName;
            public List<String> ReverseNavigationUniquePropNameClashes;
            public List<String> DataAnnotations;

            public Table()
            {
                Columns = new List<Column>();
                ResetNavigationProperties();
                ReverseNavigationUniquePropNameClashes = new List<String>();
                DataAnnotations = new List<String>();
            }

            internal static String GetLazyLoadingMarker()
            {
                return UseLazyLoading ? "virtual " : String.Empty;
            }

            public String NameHumanCaseWithSuffix
            {
                get
                {
                    return NameHumanCase + Suffix;
                }
            }
            public void ResetNavigationProperties()
            {
                MappingConfiguration = new List<String>();
                ReverseNavigationProperty = new List<PropertyAndComments>();
                ReverseNavigationCtor = new List<String>();
                ReverseNavigationUniquePropName = new List<String>();
                foreach (var col in Columns)
                    col.ResetNavigationProperties();
            }

            public void SetPrimaryKeys()
            {
                HasPrimaryKey = Columns.Any(x => x.IsPrimaryKey);
                if(HasPrimaryKey)
                    return; // Table has at least one primary key

                // This table is not allowed in EntityFramework as it does not have a primary key.
                // Therefore generate a composite key from all non-null fields.
                foreach(var col in Columns.Where(x => !x.IsNullable && !x.Hidden))
                {
                    col.IsPrimaryKey = true;
                    HasPrimaryKey = true;
                }
            }

            public IEnumerable<Column> PrimaryKeys
            {
                get
                {
                    return Columns.Where(x => x.IsPrimaryKey)
                                  .OrderBy(x => x.PrimaryKeyOrdinal)
                                  .ThenBy(x => x.Ordinal)
                                  .ToList();
                }
            }

            public String PrimaryKeyNameHumanCase()
            {
                var data = PrimaryKeys.Select(x => "x." + x.NameHumanCase).ToList();
                Int32 n = data.Count();
                if(n == 0)
                    return String.Empty;
                if(n == 1)
                    return "x => " + data.First();
                // More than one primary key
                return String.Format("x => new {{ {0} }}", String.Join(", ", data));
            }

            public Column this[String columnName]
            {
                get { return GetColumn(columnName); }
            }

            public Column GetColumn(String columnName)
            {
                return Columns.SingleOrDefault(x => String.Compare(x.Name, columnName, StringComparison.OrdinalIgnoreCase) == 0);
            }

            public String GetUniqueColumnName(String tableNameHumanCase, ForeignKey foreignKey, Boolean usePascalCase, Boolean checkForFkNameClashes, Boolean makeSingular, Func<String, ForeignKey, String, Relationship, Int16, String> ForeignKeyName, Relationship relationship)
            {
                if (ReverseNavigationUniquePropName.Count == 0)
                {
                    ReverseNavigationUniquePropName.Add(NameHumanCase);
                    ReverseNavigationUniquePropName.AddRange(Columns.Select(c => c.NameHumanCase));
                }

                if(!makeSingular)
                    tableNameHumanCase = Inflector.MakePlural(tableNameHumanCase);

                if (checkForFkNameClashes && ReverseNavigationUniquePropName.Contains(tableNameHumanCase) && !ReverseNavigationUniquePropNameClashes.Contains(tableNameHumanCase))
                    ReverseNavigationUniquePropNameClashes.Add(tableNameHumanCase); // Name clash

                // Attempt 1
                String fkName = (usePascalCase ? Inflector.ToTitleCase(foreignKey.FkColumn) : foreignKey.FkColumn).Replace(" ", "").Replace("$", "");
                String name = ForeignKeyName(tableNameHumanCase, foreignKey, fkName, relationship, 1);
                String col;
                if (!ReverseNavigationUniquePropNameClashes.Contains(name) && !ReverseNavigationUniquePropName.Contains(name))
                {
                    ReverseNavigationUniquePropName.Add(name);
                    return name;
                }

                // Attempt 2
                if (fkName.ToLowerInvariant().EndsWith("id"))
                {
                    col = ForeignKeyName(tableNameHumanCase, foreignKey, fkName, relationship, 2);
                    if (checkForFkNameClashes && ReverseNavigationUniquePropName.Contains(col) &&
                        !ReverseNavigationUniquePropNameClashes.Contains(col))
                        ReverseNavigationUniquePropNameClashes.Add(col); // Name clash

                    if (!ReverseNavigationUniquePropNameClashes.Contains(col) &&
                        !ReverseNavigationUniquePropName.Contains(col))
                    {
                        ReverseNavigationUniquePropName.Add(col);
                        return col;
                    }
                }

                // Attempt 3
                col = ForeignKeyName(tableNameHumanCase, foreignKey, fkName, relationship, 3);
                if (checkForFkNameClashes && ReverseNavigationUniquePropName.Contains(col) &&
                    !ReverseNavigationUniquePropNameClashes.Contains(col))
                    ReverseNavigationUniquePropNameClashes.Add(col); // Name clash

                if (!ReverseNavigationUniquePropNameClashes.Contains(col) &&
                    !ReverseNavigationUniquePropName.Contains(col))
                {
                    ReverseNavigationUniquePropName.Add(col);
                    return col;
                }

                // Attempt 4
                col = ForeignKeyName(tableNameHumanCase, foreignKey, fkName, relationship, 4);
                if (checkForFkNameClashes && ReverseNavigationUniquePropName.Contains(col) && !ReverseNavigationUniquePropNameClashes.Contains(col))
                    ReverseNavigationUniquePropNameClashes.Add(col); // Name clash

                if (!ReverseNavigationUniquePropNameClashes.Contains(col) && !ReverseNavigationUniquePropName.Contains(col))
                {
                    ReverseNavigationUniquePropName.Add(col);
                    return col;
                }

                // Attempt 5
                for (Int32 n = 1; n < 99; ++n)
                {
                    col = ForeignKeyName(tableNameHumanCase, foreignKey, fkName, relationship, 5) + n;

                    if (ReverseNavigationUniquePropName.Contains(col))
                        continue;

                    ReverseNavigationUniquePropName.Add(col);
                    return col;
                }

                // Give up
                return ForeignKeyName(tableNameHumanCase, foreignKey, fkName, relationship, 6);
            }

            public void AddReverseNavigation(Relationship relationship, String fkName, Table fkTable, String propName, String constraint, String collectionType, CommentsStyle includeComments, List<ForeignKey> fks, Table mappingTable = null)
            {
                String fkNames = "";
                switch (relationship)
                {
                    case Relationship.OneToOne:
                    case Relationship.OneToMany:
                    case Relationship.ManyToOne:
                        fkNames = (fks.Count>1 ? "(" : "") + String.Join(", ", fks.Select(x => "[" + x.FkColumn + "]").Distinct().ToArray()) + (fks.Count>1 ? ")" : "");
                        break;
                    case Relationship.ManyToMany:
                        break;

                    default:
                        break;
                }
                switch (relationship)
                {
                    case Relationship.OneToOne:
                        ReverseNavigationProperty.Add(
                            new PropertyAndComments()
                            {
                                Definition = String.Format("public {0}{1} {2} {{ get; set; }}{3}", GetLazyLoadingMarker(), fkTable.NameHumanCaseWithSuffix, propName, includeComments != CommentsStyle.None ? " // " + constraint : String.Empty),
                                Comments = String.Format("Parent (One-to-One) {0} pointed by [{1}].{2} ({3})", this.NameHumanCaseWithSuffix, fkTable.Name, fkNames, fks.First().ConstraintName)
                            }
                        );
                        break;

                    case Relationship.OneToMany:
                        ReverseNavigationProperty.Add(
                            new PropertyAndComments()
                            {
                                Definition = String.Format("public {0}{1} {2} {{ get; set; }}{3}", GetLazyLoadingMarker(), fkTable.NameHumanCaseWithSuffix, propName, includeComments != CommentsStyle.None ? " // " + constraint : String.Empty),
                                Comments = String.Format("Parent {0} pointed by [{1}].{2} ({3})", NameHumanCaseWithSuffix, fkTable.Name, fkNames, fks.First().ConstraintName)
                            }
                        );
                        break;

                    case Relationship.ManyToOne:
                        String initialization1 = String.Empty;
                        if(UsePropertyInitializers)
                            initialization1 = String.Format(" = new {0}<{1}>();", collectionType, fkTable.NameHumanCaseWithSuffix);
                        ReverseNavigationProperty.Add(
                            new PropertyAndComments()
                            {
                                Definition = String.Format("public {0}System.Collections.Generic.ICollection<{1}> {2} {{ get; set; }}{3}{4}", GetLazyLoadingMarker(), fkTable.NameHumanCaseWithSuffix, propName, initialization1, includeComments != CommentsStyle.None ? " // " + constraint : String.Empty),
                                Comments = String.Format("Child {0} where [{1}].{2} point to this entity ({3})", Inflector.MakePlural(fkTable.NameHumanCase), fkTable.Name, fkNames, fks.First().ConstraintName)
                            }
                        );
                        ReverseNavigationCtor.Add(String.Format("{0} = new {1}<{2}>();", propName, collectionType, fkTable.NameHumanCaseWithSuffix));
                        break;

                    case Relationship.ManyToMany:
                        String initialization2 = String.Empty;
                        if(UsePropertyInitializers)
                            initialization2 = String.Format(" = new {0}<{1}>();", collectionType, fkTable.NameHumanCaseWithSuffix);
                        ReverseNavigationProperty.Add(
                            new PropertyAndComments()
                            {
                                Definition = String.Format("public {0}System.Collections.Generic.ICollection<{1}> {2} {{ get; set; }}{3}{4}", GetLazyLoadingMarker(), fkTable.NameHumanCaseWithSuffix, propName, initialization2, includeComments != CommentsStyle.None ? " // Many to many mapping" : String.Empty),
                                Comments = String.Format("Child {0} (Many-to-Many) mapped by table [{1}]", Inflector.MakePlural(fkTable.NameHumanCase), mappingTable == null ? String.Empty : mappingTable.Name)
                            }
                        );

                        ReverseNavigationCtor.Add(String.Format("{0} = new {1}<{2}>();", propName, collectionType, fkTable.NameHumanCaseWithSuffix));
                        break;

                    default:
                        throw new ArgumentOutOfRangeException("relationship");
                }
            }

            public void AddMappingConfiguration(ForeignKey left, ForeignKey right, Boolean usePascalCase, String leftPropName, String rightPropName, Boolean isSqlCe)
            {
                MappingConfiguration.Add(String.Format(@"HasMany(t => t.{0}).WithMany(t => t.{1}).Map(m =>
            {{
                m.ToTable(""{2}""{5});
                m.MapLeftKey(""{3}"");
                m.MapRightKey(""{4}"");
            }});", leftPropName, rightPropName, left.FkTableName, left.FkColumn, right.FkColumn, isSqlCe ? String.Empty : ", \"" + left.FkSchema + "\""));
            }

            public void IdentifyMappingTable(List<ForeignKey> fkList, Tables tables, Boolean usePascalCase, String collectionType, Boolean checkForFkNameClashes, CommentsStyle includeComments, Boolean isSqlCe, Func<String, ForeignKey, String, Relationship, Int16, String> ForeignKeyName)
            {
                IsMapping = false;

                var nonReadOnlyColumns = Columns.Where(c => !c.IsIdentity && !c.IsRowVersion && !c.IsStoreGenerated && !c.Hidden).ToList();

                // Ignoring read-only columns, it must have only 2 columns to be a mapping table
                if (nonReadOnlyColumns.Count != 2)
                    return;

                // Must have 2 primary keys
                if (nonReadOnlyColumns.Count(x => x.IsPrimaryKey) != 2)
                    return;

                // No columns should be nullable
                if (nonReadOnlyColumns.Any(x => x.IsNullable))
                    return;

                // Find the foreign keys for this table
                var foreignKeys = fkList.Where(x =>
                                               String.Compare(x.FkTableName, Name, StringComparison.OrdinalIgnoreCase) == 0 &&
                                               String.Compare(x.FkSchema, Schema, StringComparison.OrdinalIgnoreCase) == 0)
                                        .ToList();

                // Each column must have a foreign key, therefore check column and foreign key counts match
                if (foreignKeys.Select(x => x.FkColumn).Distinct().Count() != 2)
                    return;

                ForeignKey left  = foreignKeys[0];
                ForeignKey right = foreignKeys[1];
                if (!left.IncludeReverseNavigation || !right.IncludeReverseNavigation)
                    return;

                Table leftTable = tables.GetTable(left.PkTableName, left.PkSchema);
                if (leftTable == null)
                    return;

                Table rightTable = tables.GetTable(right.PkTableName, right.PkSchema);
                if (rightTable == null)
                    return;

                var leftPropName  = leftTable.GetUniqueColumnName(rightTable.NameHumanCase, right, usePascalCase, checkForFkNameClashes, false, ForeignKeyName, Relationship.ManyToOne); // relationship from the mapping table to each side is Many-to-One
                var rightPropName = rightTable.GetUniqueColumnName(leftTable.NameHumanCase, left, usePascalCase, checkForFkNameClashes, false, ForeignKeyName, Relationship.ManyToOne); // relationship from the mapping table to each side is Many-to-One
                leftTable.AddMappingConfiguration(left, right, usePascalCase, leftPropName, rightPropName, isSqlCe);

                IsMapping = true;
                rightTable.AddReverseNavigation(Relationship.ManyToMany, rightTable.NameHumanCase, leftTable, rightPropName, null, collectionType, includeComments, null, mappingTable: this);
                leftTable .AddReverseNavigation(Relationship.ManyToMany, leftTable.NameHumanCase, rightTable, leftPropName, null, collectionType, includeComments, null, mappingTable: this);
            }

            public void SetupDataAnnotations()
            {
                DataAnnotations = new List<String>
                {
                    HasPrimaryKey
                        ? String.Format("Table(\"{0}\", Schema = \"{1}\")", Name, Schema)
                        : "NotMapped"
                };

            }
        }

        public class Tables : List<Table>
        {
            public Table GetTable(String tableName, String schema)
            {
                return this.SingleOrDefault(x =>
                    String.Compare(x.Name, tableName, StringComparison.OrdinalIgnoreCase) == 0 &&
                    String.Compare(x.Schema, schema, StringComparison.OrdinalIgnoreCase) == 0);
            }

            public void SetPrimaryKeys()
            {
                foreach (var tbl in this)
                {
                    tbl.SetPrimaryKeys();
                }
            }

            public void IdentifyMappingTables(List<ForeignKey> fkList, Boolean usePascalCase, String collectionType, Boolean checkForFkNameClashes, CommentsStyle includeComments, Boolean isSqlCe, Func<String, ForeignKey, String, Relationship, Int16, String> ForeignKeyName)
            {
                foreach(var tbl in this.Where(x => x.HasForeignKey))
                {
                    tbl.IdentifyMappingTable(fkList, this, usePascalCase, collectionType, checkForFkNameClashes, includeComments, isSqlCe, ForeignKeyName);
                }
            }

            public void ResetNavigationProperties()
            {
                foreach (var tbl in this)
                {
                    tbl.ResetNavigationProperties();
                }
            }
        }

        // ***********************************************************************
        // ** Stored procedure callbacks

        public static readonly Func<StoredProcedure, String> WriteStoredProcFunctionName = sp => sp.NameHumanCase;

        public static readonly Func<StoredProcedure, Boolean> StoredProcHasOutParams = (sp) =>
        {
            return sp.Parameters.Any(x => x.Mode != StoredProcedureParameterMode.In);
        };

        public static readonly Func<StoredProcedure, Boolean, String> WriteStoredProcFunctionParams = (sp, includeProcResult) =>
        {
            var sb = new StringBuilder();
            Int32 n = 1;
            Int32 count = sp.Parameters.Count;
            foreach (var p in sp.Parameters.OrderBy(x => x.Ordinal))
            {
                sb.AppendFormat("{0}{1}{2} {3}{4}",
                    p.Mode == StoredProcedureParameterMode.In ? "" : "out ",
                    p.PropertyType,
                    NotNullable.Contains(p.PropertyType.ToLower()) ? String.Empty : "?",
                    p.NameHumanCase,
                    (n++ < count) ? ", " : String.Empty);
            }
            if (includeProcResult && sp.ReturnModels.Count > 0 && sp.ReturnModels.First().Count > 0)
                sb.AppendFormat((sp.Parameters.Count > 0 ?  ", " : "") + "out int procResult");
            return sb.ToString();
        };

        public static readonly Func<StoredProcedure, String> WriteStoredProcFunctionOverloadCall = (sp) =>
        {
            var sb = new StringBuilder();
            foreach (var p in sp.Parameters.OrderBy(x => x.Ordinal))
            {
                sb.AppendFormat("{0}{1}, ",
                    p.Mode == StoredProcedureParameterMode.In ? "" : "out ",
                    p.NameHumanCase);
            }
            sb.Append("out procResult");
            return sb.ToString();
        };

        public static readonly Func<StoredProcedure, String> WriteStoredProcFunctionSqlAtParams = sp =>
        {
            var sb = new StringBuilder();
            Int32 n = 1;
            Int32 count = sp.Parameters.Count;
            foreach (var p in sp.Parameters.OrderBy(x => x.Ordinal))
            {
                sb.AppendFormat("{0}{1}{2}",
                    p.Name,
                    p.Mode == StoredProcedureParameterMode.In ? String.Empty : " OUTPUT",
                    (n++ < count) ? ", " : String.Empty);
            }
            return sb.ToString();
        };

        public static readonly Func<StoredProcedureParameter, String> WriteStoredProcSqlParameterName = p => p.NameHumanCase + "Param";

        public static readonly Func<StoredProcedure, Boolean, String> WriteStoredProcFunctionDeclareSqlParameter = (sp, includeProcResult) =>
        {
            var sb = new StringBuilder();
            foreach (var p in sp.Parameters.OrderBy(x => x.Ordinal))
            {
                Boolean isNullable = !NotNullable.Contains(p.PropertyType.ToLower());
                var getValueOrDefault = isNullable ? ".GetValueOrDefault()" : String.Empty;

                sb.AppendLine(String.Format("            var {0} = new System.Data.SqlClient.SqlParameter {{ ParameterName = \"{1}\", SqlDbType = System.Data.SqlDbType.{2}, Direction = System.Data.ParameterDirection.{3}{4}{5}{6}{7} }};",
                    WriteStoredProcSqlParameterName(p),
                    p.Name,
                    p.SqlDbType,
                    p.Mode == StoredProcedureParameterMode.In ? "Input" : "Output",
                    p.Mode == StoredProcedureParameterMode.In ? ", Value = " + p.NameHumanCase + getValueOrDefault : String.Empty,
                    p.MaxLength != 0 ? ", Size = " + p.MaxLength : String.Empty,
                    (p.Precision > 0 || p.Scale > 0) ? ", Precision = " + p.Precision + ", Scale = " + p.Scale : String.Empty,
                    p.PropertyType.ToLower().Contains("datatable") ? ", TypeName = \"" + p.UserDefinedTypeName + "\"" : String.Empty));

                    if (p.Mode == StoredProcedureParameterMode.In)
                    {
                        sb.AppendFormat(
                            isNullable
                                ? "            if (!{0}.HasValue){1}                {0}Param.Value = System.DBNull.Value;{1}{1}"
                                : "            if ({0}Param.Value == null){1}                {0}Param.Value = System.DBNull.Value;{1}{1}",
                            p.NameHumanCase, Environment.NewLine);
                    }
            }
            if(includeProcResult && sp.ReturnModels.Count < 2)
                sb.AppendLine("            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = \"@procResult\", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };");
            return sb.ToString();
        };

        public static readonly Func<StoredProcedure, String> WriteTableValuedFunctionDeclareSqlParameter = sp =>
        {
            var sb = new StringBuilder();
            foreach (var p in sp.Parameters.OrderBy(x => x.Ordinal))
            {
                sb.AppendLine(String.Format("            var {0}Param = new System.Data.Entity.Core.Objects.ObjectParameter(\"{1}\", typeof({2})) {{ Value = {3} }};",
                    p.NameHumanCase,
                    p.Name.Substring(1),
                    p.PropertyType,
                    p.NameHumanCase + (p.Mode == StoredProcedureParameterMode.In && NotNullable.Contains(p.PropertyType.ToLowerInvariant()) ? String.Empty : ".GetValueOrDefault()" )));
            }
            return sb.ToString();
        };

        public static readonly Func<StoredProcedure, Boolean, String> WriteStoredProcFunctionSqlParameterAnonymousArray = (sp, includeProcResultParam) =>
        {
            var sb = new StringBuilder();
            Boolean hasParam = false;
            foreach (var p in sp.Parameters.OrderBy(x => x.Ordinal))
            {
                sb.Append(String.Format("{0}Param, ", p.NameHumanCase));
                hasParam = true;
            }
            if (includeProcResultParam)
                sb.Append("procResultParam");
            else if(hasParam)
                sb.Remove(sb.Length - 2, 2);
            return sb.ToString();
        };

        public static readonly Func<StoredProcedure, String> WriteTableValuedFunctionSqlParameterAnonymousArray = sp =>
        {
            if (sp.Parameters.Count == 0)
                return "new System.Data.Entity.Core.Objects.ObjectParameter[] { }";
            var sb = new StringBuilder();
            foreach (var p in sp.Parameters.OrderBy(x => x.Ordinal))
            {
                sb.Append(String.Format("{0}Param, ", p.NameHumanCase));
            }
            return sb.ToString().Substring(0, sb.Length - 2);
        };

        public static readonly Func<StoredProcedure, Boolean, String> WriteStoredProcFunctionSetSqlParameters = (sp, isFake) =>
        {
            var sb = new StringBuilder();
            foreach (var p in sp.Parameters.Where(x => x.Mode != StoredProcedureParameterMode.In).OrderBy(x => x.Ordinal))
            {
                String Default = String.Format("default({0})", p.PropertyType);
                Boolean notNullable = NotNullable.Contains(p.PropertyType.ToLower());

                if(isFake)
                    sb.AppendLine(String.Format("            {0} = {1};", p.NameHumanCase, Default));
                else
                {
                    sb.AppendLine(String.Format("            if (IsSqlParameterNull({0}Param))", p.NameHumanCase));
                    sb.AppendLine(String.Format("                {0} = {1};", p.NameHumanCase, notNullable ? Default : "null"));
                    sb.AppendLine("            else");
                    sb.AppendLine(String.Format("                {0} = ({1}) {2}Param.Value;", p.NameHumanCase, p.PropertyType, p.NameHumanCase));
                }
            }
            return sb.ToString();
        };

        public static readonly Func<StoredProcedure, String> WriteStoredProcReturnModelName = sp =>
        {
            if (StoredProcedureReturnTypes.ContainsKey(sp.NameHumanCase))
                return StoredProcedureReturnTypes[sp.NameHumanCase];
            if (StoredProcedureReturnTypes.ContainsKey(sp.Name))
                return StoredProcedureReturnTypes[sp.Name];

            var name = String.Format("{0}ReturnModel", sp.NameHumanCase);
            if (StoredProcedureReturnModelRename != null)
            {
                var customName = StoredProcedureReturnModelRename(name, sp);
                if (!String.IsNullOrEmpty(customName))
                    name = customName;
            }

            return name;
        };

    public static readonly Func<DataColumn, String> WriteStoredProcReturnColumn = col =>
        String.Format("public {0} {1} {{ get; set; }}",
            StoredProcedure.WrapTypeIfNullable((col.DataType.Name.Equals("SqlHierarchyId") ? "Microsoft.SqlServer.Types." : "System.") + col.DataType.Name, col), col.ColumnName);

        public static readonly Func<StoredProcedure, String> WriteStoredProcReturnType = (sp) =>
        {
            var returnModelCount = sp.ReturnModels.Count;
            if (returnModelCount == 0)
                return "int";

            var spReturnClassName = WriteStoredProcReturnModelName(sp);
            return (returnModelCount == 1) ? String.Format("System.Collections.Generic.List<{0}>", spReturnClassName) : spReturnClassName;
        };
#>
