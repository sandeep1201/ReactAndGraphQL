using System;
using System.Collections;
using System.Collections.Concurrent;
using System.Collections.Generic;
using System.Data.Entity;
using System.Diagnostics;
using System.Drawing;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Reflection;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using System.Threading.Tasks.Dataflow;
using System.Transactions;
using Autofac;
using Dcf.Wwp.Api.Library.Services;
using Dcf.Wwp.Data.Sql.Model;
using Dcf.Wwp.Model.Interface;
using Dcf.Wwp.Model.Interface.Repository;
using Dcf.Wwp.Model.Repository;
using DCF.Common.Dates;
using DCF.Common.Extensions;
using DCF.Common.Tasks;
using DCF.Core.IO;
using DCF.Timelimits.Core.Processors;
using DCF.Timelimits.Core.Tasks;
using DCF.Timelimits.Rules.Definitions;
using DCF.Timelimits.Rules.Domain;
using DCF.Timelimits.Rules.Scripting;
using DCF.Timelimits.Tasks;
using DCF.Timelimts.Service;
using EnumsNET;
using Nito.AsyncEx;
using NRules;
using OfficeOpenXml;
using OfficeOpenXml.Style;
using Serilog;
using Serilog.Context;
using IsolationLevel = System.Data.IsolationLevel;

namespace DCF.Timelimits
{
    public class TimelimitsBatchApplicationSimulatorNew : TimelimitsBatchApplication
    {
        ConcurrentDictionary<ClockTypes, StringBuilder> taskOutput = new ConcurrentDictionary<ClockTypes, StringBuilder>();
        ConcurrentDictionary<Decimal, RuleContext> pinOutput = new ConcurrentDictionary<Decimal, RuleContext>();
        ConcurrentDictionary<ClockTypes, List<Decimal>> expectedPinOutput = new ConcurrentDictionary<ClockTypes, List<Decimal>>()
            ;


        public TimelimitsBatchApplicationSimulatorNew(ApplicationContext context) : base(context)
        {
            base.OnInitialized = this.OnInitialized;
            base.OnContainerInitialized = this.OnContainerInitialized;
        }

        internal ISessionFactory CompileTimelimitRuleNetwork()
        {
            return RulesEngine.CompileTimelimitRuleNetwork();
        }

        private async Task OnInitialized(ContainerBuilder containerBuilder)
        {
            this.mediator = this.Container.Resolve<ITaskMediator>();
            //this._timelimitService = this.Container.Resolve<ITimelimitService>();
            //this.dbContextFactory = () => this.Container.Resolve<WwpEntities>();
            //this._db2TimelimitsServiceFactory = () => this.Container.Resolve<IDb2TimelimitService>();
            //this._repoFactory = () => this.Container.Resolve<IRepository>();

        }

        private void OnContainerInitialized(ContainerBuilder containerBuilder)
        {
            ISessionFactory ruleFactory = this.CompileTimelimitRuleNetwork();
            containerBuilder.RegisterInstance(ruleFactory).As<ISessionFactory>().SingleInstance();
        }

        public override async Task StartAsync()
        {
            this._token = this.tokenSource.Token;
            this._isRunning = true;
            this._isPaused = false;

            Boolean keepRunning = true;
            while (keepRunning)
            {
                Int32 taskId = 0;

                do
                {
                    Console.WriteLine(@"What would you like to do?
                                    --------------------------
                                    1. Fix DB2 Counts
                                    2. Import legacy batch ticks
                                    3. Run test batch
                                    4. Parse Expected Pin Output (uat_expected_batch_results)
                                    5. Created Expected Output from legacy batch run
                                    6. Parse/Process batch run output
                                    7. Create missing T0460 records
                                    7. Exit                
                ");
                } while (!Int32.TryParse(Console.ReadLine(), out taskId));

                try
                {
                    switch (taskId)
                    {
                        case 1:
                            await this.FixDb2CountsAsync().ConfigureAwait(false);
                            break;
                        case 2:
                            await this.ImportDb2Ticks().ConfigureAwait(false);
                            break;
                        case 3:
                            await this.RunSimulatedBatchJob().ConfigureAwait(false);
                            break;
                        case 4:
                            this.ParseExpectedOutput("uat_expected_batch_results.xlsx", true);
                            break;
                        case 5:
                            await this.CreateExpectedOutputFromLegacyBatch(null).ConfigureAwait(false);
                            break;
                        case 6:
                            await this.ParseBatchOutput().ConfigureAwait(false);
                            break;
                        case 7:
                            await this.CreateMissingT040Records().ConfigureAwait(false);
                            break;
                        case 8:
                            break;
                        default:
                            Console.WriteLine("I dunno what you just asked for...");
                            break;
                    }
                }
                catch (Exception e)
                {
                    this._logger.Error(e, "Error running @task", taskId);
                }


                Console.WriteLine("Keep Running?(y/n):");
                keepRunning = Console.ReadLine()?.ToLower() != "n";
            }
        }

        private async Task CreateMissingT040Records()
        {
            Console.WriteLine(@"Run in simulation mode?(y/n)");
            var isSimulation = Console.ReadLine().Trim().ToLower() != "n";

            var passed = 0;
            var failed = 0;
            var skipped = 0;

            List<TimeLimitExtension> models;
            using (var db = Container.Resolve<WwpEntities>())
            {
                var query = @"select te.* from wwp.TimeLimitExtension te, wwp.Participant p 
	where te.CreatedDate > '2017-08-25' and p.Id = te.ParticipantId
	and NOT EXISTS(select 1 from wwp.T0460_IN_W2_EXT ext where p.PinNumber = ext.PIN_NUM and ext.AGY_DCSN_DT =  CONVERT(date,te.DecisionDate))
	order by te.DecisionDate desc";
                models = await db.Database.SqlQuery<TimeLimitExtension>(query).ToListAsync().ConfigureAwait(false);
            }
            this._logger.Information($"Found {models.Count} ids");
            Console.WriteLine();
            for (var index = 0; index < models.Count; index++)
            {
                var id = models[index];
                Console.SetCursorPosition(0, Console.CursorTop);
                Console.Write($"Proccessing item {index + 1} / {models.Count}");

                try
                {
                    using (var db = Container.Resolve<WwpEntities>())
                    using (var repo = new Repository(db))
                    using (var timelimitService = new TimelimitService(db))
                    using (var db2Service = new Db2TimelimitService(repo, timelimitService))
                    {
                        db2Service.IsSimulated = isSimulation;
                        var extensionModel = id;
                        var worker = await db.WorkerLoginDetails.FirstOrDefaultAsync(x => x.UserId == extensionModel.ModifiedBy);

                        var mainFrameUserId = worker?.WorkerId;
                        if (mainFrameUserId == null)
                            throw new Exception("User not found.");

                        var timeline = timelimitService.GetTimeline(extensionModel.ParticipantId.GetValueOrDefault());
                        //var extension = TimelimitService.MapTimelimitExtensionToExtension(extensionModel);
                        //timeline.AddExtension(extensionModel.ExtensionSequence.GetValueOrDefault(1), extension);
                        var participant = await db.Participants.FirstOrDefaultAsync(x => x.Id == extensionModel.ParticipantId).ConfigureAwait(false);
                        var t0460 = db2Service.InsertExtension(extensionModel, participant, mainFrameUserId, timeline);
                        t0460.EXT_REQ_PRC_DT = id.CreatedDate.Value;
                        t0460.UPDATED_DT = id.CreatedDate.Value;
                        db2Service.Save();
                        //await db.SaveChangesAsync().ConfigureAwait(false);

                    }
                    passed++;
                }
                catch (Exception e)
                {
                    failed++;
                }
            }
            this._logger.Information("done! passed:{passed},Failed:{failed}", passed, failed);

        }

        private Task ImportDb2Ticks()
        {
            Console.WriteLine("Do you want to overwrite previously imported ticks?");
            var overwrite = Console.ReadLine() == "y";

            var passed = 0;
            var failed = 0;
            var skipped = 0;

            Int32 taskId;
            do
            {
                Console.WriteLine(@"What type of run would you like make?
                                                --------------------------
                                                1. Full
                                                2. File / Enter pins

                            ");
            } while (!Int32.TryParse(Console.ReadLine(), out taskId));
            var dMonth = Decimal.Parse(this.Context.Date.ToStringMonthYearComposite());

            List<Decimal> pinsToProcess;
            if (taskId == 1)
            {
                using (var db = Container.Resolve<WwpEntities>())
                {
                    pinsToProcess = db.T0459_IN_W2_LIMITS_SEP.Where(x => x.HISTORY_CD == 0 && x.BENEFIT_MM == dMonth).Select(x => x.PIN_NUM).ToList();
                }
            }
            else
            {
                pinsToProcess = this.GetIds<Decimal>();
            }


            Console.WriteLine(@"Run in simulation mode?(y/n)");
            var isSimulation = Console.ReadLine().Trim().ToLower() != "n";

            var createdTimeLimits = new Dictionary<Decimal, ITimeLimit>();


            foreach (var pin in pinsToProcess)
            {
                using (var db = Container.Resolve<WwpEntities>())
                using (var repo = Container.Resolve<IRepository>())
                {
                    using (LogContext.PushProperty("PinNumber", pin))
                    {
                        try
                        {
                            repo.ResetContext();
                            //var tick = repo.GetW2LimitByMonth(dMonth, pin);
                            var tick = db.T0459_IN_W2_LIMITS_SEP.FirstOrDefault(x => x.HISTORY_CD == 0 && x.PIN_NUM == pin && x.BENEFIT_MM == dMonth);
                            var timelimit = repo.TimeLimitByDate(pin.ToString(), this.Context.Date, false);
                            var participant = repo.ParticipantByPin(pin.ToString(), false);
                            if (tick == null)
                            {
                                this._logger.Information("skipping pin, No DB2 record found. ");
                                skipped++;
                                continue;
                            }

                            if (participant == null)
                            {

                                try
                                {
                                    participant = repo.ParticipantByPin(pin.ToString(), true);
                                }
                                catch (Exception)
                                {
                                    this._logger.Information("Failed to refresh participant.");

                                }
                                if (participant == null)
                                {
                                    this._logger.Information("skipping pin, No Participant record found. ");
                                    skipped++;
                                    continue;
                                }
                            }

                            if (timelimit == null)
                            {
                                this._logger.Information($"No Timelimit record found. Creating one! ");
                                timelimit = repo.NewTimeLimit();
                            }
                            else if (timelimit.TimeLimitTypeId == (Int32)ClockTypes.None)
                            {

                                this._logger.Information($"Edited \"None\" Timelimit record found. Overwriting! ");

                            }
                            else if (timelimit.ModifiedDate.HasValue)
                            {
                                this._logger.Information($"Edited Timelimit record found with ClockType: \"{(ClockTypes)timelimit.TimeLimitTypeId.Value}\". skipping! ");
                                skipped++;
                                continue;
                            }
                            else if (!overwrite)
                            {
                                this._logger.Information($"Batch Timelimit record found with ClockType: \"{(ClockTypes)timelimit.TimeLimitTypeId.Value}\". Skipping! ");
                                skipped++;
                                continue;
                            }
                            else
                            {
                                this._logger.Information($"Batch Timelimit record found with ClockType: \"{(ClockTypes)timelimit.TimeLimitTypeId.Value}\". Overwriting! ");
                            }

                            ClockTypes clockType;
                            if (!Enum.TryParse(tick.CLOCK_TYPE_CD, out clockType))
                            {
                                this._logger.Information($" Unable to parse clocktype with CLOCK_TYPE_CD: \"{tick.CLOCK_TYPE_CD}\". Skipping! ");
                            }

                            timelimit.ParticipantID = participant.Id;
                            timelimit.EffectiveMonth = this.Context.Date.StartOf(DateTimeUnit.Month);
                            timelimit.TimeLimitTypeId = (Int32)clockType;
                            timelimit.TwentyFourMonthLimit = clockType.HasAnyFlags(ClockTypes.PlacementTypes);
                            timelimit.StateTimelimit = true;
                            timelimit.FederalTimeLimit = tick.FED_CLOCK_IND == "Y";
                            timelimit.CreatedDate = tick.UPDATED_DT;
                            timelimit.ModifiedBy = "WWP Batch";
                            timelimit.Notes = $"Historical data from old WP application, Created transaction code:{tick.CRE_TRAN_CD}, Comments from old WP application: {tick.COMMENT_TXT}";

                            if (!isSimulation)
                            {
                                repo.Save();
                            }

                            createdTimeLimits.Add(pin, timelimit);
                            passed++;
                        }
                        catch (Exception e)
                        {
                            this._logger.Error(e, "There was an error proceszsing this pin.");
                            failed++;
                        }
                    }
                }
            }
            this._logger.Information($"Finished processing {pinsToProcess.Count}. Passed: {passed}. Failed: {failed}. Skipped: {skipped} ");


            Console.WriteLine(@"Write output (y/n)?");
            var writeOutput = Console.ReadLine().Trim().ToLower() != "n";
            if (!writeOutput)
            {
                var outputPath = this.GetOutputPath();

                this._logger.Information("outputPath: {path}", outputPath);

                ExcelPackage outputPackage = new ExcelPackage();
                var worksheet = outputPackage.Workbook.Worksheets.Add("Imported");

                worksheet.Cells[1, 1].Value = "Pin Number";
                worksheet.Cells[1, 2].Value = "Id";
                worksheet.Cells[1, 3].Value = "ParticipantID";
                worksheet.Cells[1, 4].Value = "Effective Month";
                worksheet.Cells[1, 5].Value = "TimeLimit Type";
                worksheet.Cells[1, 6].Value = "State Timelimit";
                worksheet.Cells[1, 7].Value = "Federal TimeLimit";
                worksheet.Cells[1, 8].Value = "Created Date";
                worksheet.Cells[1, 9].Value = "Modified Date";

                Int32 row = 1;
                foreach (var pin in pinsToProcess)
                {
                    row++;
                    var timelimit = createdTimeLimits.ContainsKey(pin) ? createdTimeLimits[pin] : null;

                    worksheet.Cells[row, 1].Value = pin;
                    if (timelimit == null)
                    {
                        worksheet.Cells[row, 2].Value = "Skipped or failed";
                        continue;
                    }

                    worksheet.Cells[row, 2].Value = timelimit.Id;
                    worksheet.Cells[row, 3].Value = timelimit.ParticipantID;
                    worksheet.Cells[row, 3].Value = timelimit.ParticipantID;
                    worksheet.Cells[row, 4].Style.Numberformat.Format = "yyyy-MM-dd";
                    worksheet.Cells[row, 4].Formula = $"=DATE({timelimit.EffectiveMonth.Value.Year},{timelimit.EffectiveMonth.Value.Month},{timelimit.EffectiveMonth.Value.Day})";
                    worksheet.Cells[row, 5].Value = ((ClockTypes)timelimit.TimeLimitTypeId).ToString();
                    worksheet.Cells[row, 6].Value = timelimit.StateTimelimit;
                    worksheet.Cells[row, 7].Value = timelimit.FederalTimeLimit;
                    worksheet.Cells[row, 8].Value = timelimit.CreatedDate;
                    worksheet.Cells[row, 9].Value = timelimit.ModifiedDate;
                }



                var filePath = Path.Combine(outputPath, $"imported_db2_ticks.{this.Context.Date:MMMM - yyyy}.xlsx");
                var fileInfo = new FileInfo(filePath);
                outputPackage.SaveAs(fileInfo);
                this._logger.Information("Output file saved!");
            }

            return Task.CompletedTask;
            // Write Output
        }

        private async Task FixDb2CountsAsync()
        {
            Int32 taskId = 0;


            var pinsToProcess = this.GetIds<Decimal>();




            Console.WriteLine(@"Run in simulation mode?(y/n)");
            var isSimulation = Console.ReadLine().Trim().ToLower() != "n";


            var oldPinDictionary = new ConcurrentDictionary<Decimal, List<IT0459_IN_W2_LIMITS>>();
            var newPinDictionary = new ConcurrentDictionary<Decimal, List<IT0459_IN_W2_LIMITS>>();
            var pinDictionary = new ConcurrentDictionary<Decimal, List<IT0459_IN_W2_LIMITS>>();

            var queue = new ActionBlock<Decimal>(pin =>
            {
                using (var repo = this.Container.Resolve<IRepository>())
                using (var timelimitService = this.Container.Resolve<ITimelimitService>())
                using (var db2TimelimitsService = this.Container.Resolve<IDb2TimelimitService>())
                using (this._logger.BeginTimedOperation("Job Proccesing", pin.ToString()))
                {
                    var stopWatch = new Stopwatch();
                    db2TimelimitsService.IsSimulated = isSimulation;

                    try
                    {
                        stopWatch.Start();
                        var ticksToUpdate = repo.GetLatestW2LimitsMonthsForEachClockType(pin);
                        var participant = repo.ParticipantByPin(pin.ToString());
                        var timeline = timelimitService.GetTimeline(participant.Id);

                        //var newTicks = db2TimelimitsService.UpdateTicks0459(ticksToUpdate, timeline, false, "Fixing counts for WWP DB2 Write back.");
                        var newTicks = new List<IT0459_IN_W2_LIMITS>();
                        var originalDate = timeline.TimelineDate;
                        foreach (var tickToupdate in ticksToUpdate)
                        {
                            timeline.TimelineDate = DateTime.ParseExact(tickToupdate.BENEFIT_MM.ToString(), "yyyyMM", CultureInfo.InvariantCulture);
                            var newTick = db2TimelimitsService.UpdateTick0459(tickToupdate, timeline, false, "Fixing counts for WWP DB2 Write back. Round II".ToUpper());
                            if (newTick != null)
                            {
                                newTicks.Add(newTick);
                            }
                            timeline.TimelineDate = originalDate;
                        }


                        if (!isSimulation)
                        {
                            using (var scope = new TransactionScope(TransactionScopeOption.RequiresNew, new TransactionOptions() { IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted }))
                            {
                                try
                                {
                                    db2TimelimitsService.Save();
                                    scope.Complete();
                                }
                                catch (Exception e)
                                {
                                    scope.Dispose();
                                }

                            }
                        }
                        //Thread.Sleep(1000);

                        var outputTicks = new List<IT0459_IN_W2_LIMITS>();
                        outputTicks.AddRange(newTicks);
                        outputTicks.AddRange(ticksToUpdate);

                        oldPinDictionary.AddOrUpdate(pin, ticksToUpdate, (k, v) =>
                        {
                            v.AddRange(ticksToUpdate);
                            return v;
                        });

                        newPinDictionary.AddOrUpdate(pin, newTicks, (k, v) =>
                        {
                            v.AddRange(newTicks);
                            return v;
                        });

                        pinDictionary.AddOrUpdate(pin, outputTicks, (k, v) =>
                        {
                            v.AddRange(outputTicks);
                            return v;
                        });

                        stopWatch.Stop();
                    }
                    catch (Exception e)
                    {
                        this._logger.Error(e, $"Error processing job: {pin}");
                    }
                    finally
                    {
                        stopWatch.Stop();
                    }
                }
            }, new ExecutionDataflowBlockOptions { CancellationToken = this._token, MaxDegreeOfParallelism = 1, SingleProducerConstrained = true });

            foreach (var pin in pinsToProcess)
            {
                queue.Post(pin);
            }

            this._logger.Information($"Stopping Producer queue: All processing Items generated. Generated [{pinsToProcess.Count}] items to process. ");
            queue.Complete();

            await queue.Completion.ConfigureAwait(false);

            var outputPath = this.GetOutputPath();

            this._logger.Information("Processing complete, writing output file...");



            this._logger.Information("outputPath: {path}", outputPath);
            // Write Output

            do
            {
                Console.WriteLine(@"What type of run would you like?
                                    --------------------------
                                    1. Write SQL Files?
                                    2. Write Spreadsheet
                                    3. None
                ");
            } while (!Int32.TryParse(Console.ReadLine(), out taskId));

            if (taskId == 1)
            {

                var updateSql = @" DECLARE @PIN_NUM DECIMAL(10,0) = {0};
                                     Declare @BENEFIT_MM DECIMAL(6,0) = {1};
                                     DECLARE @HISTORY_SEQ_NUM smallint = {2}; 
                                     DECLARE @CLOCK_TYPE_CD char(4) =  '{3}';
                                     Declare @statement1 as varchar(max);

                                        set @statement1 = ' UPDATE PWP639TC.T0459_IN_W2_LIMITS 

                                        SET HISTORY_CD = 9 

                                        WHERE PIN_NUM = '+CONVERT(VARCHAR(10),@PIN_NUM)+'

                                        AND BENEFIT_MM = '+CONVERT(VARCHAR(10),@BENEFIT_MM)+'

                                        AND HISTORY_SEQ_NUM = '+CONVERT(VARCHAR(10),@HISTORY_SEQ_NUM)+' 

                                        AND CLOCK_TYPE_CD = '''+@CLOCK_TYPE_CD+''' 

                                        '

　

                                        print @statement1


                                        exec (@statement1) at NETWINFO_D40P_DB2;
GO";

                var insertSql = @" 
                                    declare @PIN_NUM decimal(10, 0) = {0};
                                    declare @BENEFIT_MM decimal(6, 0) = {1};
                                    declare @HISTORY_SEQ_NUM smallint = {2} ;
                                    declare @CLOCK_TYPE_CD char(4) = '{3}';
                                    declare @CRE_TRAN_CD char(8) = '{4}';
                                    declare @FED_CLOCK_IND char(1) = '{5}';
                                    declare @FED_CMP_MTH_NUM smallint = {6};
                                    declare @FED_MAX_MTH_NUM smallint = {7};
                                    declare @HISTORY_CD smallint = {8};
                                    declare @OT_CMP_MTH_NUM smallint = {9};
                                    declare @OVERRIDE_REASON_CD char(3) = '{10}';
                                    declare @TOT_CMP_MTH_NUM smallint = {11};
                                    declare @TOT_MAX_MTH_NUM smallint = {12};
                                    declare @UPDATED_DT date = '{13}';
                                    declare @USER_ID char(6) = '{14}';
                                    declare @WW_CMP_MTH_NUM smallint = {15};
                                    declare @WW_MAX_MTH_NUM smallint = {16};
                                    declare @COMMENT_TXT varchar(75) = '{17}';
                                    declare @statement1 as varchar(max);


                                    set @statement1 = ' INSERT INTO PWP639TC.T0459_IN_W2_LIMITS ( PIN_NUM , BENEFIT_MM , HISTORY_SEQ_NUM , CLOCK_TYPE_CD , CRE_TRAN_CD , 

                                    FED_CLOCK_IND , FED_CMP_MTH_NUM , FED_MAX_MTH_NUM , HISTORY_CD , 

                                    OT_CMP_MTH_NUM , OVERRIDE_REASON_CD , TOT_CMP_MTH_NUM , 

                                    TOT_MAX_MTH_NUM , UPDATED_DT , USER_ID , WW_CMP_MTH_NUM , 

                                    WW_MAX_MTH_NUM , COMMENT_TXT ) 

                                    VALUES ('+CONVERT(VARCHAR(10),@PIN_NUM)+','+CONVERT(VARCHAR(10),@BENEFIT_MM)+','+CONVERT(VARCHAR(10),@HISTORY_SEQ_NUM)+','''+@CLOCK_TYPE_CD+''','''+@CRE_TRAN_CD+''', 

                                    '''+CONVERT(VARCHAR(10),@FED_CLOCK_IND)+''' , '+CONVERT(VARCHAR(10),@FED_CMP_MTH_NUM)+' , '+CONVERT(VARCHAR(10),@FED_MAX_MTH_NUM)+' , '+CONVERT(VARCHAR(10),@HISTORY_CD)+' , 

                                    '+CONVERT(VARCHAR(10),@OT_CMP_MTH_NUM)+' , '''+CONVERT(VARCHAR(10),@OVERRIDE_REASON_CD)+''', '+CONVERT(VARCHAR(10),@TOT_CMP_MTH_NUM)+' , 

                                    '+CONVERT(VARCHAR(10),@TOT_MAX_MTH_NUM)+' , '''+CONVERT(VARCHAR(16),@UPDATED_DT)+''' , '''+@USER_ID+''' , '+CONVERT(VARCHAR(10),@WW_CMP_MTH_NUM)+' , 

                                    '+CONVERT(VARCHAR(10),@WW_MAX_MTH_NUM)+' , '''+@COMMENT_TXT+''' )

                                    '


                                    exec (@statement1) at NETWINFO_D40P_DB2;
GO";


                foreach (var pin in pinDictionary)
                {
                    StringBuilder sb = new StringBuilder();
                    var updateRecords = pin.Value.Where(x => x.HISTORY_CD == 9);
                    var insertRecords = pin.Value.Where(x => x.HISTORY_CD == 0);

                    foreach (var record in updateRecords)
                    {
                        var sql = String.Format(updateSql, record.PIN_NUM, record.BENEFIT_MM, record.HISTORY_SEQ_NUM, record.CLOCK_TYPE_CD);
                        sb.AppendLine(sql);
                        sb.AppendLine("----------");


                    }
                    foreach (var insert in insertRecords)
                    {
                        var sql = String.Format(insertSql,
                            insert.PIN_NUM,
                            insert.BENEFIT_MM,
                            insert.HISTORY_SEQ_NUM,
                            insert.CLOCK_TYPE_CD,
                            insert.CRE_TRAN_CD,
                            insert.FED_CLOCK_IND,
                            insert.FED_CMP_MTH_NUM,
                            insert.FED_MAX_MTH_NUM,
                            insert.HISTORY_CD,
                            insert.OT_CMP_MTH_NUM,
                            insert.OVERRIDE_REASON_CD,
                            insert.TOT_CMP_MTH_NUM,
                            insert.TOT_MAX_MTH_NUM,
                            insert.UPDATED_DT.ToString("yyyy-MM-dd"),
                            insert.USER_ID,
                            insert.WW_CMP_MTH_NUM,
                            insert.WW_MAX_MTH_NUM,
                            insert.COMMENT_TXT.Replace("'", "''''"));
                        sb.AppendLine(sql);
                        sb.AppendLine("----------");
                    }

                    File.WriteAllText(Path.Combine(outputPath, pin.Key + ".sql"), sb.ToString());
                    this._logger.Information($"Output file {pin}.sql saved!");

                }
            }
            else if (taskId == 2)
            {

                ExcelPackage outputPackage = new ExcelPackage();


                var worksheet = outputPackage.Workbook.Worksheets.Add("Pins");
                // Write header

                worksheet.Cells[1, 1].Value = "[PIN_NUM]";
                worksheet.Cells[1, 2].Value = "[BENEFIT_MM]";
                worksheet.Cells[1, 3].Value = "[HISTORY_SEQ_NUM]";
                worksheet.Cells[1, 4].Value = "[CLOCK_TYPE_CD]";
                worksheet.Cells[1, 5].Value = "[CRE_TRAN_CD]";
                worksheet.Cells[1, 6].Value = "[FED_CLOCK_IND]";
                worksheet.Cells[1, 7].Value = "[FED_CMP_MTH_NUM]";
                worksheet.Cells[1, 8].Value = "[FED_MAX_MTH_NUM]";
                worksheet.Cells[1, 9].Value = "[HISTORY_CD]";
                worksheet.Cells[1, 10].Value = "[OT_CMP_MTH_NUM]";
                worksheet.Cells[1, 11].Value = "[OVERRIDE_REASON_CD]";
                worksheet.Cells[1, 12].Value = "[TOT_CMP_MTH_NUM]";
                worksheet.Cells[1, 13].Value = "[TOT_MAX_MTH_NUM]";
                worksheet.Cells[1, 14].Value = "[UPDATED_DT]";
                worksheet.Cells[1, 15].Value = "[USER_ID]";
                worksheet.Cells[1, 16].Value = "[WW_CMP_MTH_NUM]";
                worksheet.Cells[1, 17].Value = "[WW_MAX_MTH_NUM]";
                worksheet.Cells[1, 18].Value = "[COMMENT_TXT]";
                var row = 1;

                //foreach (var kvp in pinDictionary.OrderBy(y => y.Key))
                var keys = newPinDictionary.Keys;
                foreach (var kvp in keys)
                {



                    //var list = kvp.Value;
                    var list = pinDictionary[kvp];

                    var sortedList = list.OrderByDescending(x => x.BENEFIT_MM).ThenByDescending(x => x.HISTORY_SEQ_NUM);
                    foreach (var tick in sortedList)
                    {
                        row++;
                        worksheet.Cells[row, 1].Value = tick.PIN_NUM;
                        worksheet.Cells[row, 1].Value = tick.PIN_NUM;
                        worksheet.Cells[row, 2].Value = tick.BENEFIT_MM;
                        worksheet.Cells[row, 3].Value = tick.HISTORY_SEQ_NUM;
                        worksheet.Cells[row, 4].Value = tick.CLOCK_TYPE_CD;
                        worksheet.Cells[row, 5].Value = tick.CRE_TRAN_CD;
                        worksheet.Cells[row, 6].Value = tick.FED_CLOCK_IND;
                        worksheet.Cells[row, 7].Value = tick.FED_CMP_MTH_NUM;
                        worksheet.Cells[row, 8].Value = tick.FED_MAX_MTH_NUM;
                        worksheet.Cells[row, 9].Value = tick.HISTORY_CD;
                        worksheet.Cells[row, 10].Value = tick.OT_CMP_MTH_NUM;
                        worksheet.Cells[row, 11].Value = tick.OVERRIDE_REASON_CD;
                        worksheet.Cells[row, 12].Value = tick.TOT_CMP_MTH_NUM;
                        worksheet.Cells[row, 13].Value = tick.TOT_MAX_MTH_NUM;
                        worksheet.Cells[row, 14].Style.Numberformat.Format = "yyyy-MM-dd";
                        worksheet.Cells[row, 14].Formula = $"=DATE({tick.UPDATED_DT.Year},{tick.UPDATED_DT.Month},{tick.UPDATED_DT.Day})";
                        worksheet.Cells[row, 15].Value = tick.USER_ID;
                        worksheet.Cells[row, 16].Value = tick.WW_CMP_MTH_NUM;
                        worksheet.Cells[row, 17].Value = tick.WW_MAX_MTH_NUM;
                        worksheet.Cells[row, 18].Value = tick.COMMENT_TXT;
                    }
                    worksheet.Cells.AutoFitColumns();
                }


                var filePath = Path.Combine(outputPath, $"corrected_t0459_records.{DateTime.Now:MM.dd.yyyy}.xlsx");
                var fileInfo = new FileInfo(filePath);
                outputPackage.SaveAs(fileInfo);
                this._logger.Information("Output file saved!");
            }
            else
            {
                this._logger.Information("Skipping file output...");

            }
        }

        //private async Task RunSimulatedBatchAgainstSpreadsheet()
        //{
        //    Boolean again = true;
        //    Int32 taskId = 0;

        //    while (again)
        //    {
        //        do
        //        {
        //            Console.WriteLine(@"What spreadsheet would you like to run?
        //                            --------------------------
        //                            1. Full (acc.xlsx)
        //                            2. Other
        //        ");
        //        } while (!Int32.TryParse(Console.ReadLine(), out taskId));

        //        List<Decimal> pinsToProcess = new List<Decimal>();

        //        var excelFile = "";

        //        // add pins to the queue
        //        if (taskId == 1)
        //        {
        //            excelFile = "acc.xlsx";
        //        }
        //        else if (taskId == 2)
        //        {
        //            do
        //            {
        //                Console.WriteLine("Enter spreadsheet Name");
        //                excelFile = Console.ReadLine();
        //            } while (!File.Exists(excelFile) || Path.GetExtension(excelFile) != ".xlsx");
        //        }

        //        this.Context.PinsToProcess.Clear();

        //        this.CreateProcessingQueue();
        //        foreach (var pin in pinsToProcess)
        //        {
        //            this.Context.PinsToProcess.Add(pin);
        //        }
        //        await this.GetPinsToProcess().ConfigureAwait(false);

        //        Console.WriteLine("Starting up producer/consumer queue");
        //        await this.StartProducerQueue().ConfigureAwait(false);
        //        await this._queue.Completion.ConfigureAwait(false);
        //        this.PinsToProcess = new AsyncCollection<Decimal>();//so we can run again!

        //        var path = DirectoryHelper.CreateIfNotExists($"SimulaterOuput/{this.Context.Date:MM.yyyy}");
        //        //Once complete, write the files output 
        //        foreach (var kvps in this.taskOutput)
        //        {
        //            var outputPath = Path.Combine(path, $"{String.Join(".", FlagEnums.GetFlagMembers(kvps.Key).Select(x => x.Name))}.txt");
        //            File.WriteAllText(
        //                outputPath
        //                , kvps.Value.ToString());
        //        }

        //        var fullOutput = this.pinOutput.OrderBy(kvp => kvp.Key).Select(kvp => { return $"{kvp.Key} - {FlagEnums.FormatFlags(kvp.Value)} "; });
        //        File.WriteAllLines(Path.Combine(path, "AllPins.txt"), fullOutput);

        //        Console.WriteLine("Run again(y/n):");
        //        again = Console.ReadLine()?.ToLower() != "n";
        //    }
        //}

        private async Task ParseBatchOutput()
        {
            var folder = "";

            DirectoryInfo directory;
            var again = false;
            var outputRow = 2;
            using (var outputPackage = new ExcelPackage())
            {
                var outputWorksheet = outputPackage.Workbook.Worksheets.Add("results");
                #region Create outputPackage Header
                outputWorksheet.Row(outputRow).Style.Fill.PatternType = ExcelFillStyle.Solid;
                outputWorksheet.Row(outputRow).Style.Fill.BackgroundColor.SetColor(Color.FromArgb(13, 215, 245));
                outputWorksheet.Row(outputRow).Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                outputWorksheet.Row(outputRow).Style.Font.Bold = true;

                outputWorksheet.Cells[outputRow, 1].Value = "Pin Number";
                outputWorksheet.Cells[outputRow, 2].Value = "Legacy Batch Timelimit";
                outputWorksheet.Cells[outputRow, 3].Value = "New Batch Timelimit Type";
                outputWorksheet.Cells[outputRow, 4].Value = "Pass/Fail";
                outputWorksheet.Cells[outputRow, 5].Value = "Expected Discrepency";
                outputWorksheet.Cells[outputRow, 6].Value = "Batch Notes / Results:";
                outputWorksheet.Cells[outputRow, 7].Value = "Last Employment Position";
                outputWorksheet.Cells[outputRow, 8].Value = "Placements";
                outputWorksheet.Cells[outputRow, 9].Value = "Previous Placement";
                outputWorksheet.Cells[outputRow, 10].Value = "First Non Cmc Employment Position";
                outputWorksheet.Cells[outputRow, 11].Value = "Had Previous Paid Placement In Month";
                outputWorksheet.Cells[outputRow, 12].Value = "Moved Directly Into Cmc";
                outputWorksheet.Cells[outputRow, 13].Value = "Has Child Born 10Mmonths After Paid w2Start";
                outputWorksheet.Cells[outputRow, 14].Value = "Cmc Should Tick Previous Placement";
                outputWorksheet.Cells[outputRow, 15].Value = "Is Alien";
                outputWorksheet.Cells[outputRow, 16].Value = "Payments Are Fully Sanctioned";
                outputWorksheet.Cells[outputRow, 17].Value = "Payments (data)";
                outputWorksheet.Cells[outputRow, 18].Value = "Placments (data)";
                outputWorksheet.Cells[outputRow, 19].Value = "Alien Statues (data)";
                outputWorksheet.Cells[outputRow, 20].Value = "Assistance Group (data)";

                #endregion

                do
                {
                    Console.WriteLine("What directory do you want to process?");
                    var path = Console.ReadLine().Trim('\"');

                    directory = new DirectoryInfo(path);
                    if (!directory.Exists)
                    {
                        Console.WriteLine("Doesn't exisist");
                    }
                    else
                    {
                        try
                        {
                            var files = directory.GetFiles("*.xlsx", SearchOption.AllDirectories);


                            for (var index = 0; index < files.Length; index++)
                            {
                                Console.Write($"Proccessing item {index + 1} / {files.Length}");

                                var package = new ExcelPackage();
                                var file = files[index];
                                using (var fs = file.OpenRead())
                                {
                                    package.Load(fs);
                                }

                                var row = 3;
                                String pin;
                                var worksheet = package.Workbook.Worksheets[1];

                                var pinTasks = new List<Task>();
                                do
                                {
                                    pin = worksheet.Cells[row, 1].GetValue<String>();
                                    string status = worksheet.Cells[row, 4].GetValue<String>();
                                    if (!pin.IsNullOrWhiteSpace() || status == "F")
                                    {
                                        var dPin = Decimal.Parse(pin);

                                        // outputRow++;
                                        // outputWorksheet.Cells[outputRow, 1].Value = worksheet.Cells[row, 1].Value;
                                        // outputWorksheet.Cells[outputRow, 2].Value = worksheet.Cells[row, 2].Value;
                                        // outputWorksheet.Cells[outputRow, 3].Value = worksheet.Cells[row, 3].Value;
                                        // outputWorksheet.Cells[outputRow, 4].Value = worksheet.Cells[row, 4].Value;

                                        var itemToProcess = await this.GetQueueItemAsync(dPin).ConfigureAwait(false);
                                        if (itemToProcess.Status.GetValueOrDefault() == JobStatus.ReadyForJobProcessing)
                                        {
                                            await this.ProcessItem(itemToProcess).ConfigureAwait(false);




                                            outputRow++;
                                            outputWorksheet.Cells[outputRow, 1].Value = worksheet.Cells[row, 1].Value;
                                            outputWorksheet.Cells[outputRow, 2].Value = worksheet.Cells[row, 2].Value;
                                            outputWorksheet.Cells[outputRow, 3].Value = worksheet.Cells[row, 3].Value;
                                            outputWorksheet.Cells[outputRow, 4].Value = worksheet.Cells[row, 4].Value;

                                            var timeline = itemToProcess.Timeline;
                                            RuleContext ruleContext;
                                            if (!this.pinOutput.TryGetValue(dPin, out ruleContext))
                                            {
                                                outputWorksheet.Cells[outputRow, 6].Value = "Failed to evalute pin";
                                            }
                                            else
                                            {
                                                outputWorksheet.Cells[outputRow, 5].Value = "";
                                                outputWorksheet.Cells[outputRow, 6].Value = "";
                                                outputWorksheet.Cells[outputRow, 7].Value = this.FormatObjectForOutput(ruleContext.LastEmploymentPosition);
                                                outputWorksheet.Cells[outputRow, 8].Value = "-";
                                                outputWorksheet.Cells[outputRow, 9].Value = this.FormatObjectForOutput(ruleContext.PreviousPlacement);
                                                outputWorksheet.Cells[outputRow, 10].Value = this.FormatObjectForOutput(ruleContext.FirstNonCmcEmploymentPosition);
                                                outputWorksheet.Cells[outputRow, 11].Value = this.FormatObjectForOutput(ruleContext.HadPreviousPaidPlacementInMonth);
                                                outputWorksheet.Cells[outputRow, 12].Value = this.FormatObjectForOutput(ruleContext.MovedDirectlyIntoCmc);
                                                outputWorksheet.Cells[outputRow, 13].Value = this.FormatObjectForOutput(ruleContext.HasChildBorn10monthsAfterPaidw2Start);
                                                outputWorksheet.Cells[outputRow, 14].Value = this.FormatObjectForOutput(ruleContext.CmcShouldTickPreviousPlacement);
                                                outputWorksheet.Cells[outputRow, 15].Value = this.FormatObjectForOutput(ruleContext.IsAlien);
                                                outputWorksheet.Cells[outputRow, 16].Value = this.FormatObjectForOutput(ruleContext.PaymentsAreFullySanctioned);
                                                outputWorksheet.Cells[outputRow, 17].Value = this.FormatObjectForOutput(itemToProcess.Payments);
                                                outputWorksheet.Cells[outputRow, 18].Value = this.FormatObjectForOutput(timeline.Placements.SelectMany(x => x.Value));
                                                outputWorksheet.Cells[outputRow, 19].Value = this.FormatObjectForOutput(itemToProcess.AlienStatus);
                                                outputWorksheet.Cells[outputRow, 20].Value = this.FormatObjectForOutput(itemToProcess.AssitanceGroupMembers);
                                            }
                                        }
                                    }
                                    row++;

                                } while (!pin.IsNullOrWhiteSpace());

                                Console.SetCursorPosition(0, Console.CursorTop);
                            }
                        }
                        catch (Exception e)
                        {
                            Console.WriteLine(e);
                        }
                    }


                    Console.WriteLine("Keep Going?");
                    again = Console.ReadLine()?.ToLower() != "n";
                } while (again);
                var outputPath = this.GetOutputPath();
                outputWorksheet.Cells.AutoFitColumns();

                outputPackage.SaveAs(new FileInfo(Path.Combine(outputPath, "parsed_batch_output.xlsx")));
            }
        }

        private string FormatObjectForOutput<T>(T obj)
        {
            String output = null;
            var sb = new StringBuilder();

            if (obj is IEnumerable<Placement>)
            {
                var placements = ((IEnumerable<Placement>)obj).ToList().OrderByDescending(x => x.DateRange.End);
                sb.AppendLine("placements:");

                foreach (var placement in placements)
                {
                    sb.AppendLine(this.FormatObjectForOutput(placement));
                }
            }
            else if (obj is Placement)
            {
                var placement = obj as Placement;
                sb.AppendLine($"{placement.PlacementCode} : {placement.DateRange.Start:d}-{placement.DateRange.End:d} ");
            }
            else if (obj is IEnumerable<AlienStatus>)
            {
                var alienStatuses = ((IEnumerable<AlienStatus>)obj).ToList().OrderByDescending(x => x?.DateRange.End);
                sb.AppendLine("Alien status:");
                foreach (var alienStatus in alienStatuses)
                {
                    sb.AppendLine($"{alienStatus.AlienStatusCode} : {alienStatus.DateRange.Start:d}-{alienStatus.DateRange.End:d} ");
                }
            }
            else if (obj is IEnumerable<Payment>)
            {
                var payments = ((IEnumerable<Payment>)obj).OrderByDescending(x => x.EffectivePaymentMonth).ThenByDescending(x => x.PayPeriodEndDate);
                sb.AppendLine("payments:");
                foreach (var payment in payments)
                {
                    sb.AppendLine($"Payment Month:{payment.EffectivePaymentMonth.AddMonths(-1):MM-yyyy} Full Sanction: {payment.SanctionedToZero()}. AdjustedNetAmount: {payment.AdjustedNetAmount}. Pay Period Begin Date: {payment.PayPeriodBeginDate:d}. Pay Period End Date: {payment.PayPeriodEndDate:d} ");
                }
            }
            else if (obj is IEnumerable<AssistanceGroupMember>)
            {
                var agMembers = (obj as IEnumerable<AssistanceGroupMember>);
                sb.AppendLine("Parents:");
                foreach (var agMem in agMembers.Where(x => !x.IsChild()))
                {
                    sb.AppendLine($"Relationship: {agMem.RELATIONSHIP}. Age: {agMem.AGE}. pin: {agMem.PinNumber}. Spouse: {agMem.IsSpouse()}. Alien Statuses: {FormatObjectForOutput(agMem.AlienStatuses)}.");
                }

                sb.AppendLine("Children:");
                foreach (var agMem in agMembers.Where(x => x.IsChild()))
                {
                    sb.AppendLine($"Relationship: {agMem.RELATIONSHIP}. Age: {agMem.AGE}. pin: {agMem.PinNumber}. Spouse: {agMem.IsSpouse()}. Alien Statuses: {FormatObjectForOutput(agMem.AlienStatuses)}.");
                }
            }
            else if (typeof(T).IsGenericType && typeof(T).GetGenericTypeDefinition() == typeof(Nullable<>))
            {
                if (obj == null)
                {
                    sb.AppendLine($"[No Value]");
                }
                else
                {
                    var tail = this.FormatObjectForOutput(Convert.ChangeType(obj, Nullable.GetUnderlyingType(typeof(T))));
                    sb.AppendLine(tail);
                }
            }



            output = sb.ToString();
            return output.IsNullOrWhiteSpace() ? obj?.ToString() : output;
        }



        private async Task RunSimulatedBatchJob()
        {
            Boolean again = true;
            Int32 taskId = 0;

            while (again)
            {

                do
                {
                    Console.WriteLine(@"What type of run would you like make?
                                                --------------------------
                                                1. Full
                                                2. File / Enter pins

                            ");
                } while (!Int32.TryParse(Console.ReadLine(), out taskId));

                List<Decimal> pinsToProcess = new List<Decimal>();

                switch (taskId)
                {
                    case 1:
                        await this.GetPinsToProcess().ConfigureAwait(false);
                        pinsToProcess = this.PinsToProcess.GetConsumingEnumerable().ToList();
                        break;
                    case 2:
                        pinsToProcess = this.GetIds<Decimal>();
                        break;
                }


                var pinBatches = new Dictionary<Int32, List<Decimal>>();

                if (pinsToProcess.Count > 500)
                {
                    Int32 batchSize;
                    Console.WriteLine("Whoa! thats a lot! I'm gonna split these up into a couple runs for ya :)");

                    Console.WriteLine("200?");
                    if (!Int32.TryParse(Console.ReadLine(), out batchSize))
                    {
                        batchSize = 200;
                    }


                    pinBatches = pinsToProcess.Select((x, i) => new { Index = i, Value = x })
                        .GroupBy(x => x.Index / batchSize)
                        .ToDictionary(x => x.Key, x => x.Select(y => y.Value).ToList());
                    Console.WriteLine($"created {pinBatches.Count} batches of size: {batchSize}?");

                }
                else
                {
                    pinBatches = new Dictionary<Int32, List<Decimal>>() { { 1, pinsToProcess } };
                }

                var outputPath = this.GetOutputPath();

                foreach (var pinBatch in pinBatches)
                {
                    this.CreateProcessingQueue();
                    //Console.WriteLine($"Processing batch {pinBatch.Key} / {pinBatches.Count}. Count: {pinBatch.Value.Count} ");
                    //this.Context.inputPins.Clear();
                    //foreach (var pin in pinBatch.Value)
                    //{
                    //    this.Context.inputPins.Add(pin);
                    //}
                    //await this.GetPinsToProcess().ConfigureAwait(false);

                    //Console.WriteLine("Starting up producer/consumer queue");
                    //var producerCompletedTask = this.StartProducerQueue();
                    //await Task.WhenAll(producerCompletedTask, this._queue.Completion).ConfigureAwait(false);
                    //this.PinsToProcess = new AsyncCollection<Decimal>();//so we can run again!

                    ////Once complete, write the files output 
                    //foreach (var kvps in this.taskOutput)
                    //{
                    //    var filePath = Path.Combine(path, $"{String.Join(".", FlagEnums.GetFlagMembers(kvps.Key).Select(x => x.Name))}.txt");
                    //    File.WriteAllText(
                    //        filePath
                    //        , kvps.Value.ToString());
                    //}

                    foreach (var pin in pinBatch.Value)
                    {
                        try
                        {
                            var itemToProcess = await this.GetQueueItemAsync(pin).ConfigureAwait(false);
                            if (itemToProcess.Status.GetValueOrDefault() == JobStatus.ReadyForJobProcessing)
                            {
                                await this.ProcessItem(itemToProcess).ConfigureAwait(false);
                            }
                        }
                        catch (Exception e)
                        {
                            Console.WriteLine($"Failed to process pin: {pin}");
                            Console.WriteLine(e.Message);
                        }

                    }

                    var writeOutput = false;
                    Console.WriteLine("Write output file(s)? (y/n):");
                    writeOutput = Console.ReadLine().Trim().ToLower().Equals("y");
                    if (writeOutput)
                    {
                        Console.WriteLine("Writing Results.xlsx output...");

                        Console.WriteLine("Compare against legacy batch? (y/n):");
                        var generateCompare = Console.ReadLine().Trim().ToLower().Equals("y");

                        String comparisionFile;

                        if (generateCompare)
                        {
                            comparisionFile = await this.CreateExpectedOutputFromLegacyBatch(pinBatch.Value, pinBatch.Key).ConfigureAwait(false);
                        }
                        else
                        {
                            Console.WriteLine("Expected results spreedsheet? (leave blank to skip comparing):");
                            comparisionFile = Console.ReadLine();
                        }


                        var outputPackage = new ExcelPackage();
                        if (!String.IsNullOrEmpty(comparisionFile))
                        {
                            this.ParseExpectedOutput(comparisionFile, true);

                            using (var file = File.OpenRead(comparisionFile))
                            {
                                outputPackage.Load(file);
                            }
                        }

                        var resultSheet = outputPackage.Workbook.Worksheets[1];

                        var rowNum = 2;

                        while (!resultSheet.Cells[rowNum, 1].GetValue<String>().IsNullOrWhiteSpace())
                        {

                            var pin = resultSheet.Cells[rowNum, 1].GetValue<String>();
                            if (pin.IsNullOrWhiteSpace())
                            {
                                continue;
                            }

                            Decimal dPin;
                            if (Decimal.TryParse(pin, out dPin))
                            {
                                RuleContext context;
                                ClockTypes actualResult;
                                // Find the matching pin in the results
                                this.pinOutput.TryGetValue(dPin, out context);
                                actualResult = context == null ? ClockTypes.None : context.TimelimitType.GetValueOrDefault();

                                ClockTypes expectedClockType = this.expectedPinOutput.Where(kvp => kvp.Value != null && kvp.Value.Contains(dPin)).Select(x => x.Key).FirstOrDefault();

                                if (expectedClockType.CommonFlags(ClockTypes.TEMP) == ClockTypes.TEMP)
                                {
                                    var hasTemp = actualResult.HasAnyFlags(ClockTypes.TEMP);
                                    var hasAllOtherFlags = expectedClockType.RemoveFlags(ClockTypes.TEMP).HasAllFlags(actualResult.RemoveFlags(ClockTypes.TEMP));
                                    var passed = hasTemp && hasAllOtherFlags;
                                    resultSheet.Cells[rowNum, 4].Value = passed ? "P" : "F";
                                }
                                else if (expectedClockType == actualResult)
                                {
                                    resultSheet.Cells[rowNum, 4].Value = "P";
                                }
                                else
                                {
                                    resultSheet.Cells[rowNum, 4].Value = "F";
                                }

                                resultSheet.Cells[rowNum, 3].Value = FlagEnums.FormatFlags(actualResult);

                                if (resultSheet.Cells[rowNum, 4].GetValue<String>() == "F")
                                {
                                    resultSheet.Cells[rowNum, 4].Style.Font.Bold = true;
                                    resultSheet.Cells[rowNum, 4].Style.Font.Color.SetColor(System.Drawing.Color.FromArgb(100, 244, 67, 54));
                                    resultSheet.Cells[rowNum, 1].Style.Font.Bold = true;
                                    resultSheet.Cells[rowNum, 1].Style.Font.Color.SetColor(System.Drawing.Color.FromArgb(100, 244, 67, 54));
                                }
                                else
                                {
                                    resultSheet.Cells[rowNum, 4].Style.Font.Color.SetColor(System.Drawing.Color.FromArgb(100, 3, 169, 244));
                                    resultSheet.Cells[rowNum, 1].Style.Font.Color.SetColor(System.Drawing.Color.FromArgb(100, 3, 169, 244));
                                }

                            }
                            rowNum++;
                        }
                        //get row with pin number

                        outputPackage.SaveAs(new FileInfo(Path.Combine(outputPath, ($"{ApplicationContext.AppEnvironment}_batch_{pinBatch.Key + 1}_results_{this.Context.Date:MMMM-yyyy}.xlsx").ToLower())));
                    }

                    Console.WriteLine("Writing Results completed...");
                    Console.WriteLine("Keep Going?");
                    again = Console.ReadLine()?.ToLower() != "n";
                    if (!again)
                    {
                        Console.WriteLine("Quitting...");
                        break;
                    }
                }






                Console.WriteLine("Run again(y/n):");
                again = Console.ReadLine()?.ToLower() != "n";
            }
        }

        public async Task<String> CreateExpectedOutputFromLegacyBatch(List<Decimal> pinBatchValue = null, Int32? batchRun = null)
        {
            var dDate = Decimal.Parse(this.Context.Date.ToStringMonthYearComposite());

            this._logger.Information($"Getting legacy ticks for date: {this.Context.Date:MMMM - yyyy}");
            List<T0459_IN_W2_LIMITS_SEP> legacyticks;
            using (var dbContext = this.Container.Resolve<WwpEntities>())
            {
                var query = dbContext.T0459_IN_W2_LIMITS_SEP.Where(x => x.BENEFIT_MM == dDate && x.CRE_TRAN_CD.Trim() == "PWCAEP11");
                if (pinBatchValue?.Any() == true)
                {
                    query = query.Where(x => pinBatchValue.Contains(x.PIN_NUM));
                }
                legacyticks = await query.OrderBy(x => x.CLOCK_TYPE_CD).ThenBy(x => x.PIN_NUM).ToListAsync().ConfigureAwait(false);

            }
            this._logger.Information($"Found {legacyticks.Count} legacy ticks for date: {this.Context.Date:MMMM - yyyy}");



            var excelPackage = new ExcelPackage();
            var row = 3;

            using (var file = File.Open("results_spreadsheet_template.xlsx", FileMode.Open))
            {
                excelPackage.Load(file);
            }
            var worksheet = excelPackage.Workbook.Worksheets[1];

            this._logger.Information("Processing...");

            for (var index = 0; index < legacyticks.Count; index++)
            {
                Console.Write($"Proccessing item {index + 1} / {legacyticks.Count}");
                var tick = legacyticks[index];

                worksheet.Cells[row, 1].Value = tick.PIN_NUM;
                ClockTypes clockType;
                Enum.TryParse(tick.CLOCK_TYPE_CD, out clockType);
                clockType = clockType.CombineFlags(ClockTypes.State);
                if (tick.FED_CLOCK_IND == "Y")
                {
                    clockType = clockType.CombineFlags(ClockTypes.Federal);
                }

                worksheet.Cells[row, 2].Value = FlagEnums.FormatFlags(clockType);
                Console.SetCursorPosition(0, Console.CursorTop);
                row++;
            }
            this._logger.Information("Writing ouptut...");

            //var outputPath = this.GetOutputPath();
            var fileName = "output\\Production_results_temp_spreadsheet_template.xlsx";//Path.Combine(outputPath, ApplicationContext.AppEnvironment + "_results_"+batchRun.GetValueOrDefault(1)+"_spreadsheet_template.xlsx");
            excelPackage.SaveAs(new FileInfo(fileName));
            this._logger.Information("Writing Complete!");
            return fileName;

        }

        public void ParseExpectedOutput(String comparisonFile, Boolean overwrite)
        {
            if (!overwrite && this.expectedPinOutput.Count > 0)
            {
                return;
            }
            // Load expected results
            ExcelPackage expcetedResultsExcelPackage = new ExcelPackage();
            using (var file = File.Open(comparisonFile, FileMode.Open))
            {
                expcetedResultsExcelPackage.Load(file);
            }
            var worksheet = expcetedResultsExcelPackage.Workbook.Worksheets[1];
            var colNum = 1;
            var rowVal = 3;

            while (true)
            {
                var sPin = worksheet.Cells[rowVal, 1]?.Value?.ToString();
                var sClockTypes = worksheet.Cells[rowVal, 2]?.Value?.ToString();
                if (sPin.IsNullOrWhiteSpace() || sClockTypes.IsNullOrWhiteSpace())
                {
                    break;
                }

                Decimal pinNumber;
                ClockTypes clockTypes;
                try
                {
                    clockTypes = FlagEnums.ParseFlags<ClockTypes>(sClockTypes);
                }
                catch (Exception e)
                {
                    Console.WriteLine($"Couldn't clock type: {sPin}. Cell[{ worksheet.Cells[rowVal, 1].Address}]");
                    continue;
                }

                try
                {
                    pinNumber = Decimal.Parse(sPin);
                }
                catch (Exception e)
                {
                    Console.WriteLine($"Couldn't parse pin number: {sPin}. Cell[{ worksheet.Cells[rowVal, 1].Address}]");
                    continue;
                }

                this.expectedPinOutput.AddOrUpdate(clockTypes, new List<Decimal>() { pinNumber }, (k, v) =>
                {
                    v.Add(pinNumber);
                    return v;
                });
                rowVal++;
            }

            //while (true)
            //{
            //    var headerCell = worksheet.Cells[headerRow.Row, colNum];
            //    var sClockTypes = headerCell.GetValue<String>();
            //    if (sClockTypes.IsNullOrWhiteSpace())
            //    {
            //        break;
            //    }

            //    var clockTypes = FlagEnums.ParseFlags<ClockTypes>(sClockTypes);

            //    var rowVal = 2;
            //    while (true)
            //    {

            //        var cell = worksheet.Cells[rowVal, colNum];
            //        if (cell.GetValue<String>().IsNullOrWhiteSpace())
            //        {
            //            break;
            //        }
            //        var cellValues = (cell.GetValue<String>() ?? "").Split(',', ';', '/');
            //        foreach (var cellValue in cellValues)
            //        {

            //            decimal pinNumber;
            //            if (Decimal.TryParse(cellValue, out pinNumber))
            //            {
            //                this.expectedPinOutput.AddOrUpdate(clockTypes, new List<Decimal>() { pinNumber }, (k, v) =>
            //                {
            //                    v.Add(pinNumber);
            //                    return v;
            //                });
            //            }
            //            else
            //            {
            //                Console.WriteLine($"Couldn't parse pin number: {cellValue}. Cell[{cell.Address}]");
            //            }
            //        }

            //        rowVal++;
            //    }
            //    colNum++;
            //}
        }

        //private async Task CleanTimelimitsTask()
        //{
        //    List<TimeLimit> timelimitsToClean = new List<TimeLimit>();
        //    DateTime monthToClean;
        //    do
        //    {
        //        Console.WriteLine("What month would you like to clean? MM/yyyy:");
        //    } while (!DateTime.TryParseExact(Console.ReadLine(), "MM/yyyy", CultureInfo.InvariantCulture, DateTimeStyles.AssumeLocal, out monthToClean));


        //    Console.WriteLine("Clean All?");
        //    var cleanAll = Console.ReadLine()?.ToLower() != "n";

        //    using (var dbContext = this.dbContextFactory())
        //    {
        //        if (!cleanAll)
        //        {
        //            var pinsToClean = this.GetIds<Int32>();
        //            timelimitsToClean = await dbContext.TimeLimits.Where(a => pinsToClean.Contains(a.ParticipantID.GetValueOrDefault()) && a.EffectiveMonth.HasValue && DbFunctions.DiffMonths(a.EffectiveMonth.Value, monthToClean) == 0).ToListAsync(this._token);
        //        }
        //        else
        //        {
        //            timelimitsToClean = await dbContext.TimeLimits.Where(a => !a.IsDeleted && a.EffectiveMonth.HasValue && DbFunctions.DiffMonths(a.EffectiveMonth.Value, monthToClean) == 0).ToListAsync(this._token);
        //        }

        //        var pins = timelimitsToClean.Select(x => x.ParticipantID).Distinct();
        //        Console.WriteLine($"Found {pins.Count()} pins and {timelimitsToClean.Count}");

        //        Console.WriteLine($"Confirm Delete of {timelimitsToClean.Count} records?(y/n)");
        //        var shouldDelete = Console.ReadLine().Trim().ToLower() == "y";

        //        if (shouldDelete)
        //        {
        //            foreach (var model in timelimitsToClean)
        //            {
        //                model.IsDeleted = true;
        //            }

        //            await dbContext.SaveChangesAsync(this._token);
        //        }
        //    }
        //    Console.WriteLine($"Deleted of {timelimitsToClean.Count} records");
        //}


        private List<Int64> GetIdsFromFile()
        {
            Boolean again = false;
            List<Int64> ids = new List<Int64>();
            var filePath = "";

            do
            {
                // add pins to the queue
                do
                {
                    Console.WriteLine(@"What file would you like to run (pins.xlsx)?:");
                    filePath = Console.ReadLine().Trim('\"');
                    filePath = String.IsNullOrWhiteSpace(filePath) ? "pins.xlsx" : filePath;
                } while (!File.Exists(filePath) || (Path.GetExtension(filePath) != ".xlsx" && Path.GetExtension(filePath) != ".txt"));

                try
                {
                    if ((Path.GetExtension(filePath) == ".xlsx"))
                    {
                        ExcelPackage idsPackage = new ExcelPackage();
                        using (var file = File.Open(filePath, FileMode.Open))
                        {
                            idsPackage.Load(file);
                        }
                        var worksheet = idsPackage.Workbook.Worksheets[1];
                        var row = 1;

                        var parseErrorCount = 0;
                        string cellValue = null;
                        do
                        {

                            cellValue = worksheet.Cells[row, 1].GetValue<string>();
                            Int64 currentId = 0;
                            if (Int64.TryParse(cellValue, out currentId))
                            {
                                ids.Add(currentId);
                                parseErrorCount = 0;
                            }
                            else
                            {
                                parseErrorCount++;
                            }
                            row++;
                        } while (parseErrorCount < 5);


                    }
                    else
                    {
                        var lines = File.ReadAllLines(filePath);
                        foreach (var line in lines)
                        {
                            var sPins = line.Trim().Replace(" ", "").Split(',', ';', '/');
                            foreach (var sPin in sPins)
                            {
                                Int64 iPin;
                                if (Int64.TryParse(sPin, out iPin))
                                {
                                    ids.Add(iPin);
                                }
                            }
                        }
                    }
                }
                catch (Exception e)
                {
                    this._logger.Error(e, $"Error trying to process file: {filePath}");
                    Console.WriteLine("Run again(y/n):");
                    again = Console.ReadLine()?.ToLower() != "n";
                }
                this._logger.Information("Found {count} Ids", ids.Count);

            } while (again);
            return ids;

        }

        private List<Int64> GetIdsFromConsole()
        {
            var ids = new List<Int64>();
            Console.WriteLine("Enter Id's numbers(',' seperated)?:");
            var pinsStrings = Console.ReadLine().Replace(" ", "").Split(',');
            foreach (var sId in pinsStrings)
            {
                Int64 id;
                if (Int64.TryParse(sId, out id))
                {
                    ids.Add(id);
                }
            }
            return ids;
        }

        public List<T> GetIds<T>() where T : IConvertible
        {
            var taskId = 0;
            do
            {
                Console.WriteLine(@"What type of run would you like?
                                    --------------------------
                                    1. File
                                    2. Enter Pin(s)
                ");
            } while (!Int32.TryParse(Console.ReadLine(), out taskId));


            List<T> pinsToProcess;
            if (taskId == 1)
            {
                pinsToProcess = this.GetIdsFromFile().Select(x => (T)Convert.ChangeType(x, typeof(T))).ToList();

            }
            else
            {
                pinsToProcess = this.GetIdsFromConsole().Select(x => (T)Convert.ChangeType(x, typeof(T))).ToList();
            }
            return pinsToProcess;
        }

        protected override Task CreateJobAsync(IBatchTask task)
        {
            task.ExternalJobId = Guid.NewGuid().ToString("N");
            task.JobId = new Random().Next(100000, Int32.MaxValue);
            return Task.CompletedTask;
        }
        protected override Task UpdateJobStatus(EvaluateTimelimitsTaskContext JobId, JobStatus status)
        {
            //TODO: Just log to console if we a simulating
            this._logger.Debug($"Completed job [{JobId}] with status: {status.ToString()}");
            return Task.CompletedTask;
        }

        protected override void LogJobAsProccessed(IBatchTask queuedItem, IEnumerable<EvaluateTimelimitsTaskResult> results, TimeSpan stopWatchElapsed)
        {

            foreach (var result in results)
            {
                this.pinOutput.TryAdd(result.PinNumber, result.RuleContext);
                this.taskOutput.AddOrUpdate(result.RuleContext.TimelimitType.GetValueOrDefault(), new StringBuilder(result.PinNumber.ToString() + "\n"), (c, s) =>
                {
                    s.AppendLine(result.PinNumber.ToString());
                    return s;
                });

                foreach (var opcTick in result.OtherParentData)
                {
                    this.pinOutput.TryAdd(opcTick.parent.PinNumber.GetValueOrDefault(), new RuleContext() { TimelimitType = opcTick.TimelimitType, EvaluationMonth = result.RuleContext.EvaluationMonth, IsAlien = result.RuleContext.IsAlien, PaymentsAreFullySanctioned = result.RuleContext.PaymentsAreFullySanctioned, ShouldCreateOpcTicks = result.RuleContext.ShouldCreateOpcTicks });
                    this.taskOutput.AddOrUpdate(opcTick.TimelimitType, new StringBuilder(opcTick.parent.PinNumber.ToString() + Environment.NewLine), (c, s) =>
                    {
                        s.AppendLine(opcTick.parent.PinNumber.ToString());
                        return s;
                    });
                }
            }
        }

        private string GetOutputPath()
        {
            var index = 1;

            if (!Directory.Exists("output"))
            {
                Directory.CreateDirectory("output");
            }

            var outputDirList = Directory.GetDirectories("output", "*", SearchOption.TopDirectoryOnly);
            if (outputDirList.Any())
            {
                var outputDirIndexs = outputDirList.Select(x =>
                {
                    Int32 i = 0;
                    var sIndex = x.TrimEnd().Split('-').Last();
                    Int32.TryParse(sIndex, out i);
                    return i;
                }).ToList();

                var maxIndex = outputDirIndexs.Any() ? outputDirIndexs.Max() : 0;

                // TODO: Archive old one's

                index = maxIndex + 1;
            }

            var di = Directory.CreateDirectory($"output/run-{index}");
            return di.FullName;

        }
    }

    public class JsonDbConnection
    {
        public String server { get; set; }
        public String instance { get; set; }
        public String user { get; set; }
        public String auth { get; set; }
    }
}