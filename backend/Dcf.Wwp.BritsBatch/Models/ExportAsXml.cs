using System;
using System.Data;
using System.IO;
using System.Xml.Linq;
using Dcf.Wwp.BritsBatch.Interfaces;
using log4net;

namespace Dcf.Wwp.BritsBatch.Models
{
    /// <summary>
    /// Exports a Results DataTable to an XML file
    /// </summary>
    public class ExportAsXml : IExportable
    {
        #region Properties

        private readonly IBatchJobOptions _options;
        private readonly ILog             _log;
        private          byte[]           _byteArray; // the data ;)

        public string FileName    { get; private set; }
        public string ContentType => "application/xml";

        #endregion

        #region Methods

        public ExportAsXml(IBatchJobOptions options, ILog log)
        {
            _options      = options;
            _log          = log;
        }

        public void Export(DataTable dataTable)
        {
            FileName = $"{AppDomain.CurrentDomain.BaseDirectory}\\{_options.OutPath}\\{_options.JobName}\\{_options.JobName}_results_{_options.RunTime:MM-dd-yyyy-hh-mm-sstt}_{_options.SubGuid}.xml";

            if (dataTable == null)
            {
                _log.Error($"\tArgument {nameof(dataTable)} DataTable cannot be null");

                throw new ArgumentNullException($"Argument {nameof(dataTable)} DataTable cannot be null");
            }

            var dirName = Path.GetDirectoryName(FileName);

            var iNumRows = dataTable.Rows.Count;
            var iNumCols = dataTable.Columns.Count;

            _log.Info($"Generating output for {_options.JobName} as {_options.ExportFormat}" );
            _log.Debug($"\tReceived ({iNumRows}) rows from {_options.JobName}");

            var beginDataRow = $"BEGIN DATA ({iNumRows} rows) ".PadRight(11, ' ').PadRight(20, '*') + (_options.IsSimulation ? "**** SIMULATION ****" : string.Empty);
            var endDataRow   = "END DATA ".PadRight(11, ' ').PadRight(40, '*');

            _log.Info("");
            _log.Info(beginDataRow);

            object[] xaAttributes =
            {
                new XAttribute("DateGenerated", _options.RunTime),
                new XAttribute("NumberOfPins",  iNumRows),
                new XAttribute("IsSimulation", _options.IsSimulation)
            };

            var xDoc = new XDocument(
                                     new XDeclaration("1.0", "utf-8", "yes"),
                                     new XComment("Generated by Dcf.Wwp.BritsBatch"), // pass in jobname or IOptions.
                                     new XElement($"{_options.JobName}", xaAttributes)
                                    );

            for (var nRow = 0; nRow < iNumRows; nRow++)
            {
                var xe = new XElement(dataTable.Columns[0].ColumnName, dataTable.Rows[nRow][0]);

                for (var nCol = 1; nCol < iNumCols; nCol++)
                {
                    xe.Add(new XAttribute(dataTable.Columns[nCol].ColumnName, dataTable.Rows[nRow][nCol]));
                }

                xDoc.Root?.Add(xe);

                _log.Info(xe);
            }

            using (var ms = new MemoryStream())
            {
                xDoc.Save(ms);
                ms.Flush();
                ms.Seek(0, SeekOrigin.Begin);
                _byteArray = ms.ToArray();
            }

            if (!Directory.Exists(dirName))
            {
                Directory.CreateDirectory(dirName ?? throw new InvalidOperationException());
            }

            _log.Info(endDataRow);
            _log.Info("");

            _log.Info($"Writing output to {FileName}");
            _log.Debug($"\tPath: {Directory.GetParent(FileName)}");
            _log.Debug($"\tFile: {Path.GetFileName(FileName)}");

            try
            {
                File.WriteAllBytes(FileName, _byteArray);
            }
            catch (Exception ex)
            {
                _log.Error(ex.Message);

                throw;
            }
        }

        #endregion
    }
}
