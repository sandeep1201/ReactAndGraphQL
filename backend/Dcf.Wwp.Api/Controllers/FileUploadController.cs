using System;
using System.Linq;
using Microsoft.AspNetCore.Mvc;
using Dcf.Wwp.Api.Library.Interfaces;
using Dcf.Wwp.Api.Middleware;
using DCF.Common.Logging;
using Microsoft.AspNetCore.Cors;
using Newtonsoft.Json;
using static System.String;

namespace Dcf.Wwp.Api.Controllers
{
    [EnableCors("AllowAll")]
    [Route("api/file-upload")]
    public class FileUploadController : Controller
    {
        #region Properties

        private readonly IEmployabilityPlanDomain _employabilityPlanDomain;
        private readonly IApiUser                 _apiUser;
        private readonly ILog                     _logger = LogProvider.GetLogger(typeof(FileUploadController));

        #endregion

        public FileUploadController(IEmployabilityPlanDomain employabilityPlanDomain, IApiUser apiUser)
        {
            _employabilityPlanDomain = employabilityPlanDomain;
            _apiUser                 = apiUser;
        }

        /// <summary>
        /// Retrieves all CM Ids for a PIN
        /// </summary>
        /// <param name="pin"></param>
        /// <returns></returns>
        [HttpGet("documents/{pin}")]
        public IActionResult GetDocumentsForPin(string pin)
        {
            if (!_apiUser.IsAuthenticated)
            {
                _logger.Warn("API key not valid, returning 401.");
                return Unauthorized();
            }

            try
            {
                if (IsNullOrEmpty(pin))
                {
                    _logger.Warn("PIN cannot be empty.");
                    return BadRequest("PIN cannot be empty.");
                }

                if (!ModelState.IsValid)
                {
                    _logger.Warn("EP Documents Request ModelState is invalid.");
                    return BadRequest(FileUploadProblemDetails.CreateBadRequestDetails(ModelState));
                }

                var jsonRequest = JsonConvert.SerializeObject(pin);
                _logger.Info($"REST WS EP Documents Request Msg: {jsonRequest}");

                var contract = _employabilityPlanDomain.GetDocumentsForPin(pin);
                return Ok(contract);
            }
            catch (InvalidOperationException e)
            {
                _logger.ErrorException("EP Documents Request InvalidOperationException.", e);
                return StatusCode(400, FileUploadProblemDetails.CreateBadRequestDetails(e.Message));
            }
            catch (Exception e)
            {
                _logger.ErrorException("EP Documents Request Exception.", e);
                return StatusCode(500, FileUploadProblemDetails.CreateServerErrorDetails(e.Message));
            }
        }
    }

    #region Problem Details code taken from .NET Core 2.1 code... TODO: refactore this once we move to 2.1+

    /// <summary>
    /// A machine-readable format for specifying errors in HTTP API responses based on https://tools.ietf.org/html/rfc7807.
    /// </summary>
    public class FileUploadProblemDetails
    {
        /// <summary>
        /// A URI reference [RFC3986] that identifies the problem type. This specification encourages that, when
        /// dereferenced, it provide human-readable documentation for the problem type
        /// (e.g., using HTML [W3C.REC-html5-20141028]).  When this member is not present, its value is assumed to be
        /// "about:blank".
        /// </summary>
        public string Type { get; set; }

        /// <summary>
        /// A short, human-readable summary of the problem type.It SHOULD NOT change from occurrence to occurrence
        /// of the problem, except for purposes of localization(e.g., using proactive content negotiation;
        /// see[RFC7231], Section 3.4).
        /// </summary>
        public string Title { get; set; }

        /// <summary>
        /// The HTTP status code([RFC7231], Section 6) generated by the origin server for this occurrence of the problem.
        /// </summary>
        public int? Status { get; set; }

        /// <summary>
        /// A human-readable explanation specific to this occurrence of the problem.
        /// </summary>
        public string Detail { get; set; }

        /// <summary>
        /// A URI reference that identifies the specific occurrence of the problem.It may or may not yield further information if dereferenced.
        /// </summary>
        public string Instance { get; set; }

        public static FileUploadProblemDetails CreateServerErrorDetails(string detail)
        {
            return CreateFileUploadProblemDetails("https://httpstatuses.com/500", "Internal Server Error", 500, detail, Empty);
        }

        public static FileUploadProblemDetails CreateBadRequestDetails(string detail)
        {
            return CreateFileUploadProblemDetails("https://httpstatuses.com/400", "Bad Request", 400, detail, Empty);
        }

        public static FileUploadProblemDetails CreateBadRequestDetails(Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionary modelState)
        {
            // This shoudl always be the case...
            if (modelState.Count > 0)
            {
                var detail = Join(" ", modelState.Keys.SelectMany(k => modelState[k].Errors.Select(e => $"{k} - {e.ErrorMessage}")).ToArray());

                return CreateFileUploadProblemDetails("https://httpstatuses.com/400", "Bad Request", 400, detail, Empty);
            }

            if (modelState.IsValid)
                throw new Exception("CreateBadRequestDetails called in error.");

            // Handle a generic problem.
            return CreateFileUploadProblemDetails("https://httpstatuses.com/400", "Bad Request", 400, "Model state is invalid", Empty);
        }

        private static FileUploadProblemDetails CreateFileUploadProblemDetails(string type, string title, int? status, string detail, string instance)
        {
            return new FileUploadProblemDetails
                   {
                       Type     = type,
                       Title    = title,
                       Status   = status,
                       Detail   = detail,
                       Instance = instance
                   };
        }
    }

    #endregion
}
