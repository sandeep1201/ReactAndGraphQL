using System;
using System.Collections.Generic;
using System.Data;
using System.Data.Entity;
using System.Data.Entity.Core.Objects;
using System.Diagnostics;
using System.Linq;
using Dcf.Wwp.Data.Sql.Model;
using Dcf.Wwp.Model.Interface;
using Dcf.Wwp.Model.Interface.Repository;
using DCF.Common.Exceptions;
using DCF.Common.Extensions;
using Dcf.Wwp.Api.Library.Extensions;
using EnrolledProgram = Dcf.Wwp.Model.Interface.Constants.EnrolledProgram;
using EnrolledProgramStatusCode = Dcf.Wwp.Model.Interface.Constants.EnrolledProgramStatusCode;

namespace Dcf.Wwp.Model.Repository
{
    // ReSharper disable once RedundantExtendsListEntry
    public partial class Repository : IParticipantRepository
    {
        public IParticipant GetParticipant(string pin)
        {
            decimal pinDec;
            pin = pin.TrimStart('0'); // We might get pin's with leading 00's.

            if (!decimal.TryParse(pin, out pinDec))
            {
                return null;
            }

            var r = _db.Participants.Where(i => i.PinNumber == pinDec)
                       .Include(i => i.ParticipantEnrolledPrograms)
                       .Include(i => i.ParticipantEnrolledPrograms.Select(j => j.EnrolledProgram))
                       .FirstOrDefault();

            // sbv - this call will return the exact same thing as the legacy one above
            //var r = _db.Participants.FirstOrDefault(i => i.PinNumber == pinDec);

            return r;
        }

        /// <summary>
        ///     Refreshes the Participant information from DB2 and returns the latest
        ///     values which will also be stored in the Participant table.
        /// </summary>
        /// <param name="pin"></param>
        /// <returns></returns>
        public IParticipant GetRefreshedParticipant(string pin)
        {
            pin = pin.TrimStart('0'); // We might get pin's with leading 00's.

            IParticipant r;
            IParticipant result = null;

            r = _db.SP_RefreshParticipant(pin, Database).FirstOrDefault();

            if (r != null)
            {
                result = GetParticipant(r.PinNumber.ToString());
            }

            return (result);
        }

        public ISP_ParticipantDetailsReturnType GetParticipantDetails(string pin)
        {
            decimal pinDec;
            pin = pin.TrimStart('0'); // We might get pin's with leading 00's.

            if (!decimal.TryParse(pin, out pinDec))
            {
                return null;
            }

            return _db.SP_RefreshParticipantDetails(pin, Database).FirstOrDefault();
        }

        public IEnumerable<IParticipant> GetAllParticipants() => _db.Participants;

        public IParticipant GetParticipantById(int? id)
        {
            return _db.Participants.FirstOrDefault(x => x.Id == id);
        }

        public IParticipant GetParticipantByMciId(decimal mciId)
        {
            return _db.Participants.FirstOrDefault(x => x.MCI_ID == mciId);
        }

        /*public IEnumerable<IParticipant> GetParticipantsByUser(string userId)
        {
            // we 're not displaying disenrolled participants

            var r = _db.ParticipantEnrolledPrograms?
                       .Where(x => x.Worker.WAMSId == userId && x.EnrolledProgramStatusCodeId != Interface.Constants.EnrolledProgramStatusCode.DisenrolledId && x.EnrolledProgramStatusCodeId != Interface.Constants.EnrolledProgramStatusCode.CloseId)
                       .Select(x => x.Participant).Distinct();

            return r;
        }*/

        public IEnumerable<IUSP_ParticipantbyWorker_ProgramStatus_Result> GetParticipantsForWorker(string wamsId, string agencyCode, string program)
        {
            var t = _db.USP_ParticipantbyWorker_ProgramStatus(wamsId, agencyCode, program);

            var r = new List<IUSP_ParticipantbyWorker_ProgramStatus_Result>(t);

            return r;
        }

        public IEnumerable<IParticipant> GetRecentParticipantsByUser(string userId, int limit)
        {
            // Silam likes the SQL emitted by this Linq statement instead (two INNER JOINS) 
            var r = _db.RecentParticipants.Where(rp => rp.Worker.WAMSId == userId)
                       .OrderByDescending(rp => rp.LastAccessed)
                       .Select(rp => rp.Participant)
                       .Take(limit);

            return r;

            // instead of this original generated by the one below:
            // SELECT TOP(10) [t1].[Id], [t1].[PinNumber], [t1].[FirstName], [t1].[MiddleInitialName], [t1].[LastName], [t1].[SuffixName], [t1].[DateOfBirth], [t1].[DateOfDeath], [t1].[GenderIndicator], [t1].[AliasResponse], [t1].[BirthVerificationCode], [t1].[BirthPlaceCode], [t1].[CitizenshipVerificationCode], [t1].[DCLCitizenshipSwitch], [t1].[DeathVerificationCode], [t1].[LanguageCode], [t1].[MaxHistorySequenceNumber], [t1].[PrimarySSNNumber], [t1].[PseudoSSNNumber], [t1].[RaceCode], [t1].[SSNAppointmentDate], [t1].[SSNAppointmentVerificationCode], [t1].[SSNValidatedCode], [t1].[CaresUpdatedDate], [t1].[USCitizenSwitch], [t1].[WorkerAlert1Code], [t1].[WorkerAlert2Code], [t1].[MaidNumber], [t1].[ChildElsewhereSwitch], [t1].[ChildVerificationCode], [t1].[AmericanIndianIndicator], [t1].[AsianIndicator], [t1].[BlackIndicator], [t1].[HispanicIndicator], [t1].[PacificIslanderIndicator], [t1].[WhiteIndicator], [t1].[MCI_ID], [t1].[MACitizenVerificationCode], [t1].[TribeChildMemberIndicator], [t1].[TribeChildVerificationCode], [t1].[TribalMemberIndicator], [t1].[TribalMemberVerificationCode], [t1].[DeathDateSourceCode], [t1].[WorkerOverideVerificationCode], [t1].[TimeLimitStatus], [t1].[CaseNumber], [t1].[IsConfidentialCase], [t1].[AssignedWorkerId], [t1].[OfficeNumber], [t1].[AgencyCode], [t1].[CountyNumber], [t1].[ConversionProjectDetails], [t1].[ConversionDate], [t1].[IsDeleted], [t1].[CreatedDate], [t1].[ModifiedBy], [t1].[ModifiedDate], [t1].[RowVersion]
            // FROM[wwp].[RecentParticipant]
            // AS[t0]
            // INNER JOIN[wwp].[Participant] AS[t1] ON[t1].[Id] =  [t0].[ParticipantId]
            // WHERE[t0].[WorkerId] = ((
            //                            SELECT TOP (1) [t2].[Id]
            //                              FROM[wwp].[Worker]
            //                              AS[t2]
            //                              WHERE[t2].[WAMSId] = @p0
            //                          ))
            // ORDER BY[t0].[LastAccessed] DESC

            //return _db.RecentParticipants?.Where(x => x.WorkerId == _db.Workers.Where(y => y.WAMSId == userId).Select(y => y.Id).FirstOrDefault())
            //          .OrderByDescending(x => x.LastAccessed)
            //          .Select(x => x.Participant).Take(limit).ToList();
        }

        public IEnumerable<IUSP_RecentlyAccessed_ProgramStatus_Result> GetRecentParticipants(string wamsId)
        {
            var t = _db.USP_RecentlyAccessed_ProgramStatus(wamsId);

            var r = new List<IUSP_RecentlyAccessed_ProgramStatus_Result>(t);

            return r;
        }


        public IEnumerable<IUSP_RecentlyAccessed_ProgramStatus_Result> GetParticipantsBySearch(string firstName, string lastName, string middleName, string gender, DateTime? dob)
        {
            var t = _db.USP_ParticipantSearch_ProgramStatus(firstName, lastName, middleName, gender, dob);

            var r = new List<IUSP_RecentlyAccessed_ProgramStatus_Result>(t);

            return r;
        }

        /// <summary>
        /// This returns the most recent Pep of each program.
        /// </summary>
        /// <param name="pin"></param>
        /// <returns></returns>
        public IEnumerable<IParticipantEnrolledProgram> GetPepRecordsForPin(decimal pin)
        {
            var recentStatus      = new ObjectParameter("RecentStatus",      typeof(string));
            var referralDate      = new ObjectParameter("ReferralDate",      typeof(DateTime));
            var enrollmentDate    = new ObjectParameter("EnrollmentDate",    typeof(DateTime));
            var disEnrollmemtDate = new ObjectParameter("DisEnrollmemtDate", typeof(DateTime));
            var enrolledProgramId = new ObjectParameter("EnrolledProgramId", typeof(int));

            var r = (IEnumerable<IParticipantEnrolledProgram>) _db.USP_ProgramStatus(
                                                                                     pin,
                                                                                     Database,
                                                                                     false, // do not check table t18  false
                                                                                     null,
                                                                                     recentStatus,
                                                                                     referralDate,
                                                                                     enrollmentDate,
                                                                                     disEnrollmemtDate,
                                                                                     enrolledProgramId
                                                                                    );

            return r;
        }

        public IEnumerable<IUSP_GetLastWWOrLFInstance> GetLastWWOrLFInstance(decimal pin)
        {
            var parms = new Dictionary<string, object> { ["PinNumber"] = pin, ["SchemaName"] = Database };

            //var sw = new Stopwatch();
            //sw.Restart();
            //var rs = _db.ExecStoredProc<USP_GetLastWWOrLFInstance>("wwp.USP_GetLastWWOrLFInstance", parms);
            //sw.Stop();
            //var elapsed = sw.Elapsed;

            // this one is slightly faster and less resource intensive
            //sw.Restart();
            var dt = _db.ExecStoredProcUsingAdo("wwp.USP_GetLastWWOrLFInstance", parms);

            var rs = dt.AsEnumerable()
                       .Select(r => new USP_GetLastWWOrLFInstance
                                    {
                                        ProgramCode               = r.Field<string>("ProgramCode"),
                                        StatusDate                = r.Field<DateTime?>("StatusDate"),
                                        WorkerId                  = r.Field<string>("WorkerId"),
                                        ParticipantIsConfidential = r.Field<bool?>("ParticipantIsConfidential")
                                    })
                       .ToList();

            //sw.Stop();
            //var elapsed1 = sw.Elapsed;

            rs.ForEach(i => i.ProgramCode = i.ProgramCode.Trim());

            return (rs);
        }

        public DataTable GetMostRecentPrograms(decimal pin)
        {
            var parms = new Dictionary<string, object> { ["PinNumber"] = pin, ["SchemaName"] = Database };

            //var sw = new Stopwatch();
            //sw.Restart();

            var resultSet = _db.ExecStoredProcUsingAdo("wwp.USP_MostRecentPrograms", parms);

            //sw.Stop();
            //var elapsed1 = sw.Elapsed;

            //return (rs);
            return (resultSet);
        }

        public IEnumerable<IUSP_ReferralsAndTransfers_Result> GetReferralsAndTransfersResults(IWorker worker, bool refreshInd, string agencyCode, string roles)
        {
            IEnumerable<IUSP_ReferralsAndTransfers_Result> r = null;

            if (worker?.Organization != null)
            {
                r = _db.USP_ReferralsAndTransfers(worker.WAMSId, Database, agencyCode, roles);
            }
            else
            {
                r = new List<IUSP_ReferralsAndTransfers_Result>();
            }

            return r;
        }

        public IEnumerable<IParticipantEnrolledProgram> GetNonEligibilityReferrals(IWorker worker)
        {
            if (worker?.Organization == null)
            {
                return new List<IParticipantEnrolledProgram>();
            }

            // For the Non-eligibility programs we need to find the PEP records for that office (for now)
            return _db.ParticipantEnrolledPrograms.Where(x => x.Office.ContractArea.Organization.Id == worker.OrganizationId && x.EnrolledProgram.ProgramType == "NonEligibility" && x.EnrolledProgramStatusCode.StatusCode == "Referred" && !x.IsDeleted);
        }

        public void UpsertRecentParticipant(string wamsId, int participantId)
        {
            // This version only makes *one* SQL call..., two only if 
            // req'd because it's a new row - but not *two* every time.

            var recentParticipant = _db.RecentParticipants.FirstOrDefault(x => x.Worker.WAMSId == wamsId && x.ParticipantId == participantId);

            if (recentParticipant == null)
            {
                var worker = _db.Workers.FirstOrDefault(i => i.WAMSId == wamsId);

                if (worker != null)
                {
                    recentParticipant = new RecentParticipant
                                        {
                                            ParticipantId = participantId,
                                            WorkerId      = worker.Id
                                        };

                    _db.RecentParticipants.Add(recentParticipant);
                }
                else
                {
                    return;
                }
            }

            var now = DateTime.Now; // this way the dateTimes are *exactly* the same instead of off by milliseconds.
            recentParticipant.LastAccessed = now;
            recentParticipant.ModifiedBy   = wamsId;
            recentParticipant.ModifiedDate = now;
        }

        public void UpsertParticipantEnrollment(int? pepId, int? workerLoginId, string action, string userId, string worker, string completionReasonDetails = null, DateTime? disenrollmentDate = null, int? completionReasonId = null)
        {
            var actionToDo = action.ToLower();

            if (pepId == null)
            {
                return;
            }

            switch (actionToDo)
            {
                case "enroll":
                    // Deprecated.
                    // UpdateEnrollment(pepId, workerLoginId);
                    break;
                case "disenroll":
                    // Deprecated
                    // UpdateDisenrollment(pepId, workerLoginId, userId, worker, completionReasonDetails, disenrollmentDate, completionReasonId);
                    break;
                case "assign":
                    UpdateWorkerAssignment(pepId, workerLoginId);
                    break;
                case "reassign":
                    UpdateWorkerAssignment(pepId, workerLoginId);
                    break;
            }
        }

        public IParticipantEnrolledProgram GetParticantEnrollment(int pepId)
        {
            return _db.ParticipantEnrolledPrograms.SingleOrDefault(x => x.Id == pepId);
        }

        /// <summary>
        /// Transfers a participant's enrolled program in DB2.
        /// </summary>
        public void TransferPariticipant(IParticipantEnrolledProgram pep, IOffice sourceOffice, IOffice destOffice, IWorker sourceWorker, IWorker destWorker, string userId, string t2536Fep)
        {
            if (pep.IsLF)
            {
                pep.LFFEPId = destWorker?.Id;
            }
            else
            {
                pep.Worker = destWorker;
            }

            pep.Office = destOffice;

            var pin         = pep.Participant.PinNumber;
            var programCode = pep.EnrolledProgram.ProgramCode;


            try
            {
                _db.SP_DB2_Transfer_Update(pin,
                                           _authUser.CDODate ?? DateTime.Now,
                                           sourceOffice.CountyAndTribe?.CountyNumber,
                                           sourceOffice.OfficeNumber,
                                           destOffice.CountyAndTribe?.CountyNumber,
                                           destOffice.OfficeNumber,
                                           destWorker == null ? "WWP" : destWorker.MFUserId,
                                           userId,
                                           programCode,
                                           pep.EnrolledProgram.SubProgramCode ?? " ",
                                           "M",
                                           Database,
                                           destWorker?.MFUserId ?? sourceWorker?.MFUserId ?? t2536Fep);

                UpdateT0532(pin, destWorker?.MFUserId ?? "", programCode);

                pep.ModifiedBy   = _authUser.Username;
                pep.ModifiedDate = DateTime.Now;
            }
            catch (InvalidCastException e) // ??? Qu esta
            {
                // If writeback to DB2 fails, revert back our data.
                pep.Office = sourceOffice;
                pep.Worker = sourceWorker;
            }
        }

        public IEnumerable<IParticipant> PariticipantsBeingTransferred(IWorker worker)
        {
            return _db.ParticipantEnrolledPrograms
                      .Where(x => x.Office.ContractArea.Organization.Id == worker.OrganizationId && x.WorkerId == null && x.EnrolledProgramStatusCode.StatusCode == "Enrolled")
                      .Select(x => x.Participant);
        }

        public string GetEnrolledProgramStatus(int? enrolledProgStatusId)
        {
            var enrolledProg = _db.EnrolledProgramStatusCodes?.FirstOrDefault(x => x.Id == enrolledProgStatusId);
            return enrolledProg?.StatusCode;
        }

        public string GetEnrolledProgramCd(string enrolledProgramName)
        {
            var programCd = _db.EnrolledPrograms?.FirstOrDefault(x => x.Name == enrolledProgramName)?.ProgramCode;
            return programCd;
        }

        /// <summary>
        /// Enrolls a Pep in WWP and CWW. This method saves because we always want to be in sync with DB2, so we'll update both ASAP. 
        /// </summary>
        /// <param name="pepId"></param>
        /// <param name="workerLoginId"></param>
        public void EnrollPep(int? pepId, int? workerLoginId, string userId)
        {
            var enrolledProgram =  _db.ParticipantEnrolledPrograms.FirstOrDefault(x => x.Id == pepId);

            if (enrolledProgram != null)
            {
                enrolledProgram.EnrolledProgramStatusCodeId = EnrolledProgramStatusCode.EnrolledId;
                enrolledProgram.EnrollmentDate              = _authUser.CDODate ?? DateTime.Now;
                enrolledProgram.WorkerId                    = workerLoginId;

                enrolledProgram.ModifiedBy   = _authUser.Username;
                enrolledProgram.ModifiedDate = DateTime.Now;

                var mainframeId = "WWPMFID";

                if (workerLoginId.HasValue)
                {
                    var worker = WorkerById(workerLoginId.Value);

                    if (worker != null)
                    {
                        mainframeId = worker.MFUserId;
                    }
                }

                var pin         = enrolledProgram.Participant.PinNumber;
                var programCode = enrolledProgram.EnrolledProgram.ProgramCode;

                var recentStatus      = new ObjectParameter("RecentStatus",      typeof(string));
                var referralDate      = new ObjectParameter("ReferralDate",      typeof(DateTime));
                var enrollmentDate    = new ObjectParameter("EnrollmentDate",    typeof(DateTime));
                var disEnrollmemtDate = new ObjectParameter("DisEnrollmemtDate", typeof(DateTime));
                var enrolledProgramId = new ObjectParameter("EnrolledProgramId", typeof(int));

                var mostRecentPep = (IEnumerable<IUSP_ProgramStatus_Recent_Result>) _db.USP_ProgramStatus_Recent(
                                                                                                                 pin,
                                                                                                                 Database,
                                                                                                                 true,
                                                                                                                 null,
                                                                                                                 recentStatus,
                                                                                                                 referralDate,
                                                                                                                 enrollmentDate,
                                                                                                                 disEnrollmemtDate,
                                                                                                                 enrolledProgramId
                                                                                                                ).ToList();

                string currentRegCode;

                if (programCode.Trim() == "CF")
                {
                    var isW2CfCoEnrolled = mostRecentPep?.Any(x => x.ProgramName.Trim() == "WW" && (x.RecentStatus == "Referred" || x.RecentStatus == "Enrolled"));

                    if (isW2CfCoEnrolled == true)
                    {
                        currentRegCode = mostRecentPep?.Where(x => x.ProgramName.Trim() == "WW").Select(y => y.CurrentRegCode).FirstOrDefault();
                    }
                    else
                    {
                        currentRegCode = "V";
                    }
                }
                else
                    if (programCode.Trim() == "WW")
                    {
                        currentRegCode = enrolledProgram.CurrentRegCode;
                    }
                    else
                    {
                        currentRegCode = "V";
                    }

                enrolledProgram.CurrentRegCode = currentRegCode;

                // EXEC @return_value = [wwp].[SP_DB2_Enrollment_Update]
                // @PinNumber = 4009010274,
                // @EffectiveDate = N'2018-01-02',  ---EnrollmentDate from PEP
                // @CountyNumber = 13 ,  ---CountyId from PEP  (CountyNumber from County table)
                // @OfficeNumber = 0811 , ---OfficeId from PEP (OfficeNum from office table)
                // @MFWorkerId = N'XCTB9X',----WorkerId from PEP
                // @ProgramCode = N'WW' , ---EnrolledprogramId from PEP (ProgramCode from EnrolledProgram table)
                // @SubProgramCode = N'C' , ---EnrolledprogramId from PEP (Subprogram from EnrolledProgram table) 
                // @SchemaName = N'WWPDEV'

                if (!enrolledProgram.IsFCDP)
                {
                    try
                    {
                        _db.SP_DB2_Enrollment_Update(pin,
                                                     _authUser.CDODate ?? DateTime.Today,
                                                     enrolledProgram.Office?.CountyAndTribe?.CountyNumber,
                                                     enrolledProgram.Office?.OfficeNumber,
                                                     mainframeId,
                                                     userId,
                                                     programCode,
                                                     enrolledProgram.EnrolledProgram.SubProgramCode ?? " ",
                                                     currentRegCode,
                                                     Database,
                                                     (programCode.Trim() == "WW" || programCode.Trim() == "LF") ? 0 : enrolledProgram.RequestForAssistance.RfaNumber
                                                    );

                        UpdateT0532(pin, mainframeId, programCode);

                        if (UpdateCutOver(enrolledProgram) != 0)
                            throw new DCFApplicationException("Failed due to SProc issue. Please try again.");
                    }
                    catch (Exception ex)
                    {
                        throw new DCFApplicationException("Enrollment failed due to mainframe issue.  Please try again.", ex);
                    }
                }
            }

            Save();
        }

        /// <summary>
        ///     Checks DB2 for open records.
        ///     Use PinNumber and CaseNumber from pep record.
        /// </summary>
        /// <param name="pinNumber"></param>
        /// <param name="caseNumber"></param>
        /// <returns></returns>
        public ISP_PreCheckDisenrollment_Result PreDisenrollmentErrors(decimal? pinNumber, decimal? caseNumber, int? pepId) => _db.SP_PreCheckDisenrollment(pinNumber, caseNumber, Database, pepId).FirstOrDefault();

        public void UpdateDisenrollment(IParticipantEnrolledProgram pep, int? workerLoginId, string mFUserId, string authWorker, string completionReasonDetails = null, DateTime? disenrollmentDate = null, int? completionReasonId = null)
        {
            var completionReasonCd = string.Empty;
            var modifiedDate       = DateTime.Now;

            if (pep == null)
            {
                throw new DCFApplicationException("Disenrollment failed because database record was not found.");
            }

            var enrolledPeps = _db.ParticipantEnrolledPrograms?.Where(x => x.EnrolledProgramStatusCodeId == EnrolledProgramStatusCode.EnrolledId && x.ParticipantId == pep.ParticipantId);


            var mainframeId = "WWPMFID";
            var userId      = "WWPSYS";

            if (workerLoginId.HasValue)
            {
                var worker = WorkerById(workerLoginId.Value);

                if (worker != null)
                {
                    mainframeId = worker.MFUserId;
                    userId      = worker.WAMSId;
                }
            }

            if (completionReasonId != null)
            {
                var c = _db.CompletionReasons.FirstOrDefault(i => i.Id == completionReasonId);
                completionReasonCd = c?.Code;
            }

            var participantId = pep.ParticipantId;
            var currProgramId = pep.EnrolledProgramId;

            var hasAnyOtherOpenPrograms = _db.ParticipantEnrolledPrograms
                                             .Count(i =>
                                                        i.ParticipantId               == participantId &&
                                                        i.EnrolledProgramId           != currProgramId &&
                                                        i.EnrolledProgramStatusCodeId == 2);

            var hasOthers = hasAnyOtherOpenPrograms > 0 ? "1" : "0";

            if (!pep.IsFCDP)
            {
                // Registration Code:
                // M is most of the time. V is mostly learnfare
                disenrollmentDate = disenrollmentDate ?? _authUser.CDODate;
                _db.SP_DB2_Disenrollment_Update(pep.Participant.PinNumber,
                                                disenrollmentDate ?? DateTime.Today,
                                                pep.Office?.CountyAndTribe?.CountyNumber,
                                                pep.Office?.OfficeNumber,
                                                mainframeId,
                                                mFUserId,
                                                pep.EnrolledProgram?.ProgramCode,
                                                pep.EnrolledProgram?.SubProgramCode ?? " ",
                                                "M",
                                                completionReasonCd,
                                                hasOthers,
                                                Database);
            }


            // We only close barriers and accommodations if we are disenrolling the last program.
            _db.SP_Barrier_Accommodation_Update(pep.Id, _authUser.CDODate ?? DateTime.Today, false, authWorker);

            if (pep.EnrolledProgramId != EnrolledProgram.TransitionalJobsId       &&
                pep.EnrolledProgramId != EnrolledProgram.TransformMilwaukeeJobsId &&
                pep.EnrolledProgramId != EnrolledProgram.ChildrenFirstId          &&
                pep.EnrolledProgramId != EnrolledProgram.FCDPId)
            {
                disenrollmentDate = _authUser.CDODate ?? DateTime.Now;
            }

            if (completionReasonDetails != null)
            {
                pep.PEPOtherInformations.Add(new PEPOtherInformation
                                             {
                                                 PEPId                   = pep.Id,
                                                 CompletionReasonDetails = completionReasonDetails,
                                                 ModifiedBy              = _authUser.Username,
                                                 ModifiedDate            = modifiedDate
                                             });
            }

            pep.EnrolledProgramStatusCodeId = EnrolledProgramStatusCode.DisenrolledId;
            pep.DisenrollmentDate           = disenrollmentDate;
            pep.CompletionReasonId          = completionReasonId;
            pep.ModifiedBy                  = _authUser.Username;
            pep.ModifiedDate                = DateTime.Now;

            Save();
        }

        /// <summary>
        /// SP is only for NON-W2 programs. They need to be reassigned in DB2 on table 18 so that legacy apps dont break.
        /// </summary>
        /// <param name="pinNumber"></param>
        /// <param name="mFUserId">This is the new assigned worker.</param>
        public void ReassignLFCaseManagerInDB2(decimal? pinNumber, string mFUserId)
        {
            try
            {
                _db.SP_DB2_ReassignLFCaseManager(pinNumber, mFUserId, Database);
            }
            catch (Exception e)
            {
                throw new DCFApplicationException("Reassign failed due to mainframe issue.  Please try again.", e);
            }
        }

        /// <summary>
        /// SP is only for W2 programs. They need to be reassigned in DB2 on table 18 so that legacy apps dont break.
        /// </summary>
        /// <param name="pinNumber"></param>
        /// <param name="FepId">This is the new assigned worker.</param>
        public void ReassignW2CaseManagerInDB2(decimal? pinNumber, string FepId)
        {
            try
            {
                _db.SP_DB2_ReassignW2CaseManager(pinNumber, FepId, Database);
            }
            catch (Exception e)
            {
                throw new DCFApplicationException("Reassign failed due to mainframe issue.  Please try again.", e);
            }
        }


        /// <summary>
        /// Deprecated.
        /// </summary>
        /// <param name="pepId"></param>
        /// <param name="workerLoginId"></param>
        private void UpdateWorkerAssignment(int? pepId, int? workerLoginId)
        {
            var pep              = _db.ParticipantEnrolledPrograms?.FirstOrDefault(x => x.Id == pepId);
            var worker           = _db.Workers?.FirstOrDefault(x => x.Id                     == workerLoginId);
            var originalWorkerId = pep.WorkerId;
            var pinNumber        = pep.Participant.PinNumber;
            var mFUserId         = worker.MFUserId;

            if (pep != null)
            {
                try
                {
                    pep.WorkerId = workerLoginId;

                    // SP is only for NON-W2 programs.
                    _db.SP_DB2_ReassignLFCaseManager(pinNumber, mFUserId, Database);
                }
                catch (Exception ra)
                {
                    pep.WorkerId = originalWorkerId;

                    throw new DCFApplicationException("Reassign failed due to mainframe issue.  Please try again.", ra);
                }
            }
        }

        /// <summary>
        /// Insert or Update T0532 with the PROG_CD and WORKER_ID for Non-Eligibility Programs.
        /// </summary>
        /// <param name="pin"></param>
        /// <param name="mfUserId"></param>
        /// <param name="programCode"></param>
        public void UpdateT0532(decimal? pin, string mfUserId, string programCode)
        {
            //Insert or Update T0532 with the PROG_CD and WORKER_ID for Non-Eligibility Programs
            if (programCode.Trim() != "WW" && programCode.Trim() != "LF" && programCode.Trim() != "FCD")
            {
                _db.SP_DB2_T0532_Update(pin,
                                        mfUserId,
                                        programCode,
                                        Database
                                       );
            }
        }

        public IEnumerable<ISpecialInitiative> GetFeatureValue(string featureName)
        {
            var value = featureName == "all" ? _db.SpecialInitiatives.ToList() : _db.SpecialInitiatives.Where(i => i.ParameterName == featureName).ToList();

            return value;
        }

        public IWorkerTaskStatus GetWorkerTaskStatus(string code)
        {
            return _db.WorkerTaskStatuses.First(i => i.Code == code);
        }

        public IWorkerTaskCategory GetWorkerTaskCategory(string code)
        {
            return _db.WorkerTaskCategories.First(i => i.Code == code);
        }

        private int UpdateCutOver(IParticipantEnrolledProgram pep)
        {
            var rs = 0;

            if ((_authUser.CDODate ?? DateTime.Today).IsSameOrAfter(GetFeatureValue("ParticipationTracking").First().ParameterValue.ToDateMonthDayYear()))
                rs = _db.USP_EP_CutOver(pep.Participant.PinNumber.ToString(), pep.ParticipantId, pep.EnrolledProgramId.GetValueOrDefault(),
                                        pep.EnrollmentDate?.ToString("yyyy-MM-dd"), _authUser.MainFrameId, _authUser.WIUID);

            return rs;
        }

        #region Performance-related

        public IQueryable<IParticipant> GetParticipantsAsQueryable()
        {
            var q = _db.Participants
                       .AsQueryable()
                       .AsNoTracking();

            return (q);
        }

        public IQueryable<IRecentParticipant> GetRecentParticipantsAsQueryable()
        {
            var q = _db.RecentParticipants
                       .AsQueryable()
                       .AsNoTracking();

            return (q);
        }

        public IEnumerable<IConfidentialPinInformation> GetConfidentialPinInfo(decimal pin)
        {
            var rs = _db.ConfidentialPinInformations.Where(i => i.PinNumber == pin).ToList();

            return (rs);
        }

        #endregion
    }
}
