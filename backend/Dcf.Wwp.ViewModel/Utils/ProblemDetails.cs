using System;
using System.Linq;

namespace Dcf.Wwp.Api.Library.Utils
{
    #region Problem Details code taken from .NET Core 2.1 code... TODO: refactore this once we move to 2.1+

    /// <summary>
    /// A machine-readable format for specifying errors in HTTP API responses based on https://tools.ietf.org/html/rfc7807.
    /// </summary>
    public class ProblemDetails
    {
        /// <summary>
        /// A URI reference [RFC3986] that identifies the problem type. This specification encourages that, when
        /// dereferenced, it provide human-readable documentation for the problem type
        /// (e.g., using HTML [W3C.REC-html5-20141028]).  When this member is not present, its value is assumed to be
        /// "about:blank".
        /// </summary>
        public string Type { get; set; }

        /// <summary>
        /// A short, human-readable summary of the problem type.It SHOULD NOT change from occurrence to occurrence
        /// of the problem, except for purposes of localization(e.g., using proactive content negotiation;
        /// see[RFC7231], Section 3.4).
        /// </summary>
        public string Title { get; set; }

        /// <summary>
        /// The HTTP status code([RFC7231], Section 6) generated by the origin server for this occurrence of the problem.
        /// </summary>
        public int? Status { get; set; }

        /// <summary>
        /// A human-readable explanation specific to this occurrence of the problem.
        /// </summary>
        public string Detail { get; set; }

        /// <summary>
        /// A URI reference that identifies the specific occurrence of the problem.It may or may not yield further information if dereferenced.
        /// </summary>
        public string Instance { get; set; }

        public static ProblemDetails CreateServerErrorDetails(string detail)
        {
            return CreateProblemDetails("https://httpstatuses.com/500", "Internal Server Error", 500, detail, string.Empty);
        }

        public static ProblemDetails CreateBadRequestDetails(string detail)
        {
            return CreateProblemDetails("https://httpstatuses.com/400", "Bad Request", 400, detail, string.Empty);
        }

        public static ProblemDetails CreateBadRequestDetails(Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionary modelState)
        {
            // This shoudl always be the case...
            if (modelState.Count > 0)
            {
                var detail = string.Join(" ", modelState.Keys.SelectMany(k => modelState[k].Errors.Select(e => $"{k} - {e.ErrorMessage}")).ToArray());

                return CreateProblemDetails("https://httpstatuses.com/400", "Bad Request", 400, detail, string.Empty);
            }

            if (modelState.IsValid)
                throw new Exception("CreateBadRequestDetails called in error.");

            // Handle a generic problem.
            return CreateProblemDetails("https://httpstatuses.com/400", "Bad Request", 400, "Model state is invalid", string.Empty);
        }

        public static ProblemDetails CreateGatewayErrorDetails(string detail)
        {
            return CreateProblemDetails("https://httpstatuses.com/502", "Bad Gateway", 502, detail, string.Empty);
        }


        private static ProblemDetails CreateProblemDetails(string type, string title, int? status, string detail, string instance)
        {
            return new ProblemDetails
                   {
                       Type     = type,
                       Title    = title,
                       Status   = status,
                       Detail   = detail,
                       Instance = instance
                   };
        }
    }

    #endregion
}
